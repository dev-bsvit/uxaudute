#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/release.sh [patch|minor|major] "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ UX Audit Release Script${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if [ $# -lt 2 ]; then
    echo -e "${RED}‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/release.sh [patch|minor|major] \"–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π\"${NC}"
    exit 1
fi

BUMP_TYPE=$1
DESCRIPTION=$2

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ main
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main...${NC}"
    git checkout main
    git pull origin main
fi

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
echo -e "${BLUE}üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $CURRENT_VERSION${NC}"

# –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
IFS='.' read -ra VERSION_PARTS <<< "${CURRENT_VERSION#v}"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

case $BUMP_TYPE in
    "major")
        MAJOR=$((MAJOR + 1))
        MINOR=0
        PATCH=0
        ;;
    "minor")
        MINOR=$((MINOR + 1))
        PATCH=0
        ;;
    "patch")
        PATCH=$((PATCH + 1))
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: patch, minor, –∏–ª–∏ major${NC}"
        exit 1
        ;;
esac

NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
echo -e "${GREEN}üéØ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $NEW_VERSION${NC}"

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
echo -e "${YELLOW}‚ùì –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑ $NEW_VERSION? (y/N)${NC}"
read -r CONFIRM
if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo -e "${RED}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
echo -e "${BLUE}üè∑Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ–≥...${NC}"
git tag -a "$NEW_VERSION" -m "–í–µ—Ä—Å–∏—è $NEW_VERSION: $DESCRIPTION"

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub
echo -e "${BLUE}üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub...${NC}"
git push origin main
git push origin "$NEW_VERSION"

# –û–±–Ω–æ–≤–ª—è–µ–º stable
echo -e "${BLUE}üîí –û–±–Ω–æ–≤–ª—è–µ–º stable –≤–µ—Ç–∫—É...${NC}"
git checkout stable
git merge main
git push origin stable

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ main
git checkout main

echo -e "${GREEN}‚úÖ –†–µ–ª–∏–∑ $NEW_VERSION —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!${NC}"
echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π: https://uxaudute.vercel.app${NC}"
echo -e "${BLUE}üì¶ GitHub Release: https://github.com/dev-bsvit/uxaudute/releases/tag/$NEW_VERSION${NC}"
