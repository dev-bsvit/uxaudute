#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
 */

const { ResponseQualityAnalyzer } = require('../src/lib/quality-metrics')
const { LanguageManager } = require('../src/lib/language-manager')
const { PromptValidator } = require('../src/lib/prompt-validator')
const { StablePromptsLoader } = require('../src/lib/stable-prompts-loader')
const { PromptType } = require('../src/lib/i18n/types')

class PromptQualityTester {
  constructor() {
    this.testResults = {
      passed: 0,
      failed: 0,
      tests: []
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests() {
    console.log('üß™ Starting Prompt Quality Fix Tests...\n')

    // 1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    await this.testStablePromptsLoading()

    // 2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    await this.testPromptValidation()

    // 3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    await this.testLanguageDetection()

    // 4. –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    await this.testResponseQuality()

    // 5. –¢–µ—Å—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await this.testLanguageConsistency()

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.printResults()
  }

  /**
   * –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  async testStablePromptsLoading() {
    console.log('üìã Testing stable prompts loading...')

    try {
      const stablePrompts = StablePromptsLoader.loadAllStablePrompts()
      const stats = StablePromptsLoader.getStablePromptsStats()

      this.assert(
        Object.keys(stablePrompts).length > 0,
        'Should load stable prompts',
        `Loaded ${Object.keys(stablePrompts).length} stable prompts`
      )

      this.assert(
        stats.averageQuality > 80,
        'Stable prompts should have high quality',
        `Average quality: ${stats.averageQuality}`
      )

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const mainPrompt = StablePromptsLoader.getStablePrompt(PromptType.MAIN)
      this.assert(
        mainPrompt && mainPrompt.length > 100,
        'Should get main stable prompt',
        `Main prompt length: ${mainPrompt?.length || 0}`
      )

      console.log('‚úÖ Stable prompts loading tests passed\n')
    } catch (error) {
      this.assert(false, 'Stable prompts loading failed', error.message)
    }
  }

  /**
   * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  async testPromptValidation() {
    console.log('üîç Testing prompt validation...')

    try {
      // –¢–µ—Å—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const goodPrompt = `–¢—ã –æ–ø—ã—Ç–Ω—ã–π UX-–¥–∏–∑–∞–π–Ω–µ—Ä-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. 
      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö UX-–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π.
      
      –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:
      1. –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
      2. UX-–æ–ø—Ä–æ—Å —Å 5 –≤–æ–ø—Ä–æ—Å–∞–º–∏
      3. –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      4. –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å`

      const goodResult = await PromptValidator.validatePrompt(goodPrompt, PromptType.MAIN, 'ru')
      
      this.assert(
        goodResult.isValid,
        'Good prompt should be valid',
        `Score: ${goodResult.score}, Issues: ${goodResult.issues.length}`
      )

      // –¢–µ—Å—Ç –ø–ª–æ—Ö–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const badPrompt = '–ü–ª–æ—Ö–æ–π –ø—Ä–æ–º–ø—Ç'
      const badResult = await PromptValidator.validatePrompt(badPrompt, PromptType.MAIN, 'ru')
      
      this.assert(
        !badResult.isValid,
        'Bad prompt should be invalid',
        `Score: ${badResult.score}, Issues: ${badResult.issues.length}`
      )

      // –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const quickValid = await PromptValidator.quickValidate(goodPrompt, PromptType.MAIN)
      const quickInvalid = await PromptValidator.quickValidate(badPrompt, PromptType.MAIN)

      this.assert(
        quickValid && !quickInvalid,
        'Quick validation should work correctly',
        `Good: ${quickValid}, Bad: ${quickInvalid}`
      )

      console.log('‚úÖ Prompt validation tests passed\n')
    } catch (error) {
      this.assert(false, 'Prompt validation failed', error.message)
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
   */
  async testLanguageDetection() {
    console.log('üåê Testing language detection...')

    try {
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
      const mockRequest = {
        headers: new Map([
          ['accept-language', 'ru-RU,ru;q=0.9,en;q=0.8'],
          ['content-language', 'ru']
        ])
      }

      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const contextFromParams = LanguageManager.createLanguageContextFromParams({
        language: 'ru',
        acceptLanguage: 'ru-RU,ru;q=0.9,en;q=0.8'
      })

      this.assert(
        contextFromParams.promptLanguage === 'ru',
        'Should detect Russian from parameters',
        `Detected: ${contextFromParams.promptLanguage}`
      )

      // –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
      const originalPrompt = 'Analyze the interface'
      const enforcedPrompt = LanguageManager.enforceResponseLanguage(originalPrompt, 'ru')

      this.assert(
        enforcedPrompt.includes('—Ä—É—Å—Å–∫–æ–º'),
        'Should enforce Russian language',
        'Language enforcement applied'
      )

      console.log('‚úÖ Language detection tests passed\n')
    } catch (error) {
      this.assert(false, 'Language detection failed', error.message)
    }
  }

  /**
   * –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
   */
  async testResponseQuality() {
    console.log('üìä Testing response quality...')

    try {
      // –¢–µ—Å—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const goodResponse = `# –ê–Ω–∞–ª–∏–∑ UX –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

## –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
–î–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.

## UX-–æ–ø—Ä–æ—Å
1. –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è? (1-5)
2. –õ–µ–≥–∫–æ –ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (1-5)
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∑–∞–π–Ω –æ–∂–∏–¥–∞–Ω–∏—è–º? (1-5)

## –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
- –î–æ–±–∞–≤–∏—Ç—å breadcrumbs –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é –æ—Å–Ω–æ–≤—É, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.`

      const goodMetrics = ResponseQualityAnalyzer.measureQuality(goodResponse, 'ru')

      this.assert(
        goodMetrics.qualityScore > 70,
        'Good response should have high quality score',
        `Quality score: ${goodMetrics.qualityScore}`
      )

      this.assert(
        goodMetrics.languageAccuracy > 90,
        'Russian response should have high language accuracy',
        `Language accuracy: ${goodMetrics.languageAccuracy}`
      )

      this.assert(
        !goodMetrics.isTruncated,
        'Good response should not be truncated',
        `Is truncated: ${goodMetrics.isTruncated}`
      )

      // –¢–µ—Å—Ç –ø–ª–æ—Ö–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const badResponse = '–ü–ª–æ—Ö–æ–π –∞–Ω–∞–ª–∏–∑...'
      const badMetrics = ResponseQualityAnalyzer.measureQuality(badResponse, 'ru')

      this.assert(
        badMetrics.qualityScore < 50,
        'Bad response should have low quality score',
        `Quality score: ${badMetrics.qualityScore}`
      )

      // –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
      const meetsStandards = ResponseQualityAnalyzer.meetsQualityStandards(goodMetrics)
      const doesntMeetStandards = ResponseQualityAnalyzer.meetsQualityStandards(badMetrics)

      this.assert(
        meetsStandards && !doesntMeetStandards,
        'Quality standards check should work correctly',
        `Good meets: ${meetsStandards}, Bad meets: ${doesntMeetStandards}`
      )

      console.log('‚úÖ Response quality tests passed\n')
    } catch (error) {
      this.assert(false, 'Response quality testing failed', error.message)
    }
  }

  /**
   * –¢–µ—Å—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  async testLanguageConsistency() {
    console.log('üîÑ Testing language consistency...')

    try {
      // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const russianResponse = '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.'
      const englishResponse = 'Analysis shows good user experience results.'
      const mixedResponse = 'Analysis –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç good —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.'

      const russianValidation = LanguageManager.validateLanguageConsistency(
        '', russianResponse, 'ru'
      )

      const englishValidation = LanguageManager.validateLanguageConsistency(
        '', englishResponse, 'en'
      )

      const mixedValidation = LanguageManager.validateLanguageConsistency(
        '', mixedResponse, 'ru'
      )

      this.assert(
        russianValidation.isConsistent,
        'Russian response should be consistent',
        `Issues: ${russianValidation.issues.length}`
      )

      this.assert(
        englishValidation.isConsistent,
        'English response should be consistent',
        `Issues: ${englishValidation.issues.length}`
      )

      this.assert(
        !mixedValidation.isConsistent,
        'Mixed language response should be inconsistent',
        `Issues: ${mixedValidation.issues.length}`
      )

      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
      const languageContext = {
        requestLanguage: 'ru',
        detectedLanguage: 'ru',
        promptLanguage: 'ru',
        responseLanguage: 'ru',
        isConsistent: true,
        source: 'user-preference'
      }

      const report = LanguageManager.generateLanguageReport(languageContext, russianResponse)
      
      this.assert(
        report.includes('Language Analysis Report'),
        'Should generate language report',
        'Report generated successfully'
      )

      console.log('‚úÖ Language consistency tests passed\n')
    } catch (error) {
      this.assert(false, 'Language consistency testing failed', error.message)
    }
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
   */
  assert(condition, testName, details = '') {
    const result = {
      name: testName,
      passed: condition,
      details: details,
      timestamp: new Date().toISOString()
    }

    this.testResults.tests.push(result)

    if (condition) {
      this.testResults.passed++
      console.log(`  ‚úÖ ${testName} ${details ? `(${details})` : ''}`)
    } else {
      this.testResults.failed++
      console.log(`  ‚ùå ${testName} ${details ? `(${details})` : ''}`)
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  printResults() {
    console.log('\n' + '='.repeat(50))
    console.log('üß™ PROMPT QUALITY FIX TEST RESULTS')
    console.log('='.repeat(50))
    console.log(`Total Tests: ${this.testResults.tests.length}`)
    console.log(`Passed: ${this.testResults.passed} ‚úÖ`)
    console.log(`Failed: ${this.testResults.failed} ‚ùå`)
    console.log(`Success Rate: ${Math.round((this.testResults.passed / this.testResults.tests.length) * 100)}%`)

    if (this.testResults.failed > 0) {
      console.log('\n‚ùå Failed Tests:')
      this.testResults.tests
        .filter(test => !test.passed)
        .forEach(test => {
          console.log(`  - ${test.name}: ${test.details}`)
        })
    }

    console.log('\n' + '='.repeat(50))
    
    if (this.testResults.failed === 0) {
      console.log('üéâ All tests passed! Prompt quality fixes are working correctly.')
    } else {
      console.log('‚ö†Ô∏è Some tests failed. Please review the issues above.')
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const tester = new PromptQualityTester()
  tester.runAllTests().catch(console.error)
}

module.exports = PromptQualityTester