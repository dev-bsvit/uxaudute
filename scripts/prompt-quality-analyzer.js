#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
 * –º–µ–∂–¥—É stable –∏ main –≤–µ—Ç–∫–∞–º–∏
 */

const fs = require('fs');
const path = require('path');

class PromptQualityAnalyzer {
  constructor() {
    this.results = {
      stable: {},
      main: {},
      comparison: {}
    };
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
   */
  measureResponseQuality(response, language = 'ru') {
    const metrics = {
      completeness: this.checkCompleteness(response),
      languageAccuracy: this.checkLanguageAccuracy(response, language),
      tokenCount: this.countTokens(response),
      hasStructure: this.checkStructure(response),
      isTruncated: this.checkTruncation(response)
    };

    // –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ (0-100)
    metrics.qualityScore = this.calculateQualityScore(metrics);
    
    return metrics;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞
   */
  checkCompleteness(response) {
    if (!response || typeof response !== 'string') return 0;
    
    const minLength = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const hasConclusion = response.includes('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ') || response.includes('Conclusion');
    const hasRecommendations = response.includes('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') || response.includes('Recommendations');
    
    let score = 0;
    if (response.length >= minLength) score += 40;
    if (hasConclusion) score += 30;
    if (hasRecommendations) score += 30;
    
    return Math.min(score, 100);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–∞
   */
  checkLanguageAccuracy(response, expectedLanguage) {
    if (!response) return 0;
    
    const russianChars = (response.match(/[–∞-—è—ë]/gi) || []).length;
    const englishChars = (response.match(/[a-z]/gi) || []).length;
    const totalChars = russianChars + englishChars;
    
    if (totalChars === 0) return 0;
    
    const russianRatio = russianChars / totalChars;
    
    if (expectedLanguage === 'ru') {
      return russianRatio > 0.7 ? 100 : russianRatio * 100;
    } else if (expectedLanguage === 'en') {
      return russianRatio < 0.3 ? 100 : (1 - russianRatio) * 100;
    }
    
    return 0;
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
   */
  countTokens(text) {
    if (!text) return 0;
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    return Math.ceil(text.length / 4);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  checkStructure(response) {
    if (!response) return 0;
    
    const hasHeaders = /#{1,6}\s/.test(response) || /\*\*.*\*\*/.test(response);
    const hasLists = /^\s*[-*+]\s/m.test(response) || /^\s*\d+\.\s/m.test(response);
    const hasSections = response.split('\n\n').length > 3;
    
    let score = 0;
    if (hasHeaders) score += 40;
    if (hasLists) score += 30;
    if (hasSections) score += 30;
    
    return Math.min(score, 100);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–µ–∑–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
   */
  checkTruncation(response) {
    if (!response) return true;
    
    const endsAbruptly = !response.match(/[.!?]\s*$/);
    const tooShort = response.length < 500;
    const hasIncompleteSection = response.includes('...');
    
    return endsAbruptly || tooShort || hasIncompleteSection;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
   */
  calculateQualityScore(metrics) {
    const weights = {
      completeness: 0.3,
      languageAccuracy: 0.25,
      hasStructure: 0.2,
      isTruncated: 0.25
    };

    let score = 0;
    score += metrics.completeness * weights.completeness;
    score += metrics.languageAccuracy * weights.languageAccuracy;
    score += metrics.hasStructure * weights.hasStructure;
    score += (metrics.isTruncated ? 0 : 100) * weights.isTruncated;

    return Math.round(score);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
   */
  loadPrompt(language, type = 'main-prompt') {
    const promptPath = path.join(process.cwd(), 'public', 'prompts', language, `${type}.md`);
    
    try {
      return fs.readFileSync(promptPath, 'utf8');
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: ${promptPath}`, error.message);
      return null;
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏
   */
  comparePrompts() {
    const types = ['main-prompt', 'json-structured-prompt', 'business-analytics-prompt', 'hypotheses-prompt'];
    const comparison = {};

    for (const type of types) {
      const ruPrompt = this.loadPrompt('ru', type);
      const enPrompt = this.loadPrompt('en', type);

      comparison[type] = {
        ru: {
          exists: !!ruPrompt,
          length: ruPrompt ? ruPrompt.length : 0,
          tokenCount: ruPrompt ? this.countTokens(ruPrompt) : 0
        },
        en: {
          exists: !!enPrompt,
          length: enPrompt ? enPrompt.length : 0,
          tokenCount: enPrompt ? this.countTokens(enPrompt) : 0
        }
      };

      if (ruPrompt && enPrompt) {
        comparison[type].lengthDifference = Math.abs(ruPrompt.length - enPrompt.length);
        comparison[type].tokenDifference = Math.abs(
          comparison[type].ru.tokenCount - comparison[type].en.tokenCount
        );
      }
    }

    return comparison;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  generateTestData() {
    return {
      website: 'https://example.com',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ UX',
      targetAudience: '–ú–æ–ª–æ–¥—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 18-35 –ª–µ—Ç',
      goals: ['–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é', '–£–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç']
    };
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
   */
  simulateAnalysis(language, testData) {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const responses = {
      ru: {
        good: `# –ê–Ω–∞–ª–∏–∑ UX —Å–∞–π—Ç–∞ ${testData.website}

## –í–≤–µ–¥–µ–Ω–∏–µ
–ü—Ä–æ–≤–µ–¥–µ–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ —Å–∞–π—Ç–∞...

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
1. –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
2. –ù–µ–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
3. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –£–ø—Ä–æ—Å—Ç–∏—Ç—å –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –í–Ω–µ–¥—Ä–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–∑–≤–æ–ª–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.`,
        
        bad: `–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –ø–æ–∫–∞–∑–∞–ª –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏...` // –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      },
      en: {
        good: `# UX Analysis for ${testData.website}

## Introduction
A comprehensive user experience analysis has been conducted...

## Main Issues
1. Slow page loading
2. Unintuitive navigation
3. Lack of mobile adaptation

## Recommendations
- Optimize images
- Simplify navigation menu
- Implement responsive design

## Conclusion
Implementation of the proposed recommendations will significantly improve user experience.`,
        
        bad: `Site analysis showed navigation problems and...` // Truncated response
      }
    };

    return responses[language];
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   */
  async runAnalysis() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...\n');

    // 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    console.log('üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏:');
    const promptComparison = this.comparePrompts();
    console.table(promptComparison);

    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤:');
    const testData = this.generateTestData();

    for (const language of ['ru', 'en']) {
      console.log(`\n--- –Ø–∑—ã–∫: ${language.toUpperCase()} ---`);
      
      const responses = this.simulateAnalysis(language, testData);
      
      console.log('‚úÖ –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç:');
      const goodMetrics = this.measureResponseQuality(responses.good, language);
      console.log(`  –ö–∞—á–µ—Å—Ç–≤–æ: ${goodMetrics.qualityScore}/100`);
      console.log(`  –ü–æ–ª–Ω–æ—Ç–∞: ${goodMetrics.completeness}/100`);
      console.log(`  –Ø–∑—ã–∫: ${goodMetrics.languageAccuracy}/100`);
      console.log(`  –¢–æ–∫–µ–Ω—ã: ${goodMetrics.tokenCount}`);
      
      console.log('\n‚ùå –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç:');
      const badMetrics = this.measureResponseQuality(responses.bad, language);
      console.log(`  –ö–∞—á–µ—Å—Ç–≤–æ: ${badMetrics.qualityScore}/100`);
      console.log(`  –ü–æ–ª–Ω–æ—Ç–∞: ${badMetrics.completeness}/100`);
      console.log(`  –Ø–∑—ã–∫: ${badMetrics.languageAccuracy}/100`);
      console.log(`  –¢–æ–∫–µ–Ω—ã: ${badMetrics.tokenCount}`);
      console.log(`  –û–±—Ä–µ–∑–∞–Ω: ${badMetrics.isTruncated ? '–î–∞' : '–ù–µ—Ç'}`);
    }

    // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = {
      timestamp: new Date().toISOString(),
      promptComparison,
      testResults: {
        ru: {
          good: this.measureResponseQuality(this.simulateAnalysis('ru', testData).good, 'ru'),
          bad: this.measureResponseQuality(this.simulateAnalysis('ru', testData).bad, 'ru')
        },
        en: {
          good: this.measureResponseQuality(this.simulateAnalysis('en', testData).good, 'en'),
          bad: this.measureResponseQuality(this.simulateAnalysis('en', testData).bad, 'en')
        }
      }
    };

    const resultsPath = path.join(process.cwd(), 'scripts', 'quality-analysis-results.json');
    fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));
    
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
    
    return results;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const analyzer = new PromptQualityAnalyzer();
  analyzer.runAnalysis().catch(console.error);
}

module.exports = PromptQualityAnalyzer;