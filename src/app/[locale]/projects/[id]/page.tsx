'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { useTranslations } from 'next-intl'
import { SidebarDemo } from '@/components/sidebar-demo'
import { UploadForm } from '@/components/upload-form'
import { AnalysisResult } from '@/components/analysis-result'
import { ActionPanel } from '@/components/action-panel'
import { AnalysisModal } from '@/components/analysis-modal'
import { ContextForm } from '@/components/context-form'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { User } from '@supabase/supabase-js'
import { supabase } from '@/lib/supabase'
import { StructuredAnalysisResponse } from '@/lib/analysis-types'
import { 
  getProject, 
  getProjectAudits, 
  createAudit, 
  updateAuditResult, 
  addAuditHistory,
  uploadScreenshotFromBase64,
  updateProjectContext,
  updateProjectTargetAudience
} from '@/lib/database'
import { 
  Plus, 
  Trash2,
  ExternalLink,
  BarChart3,
  Eye
} from 'lucide-react'
import { BackArrow } from '@/components/icons/back-arrow'
import { type ActionType } from '@/lib/utils'

interface Project {
  id: string
  name: string
  description: string | null
  context: string | null
  target_audience: string | null
  created_at: string
}

interface Audit {
  id: string
  name: string
  type: string
  status: string
  input_data: any
  result_data: any
  confidence: number | null
  created_at: string
}

export default function ProjectDetailPage() {
  const params = useParams()
  const router = useRouter()
  const projectId = params.id as string
  const t = useTranslations()

  const [user, setUser] = useState<User | null>(null)
  const [project, setProject] = useState<Project | null>(null)
  const [audits, setAudits] = useState<Audit[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [currentAudit, setCurrentAudit] = useState<Audit | null>(null)
  const [result, setResult] = useState<string | StructuredAnalysisResponse | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [uploadedScreenshot, setUploadedScreenshot] = useState<string | null>(null)
  const [analysisUrl, setAnalysisUrl] = useState<string | null>(null)
  const [showContextForm, setShowContextForm] = useState(false)
  const [pendingUploadData, setPendingUploadData] = useState<{ url?: string; screenshot?: string; provider?: string; openrouterModel?: string } | null>(null)
  const [editContext, setEditContext] = useState('')
  const [editTargetAudience, setEditTargetAudience] = useState('')
  const [isUpdating, setIsUpdating] = useState(false)
  const [hasAnyChanges, setHasAnyChanges] = useState(false)

  useEffect(() => {
    checkAuthAndLoadProject()
  }, [projectId])

  const checkAuthAndLoadProject = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) {
        router.push('/dashboard')
        return
      }

      setUser(user)
      await loadProjectData()
    } catch (error) {
      console.error('Error loading project:', error)
      router.push('/projects')
    } finally {
      setLoading(false)
    }
  }

  const loadProjectData = async () => {
    try {
      const [projectData, auditsData] = await Promise.all([
        getProject(projectId),
        getProjectAudits(projectId)
      ])

      if (!projectData) {
        throw new Error('Project not found')
      }

      setProject(projectData)
      setEditContext(projectData.context || '')
      setEditTargetAudience(projectData.target_audience || '')
      setHasAnyChanges(false)
      setAudits(auditsData)
    } catch (error) {
      console.error('Error loading project data:', error)
      throw error
    }
  }

  const handleCreateAudit = async (data: { url?: string; screenshot?: string; context?: string }) => {
    if (!user || !project) return

    setUploadedScreenshot(data.screenshot || null)
    setAnalysisUrl(data.url || null)

    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    await handleContextSubmit(data.context || '', data)
  }

  const handleContextSubmit = async (context: string, uploadData?: { url?: string; screenshot?: string; provider?: string; openrouterModel?: string }) => {
    if (!user || !project) return

    const data = uploadData || pendingUploadData
    if (!data) return

    setIsAnalyzing(true)
    setShowContextForm(false)

    try {
      let screenshotUrl: string | null = null
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ Supabase Storage –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (data.screenshot) {
        console.log('Uploading screenshot to Supabase Storage...')
        screenshotUrl = await uploadScreenshotFromBase64(data.screenshot, user.id)
        console.log('Screenshot uploaded:', screenshotUrl)
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É–¥–∏—Ç–∞
      const projectContext = project?.context || ''
      const projectTargetAudience = project?.target_audience || ''
      const auditContext = context || ''
      const combinedContext = [projectContext, projectTargetAudience, auditContext]
        .filter(Boolean)
        .join('\n\n---\n\n')

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏—Ç —Å URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      const audit = await createAudit(
        projectId,
        `–ê–Ω–∞–ª–∏–∑ ${new Date().toLocaleDateString('ru-RU')}`,
        'research',
        {
          url: data.url,
          hasScreenshot: !!data.screenshot,
          screenshotUrl: screenshotUrl,
          timestamp: new Date().toISOString()
        },
        combinedContext
      )

      setCurrentAudit(audit)
      setShowCreateForm(false)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—Ä–µ–¥–∏—Ç–æ–≤
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ /api/research-with-credits')
      console.log('üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
        url: data.url,
        hasScreenshot: !!data.screenshot,
        auditId: audit.id,
        context: combinedContext?.substring(0, 100) + '...'
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
      const response = await fetch('/api/research-with-credits', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`
        },
        body: JSON.stringify({
          ...data,
          auditId: audit.id,
          context: combinedContext,
          locale: params.locale
        })
      })
      
      console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText)

      if (!response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (402)
        if (response.status === 402) {
          try {
            const errorData = await response.json()
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', errorData)
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞!\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${errorData.required_credits || 2} –∫—Ä–µ–¥–∏—Ç–æ–≤\n–î–æ—Å—Ç—É–ø–Ω–æ: ${errorData.current_balance || 0} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`)
            setIsAnalyzing(false)
            setLoading(false)
            return
          } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', parseError)
          }
        }
        
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù: Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –µ—Å–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        // if (data.provider === 'openrouter') {
        //   console.log('OpenRouter API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI...')
        //   const fallbackResponse = await fetch('/api/research-json', {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({
        //       url: data.url,
        //       screenshot: data.screenshot,
        //       auditId: audit.id,
        //       context: combinedContext
        //     })
        //   })
        //   
        //   if (!fallbackResponse.ok) {
        //     throw new Error(`–û—à–∏–±–∫–∞ ${fallbackResponse.status}: ${fallbackResponse.statusText}`)
        //   }
        //   
        //   const fallbackData = await fallbackResponse.json()
        //   if (fallbackData.success) {
        //     // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–¥–∏—Ç–∞
        //     router.push(`/audit/${audit.id}`)
        //     return
        //   }
        // }
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`)
      }

      const responseData = await response.json()
      
      if (responseData.success) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É–¥–∏—Ç–∞
        window.location.href = `/audit/${audit.id}`
        return
      } else {
        // Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        const analysisResult = responseData.data || responseData.rawResponse
        setResult(analysisResult)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('Updating audit result with screenshot URL:', screenshotUrl)
        await updateAuditResult(audit.id, { 
          analysis_result: typeof analysisResult === 'object' ? JSON.stringify(analysisResult) : analysisResult,
          screenshot_url: screenshotUrl 
        })
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await addAuditHistory(audit.id, 'research', { 
          ...data, 
          screenshotUrl 
        }, { result: typeof analysisResult === 'object' ? JSON.stringify(analysisResult) : analysisResult })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ–≤
      await loadProjectData()

    } catch (error) {
      console.error('Error creating audit:', error)
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    } finally {
      setIsAnalyzing(false)
      setPendingUploadData(null)
    }
  }

  const handleContextSkip = () => {
    if (pendingUploadData) {
      handleContextSubmit('')
    }
  }


  const handleContextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value
    setEditContext(newValue)
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const targetAudienceChanged = editTargetAudience !== (project?.target_audience || '')
    setHasAnyChanges(newValue !== (project?.context || '') || targetAudienceChanged)
  }

  const handleTargetAudienceChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value
    setEditTargetAudience(newValue)
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const contextChanged = editContext !== (project?.context || '')
    setHasAnyChanges(contextChanged || newValue !== (project?.target_audience || ''))
  }

  const handleSaveAll = async () => {
    if (!project || !hasAnyChanges) return

    setIsUpdating(true)
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (editContext !== (project.context || '')) {
        await updateProjectContext(project.id, editContext)
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      if (editTargetAudience !== (project.target_audience || '')) {
        await updateProjectTargetAudience(project.id, editTargetAudience)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
      setProject({ 
        ...project, 
        context: editContext,
        target_audience: editTargetAudience
      })
      setHasAnyChanges(false)
    } catch (error) {
      console.error('Error updating project data:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞')
    } finally {
      setIsUpdating(false)
    }
  }

  const handleCancelAll = () => {
    setEditContext(project?.context || '')
    setEditTargetAudience(project?.target_audience || '')
    setHasAnyChanges(false)
  }

  const handleAction = async (action: ActionType) => {
    if (!currentAudit || !result) return

    setIsAnalyzing(true)
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const data = {
        url: analysisUrl,
        screenshot: uploadedScreenshot,
        context: result
      }

      const response = await fetch(`/api/${action}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`)
      }

      const { result: actionResult } = await response.json()
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      const newResult = typeof result === 'string' 
        ? result + '\n\n---\n\n' + actionResult
        : JSON.stringify(result) + '\n\n---\n\n' + actionResult
      setResult(newResult)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await updateAuditResult(currentAudit.id, { 
        analysis_result: typeof newResult === 'object' ? JSON.stringify(newResult) : newResult,
        [`${action}_result`]: actionResult 
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await addAuditHistory(currentAudit.id, action, data, { result: actionResult })

    } catch (error) {
      console.error('Error performing action:', error)
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    } finally {
      setIsAnalyzing(false)
    }
  }


  const handleViewAudit = (audit: Audit) => {
    setCurrentAudit(audit)
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    let analysisResult = audit.result_data?.analysis_result || '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
    try {
      if (typeof analysisResult === 'string') {
        const parsed = JSON.parse(analysisResult)
        setResult(parsed)
      } else {
        setResult(analysisResult)
      }
    } catch {
      setResult(analysisResult)
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ Supabase Storage –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π base64
    const screenshotUrl = audit.input_data?.screenshotUrl || audit.result_data?.screenshot_url
    console.log('Viewing audit:', audit.id)
    console.log('Screenshot URL from input_data:', audit.input_data?.screenshotUrl)
    console.log('Screenshot URL from result_data:', audit.result_data?.screenshot_url)
    console.log('Final screenshot URL:', screenshotUrl)
    
    setUploadedScreenshot(screenshotUrl || null)
    setAnalysisUrl(audit.input_data?.url || null)
  }



  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800'
      case 'in_progress': return 'bg-blue-100 text-blue-800'
      case 'failed': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-500 border-t-transparent"></div>
      </div>
    )
  }

  if (!project || !user) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center py-12 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <Link href="/projects">
            <BackArrow />
          </Link>
        </div>
      </div>
    )
  }

  return (
    <SidebarDemo user={user}>
      <div className="p-8 space-y-6">
        {/* –•–µ–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href="/projects">
              <BackArrow />
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-slate-900">{project.name}</h1>
              {project.description && (
                <p className="text-slate-600 mt-1">{project.description}</p>
              )}
              <p className="text-sm text-slate-500 mt-1">
                –°–æ–∑–¥–∞–Ω {formatDate(project.created_at)}
              </p>
            </div>
          </div>
          
          <Button
            onClick={() => setShowCreateForm(true)}
            className="flex items-center gap-2"
          >
            <Plus className="w-4 h-4" />
            {t('projectDetail.newAudit')}
          </Button>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–±—Ä–∞–Ω–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã" */}

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {!currentAudit ? (
          <>
            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–∞ */}
            {showCreateForm && (
              <Card>
                <CardHeader>
                  <CardTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–¥–∏—Ç</CardTitle>
                </CardHeader>
                <CardContent>
                  <UploadForm
                    onSubmit={handleCreateAudit}
                    isLoading={isAnalyzing}
                  />
                  <div className="mt-4 flex justify-end">
                    <Button
                      variant="outline"
                      onClick={() => setShowCreateForm(false)}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* –î–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –º–∞–∫–µ—Ç: –ò—Å—Ç–æ—Ä–∏—è –∞—É–¥–∏—Ç–æ–≤ (—Å–ª–µ–≤–∞) + –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (—Å–ø—Ä–∞–≤–∞) */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ–≤ */}
              <Card>
                <CardHeader>
                  <CardTitle>{t('projectDetail.auditHistory')}</CardTitle>
                </CardHeader>
                <CardContent>
                  {audits.length === 0 ? (
                    <div className="text-center py-8">
                      <BarChart3 className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                      <p className="text-slate-600 mb-4">
                        –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞—É–¥–∏—Ç–æ–≤
                      </p>
                      <Button onClick={() => setShowCreateForm(true)}>
                        <Plus className="w-4 h-4 mr-2" />
                        –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞—É–¥–∏—Ç
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {audits.map((audit) => (
                        <div
                          key={audit.id}
                          className="flex items-center justify-between p-4 border rounded-lg hover:bg-slate-50 transition-colors"
                        >
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <h3 className="font-medium text-slate-900">{audit.name}</h3>
                              <Badge className={getStatusColor(audit.status)}>
                                {audit.status === 'completed' ? t('projectDetail.completed') : 
                                 audit.status === 'in_progress' ? t('projectDetail.inProgress') : 
                                 audit.status === 'failed' ? t('projectDetail.failed') : t('projectDetail.draft')}
                              </Badge>
                            </div>
                            <p className="text-sm text-slate-600">
                              {formatDate(audit.created_at)}
                              {audit.input_data?.url && (
                                <span className="ml-4 inline-flex items-center gap-1">
                                  <ExternalLink className="w-3 h-3" />
                                  {t('projectDetail.urlAnalysis')}
                                </span>
                              )}
                              {audit.input_data?.hasScreenshot && (
                                <span className="ml-4">üì∏ {t('projectDetail.screenshot')}</span>
                              )}
                            </p>
                          </div>
                          <div className="flex items-center gap-2">
                            <Link href={`/audit/${audit.id}`}>
                              <Button
                                size="sm"
                                variant="outline"
                              >
                                <Eye className="w-4 h-4 mr-2" />
                                {t('projectDetail.view')}
                              </Button>
                            </Link>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è */}
              <Card>
                <CardHeader>
                  <CardTitle>{t('projectDetail.contextAndAudience')}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ */}
                    <div className="space-y-3">
                      <h4 className="text-sm font-medium text-gray-700">{t('projectDetail.projectContext')}</h4>
                      <textarea
                        value={editContext}
                        onChange={handleContextChange}
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                        rows={4}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç–∞, –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤..."
                      />
                    </div>

                    {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                    <div className="border-t border-gray-200"></div>

                    {/* –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è */}
                    <div className="space-y-3">
                      <h4 className="text-sm font-medium text-gray-700">{t('projectDetail.targetAudience')}</h4>
                      <textarea
                        value={editTargetAudience}
                        onChange={handleTargetAudienceChange}
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                        rows={4}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ–¥—ã–µ –ª—é–¥–∏ 18-35 –ª–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤, —Ü–µ–Ω—è—Ç —É–¥–æ–±—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å, –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å..."
                      />
                    </div>

                    {/* –û–±—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ */}
                    <p className="text-sm text-slate-500">
                      {t('projectDetail.aiHelpText')}
                    </p>

                    {/* –ï–¥–∏–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                    <div className="flex gap-2 pt-4">
                      <Button
                        onClick={handleSaveAll}
                        disabled={!hasAnyChanges || isUpdating}
                        size="sm"
                        className="flex items-center gap-2"
                      >
                        {isUpdating ? (
                          <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                        ) : null}
                        {t('common.save')}
                      </Button>
                      {hasAnyChanges && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={handleCancelAll}
                          disabled={isUpdating}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </>
        ) : (
          <>
            {/* –ü—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞ */}
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-slate-900">
                {currentAudit.name}
              </h2>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
            {result && (
              <AnalysisResult 
                result={result}
                screenshot={uploadedScreenshot}
                url={analysisUrl}
                auditId={currentAudit?.id}
              />
            )}

            {/* –ü–∞–Ω–µ–ª—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
            <ActionPanel
              onAction={handleAction}
            />
          </>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
        <AnalysisModal
          isOpen={isAnalyzing}
          onClose={() => setIsAnalyzing(false)}
          screenshot={uploadedScreenshot}
          url={analysisUrl}
          canClose={false}
        />

      </div>
    </SidebarDemo>
  )
}