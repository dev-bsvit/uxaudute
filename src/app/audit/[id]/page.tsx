'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import { AnalysisResult } from '@/components/analysis-result'
import { SidebarDemo } from '@/components/sidebar-demo'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { CanvasAnnotations } from '@/components/ui/canvas-annotations'
import { ArrowLeft, Download, Share2, RefreshCw, Monitor, Link2 } from 'lucide-react'
import { supabase } from '@/lib/supabase'
import { User } from '@supabase/supabase-js'
import Link from 'next/link'

interface Audit {
  id: string
  name: string
  type: string
  status: string
  input_data: any
  result_data: any
  created_at: string
  updated_at: string
  project_id: string
  projects?: {
    id: string
    name: string
  }
}

export default function AuditPage() {
  const params = useParams()
  const auditId = params.id as string
  
  const [user, setUser] = useState<User | null>(null)
  const [audit, setAudit] = useState<Audit | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [annotationData, setAnnotationData] = useState<string>('')

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    supabase.auth.getUser().then(({ data: { user } }) => {
      setUser(user)
    })

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user ?? null)
    })

    return () => subscription.unsubscribe()
  }, [])

  useEffect(() => {
    if (auditId && user) {
      loadAudit()
    }
  }, [auditId, user])

  const loadAudit = async () => {
    try {
      setLoading(true)
      setError(null)

      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏—Ç —Å ID:', auditId)
      
      const { data: auditData, error: auditError } = await supabase
        .from('audits')
        .select(`
          *,
          projects!inner(id, name)
        `)
        .eq('id', auditId)
        .single()

      if (auditError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–∞:', auditError)
        setError('–ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      console.log('–ê—É–¥–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', auditData)
      setAudit(auditData)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞
      if (auditData.result_data?.annotations) {
        setAnnotationData(auditData.result_data.annotations)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (auditData.result_data && Object.keys(auditData.result_data).length > 0) {
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ audits:', auditData.result_data)
      } else {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ audits, –∞—É–¥–∏—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–∞:', err)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  const handleRefresh = () => {
    loadAudit()
  }

  const handleAnnotationSave = (data: string) => {
    setAnnotationData(data)
    console.log('Annotation data saved:', data)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-500 border-t-transparent"></div>
      </div>
    )
  }

  if (error || !audit) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="max-w-md mx-auto bg-white rounded-2xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">
            –ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
          </h2>
          <p className="text-slate-600 mb-6">
            {error || '–ê—É–¥–∏—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}
          </p>
          <Link href="/dashboard">
            <Button className="flex items-center gap-2">
              <ArrowLeft className="w-4 h-4" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ Dashboard
            </Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <SidebarDemo user={user}>
      <div className="space-y-8">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href={audit?.project_id ? `/projects/${audit.project_id}` : '/dashboard'}>
              <Button variant="outline" className="flex items-center gap-2">
                <ArrowLeft className="w-4 h-4" />
                –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-slate-900">{audit.name}</h1>
              <p className="text-sm text-slate-600">
                –°–æ–∑–¥–∞–Ω: {new Date(audit.created_at).toLocaleDateString('ru-RU')}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <Button 
              variant="outline" 
              onClick={handleRefresh}
              className="flex items-center gap-2"
            >
              <RefreshCw className="w-4 h-4" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
            <Button variant="outline" className="flex items-center gap-2">
              <Download className="w-4 h-4" />
              –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
            </Button>
            <Button variant="outline" className="flex items-center gap-2">
              <Share2 className="w-4 h-4" />
              –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
            </Button>
          </div>
        </div>


        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
        {audit.result_data ? (
          <div className="w-full max-w-none grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-screen">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¢–∞–±—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
            <div className="space-y-8">
              <Tabs defaultValue="ux-analysis" className="w-full">
                <TabsList className="grid w-full grid-cols-4 mb-6">
                  <TabsTrigger value="ux-analysis">UX –ê–Ω–∞–ª–∏–∑</TabsTrigger>
                  <TabsTrigger value="ab-test">AB —Ç–µ—Å—Ç</TabsTrigger>
                  <TabsTrigger value="hypotheses">–ì–∏–ø–æ—Ç–µ–∑—ã</TabsTrigger>
                  <TabsTrigger value="analytics">–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</TabsTrigger>
                </TabsList>
                
                <TabsContent value="ux-analysis">
                  {(() => {
                    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞:', audit.result_data)
                    console.log('–ö–ª—é—á–∏ result_data:', Object.keys(audit.result_data))
                    console.log('analysis_result:', audit.result_data.analysis_result)
                    console.log('–í–µ—Å—å result_data:', JSON.stringify(audit.result_data, null, 2))
                    
                    // result_data —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                    const result = audit.result_data
                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è AnalysisResult:', result)
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–æ–π (–±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                    return (
                      <div className="space-y-8">
                        {/* –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ */}
                        <Card>
                          <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                              üì± –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <div>
                                <h4 className="font-medium text-gray-900 mb-2">–¢–∏–ø —ç–∫—Ä–∞–Ω–∞</h4>
                                <p className="text-gray-600">{result.screenDescription?.screenType || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                              </div>
                              <div>
                                <h4 className="font-medium text-gray-900 mb-2">–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
                                <p className="text-gray-600">{result.screenDescription?.userGoal || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                              </div>
                            </div>
                            
                            <div>
                              <h4 className="font-medium text-gray-900 mb-2">–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</h4>
                              <div className="flex flex-wrap gap-2">
                                {result.screenDescription?.keyElements?.map((element: string, index: number) => (
                                  <Badge key={index} variant="secondary">{element}</Badge>
                                )) || <span className="text-gray-500">–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>}
                              </div>
                            </div>
                          </CardContent>
                        </Card>

                        {/* UX –û–ø—Ä–æ—Å */}
                        {result.uxSurvey && (
                          <Card>
                            <CardHeader>
                              <CardTitle className="flex items-center gap-2">
                                üìä UX –û–ø—Ä–æ—Å
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-4">
                                {result.uxSurvey.questions?.map((question: any, index: number) => (
                                  <div key={index} className="border rounded-lg p-4">
                                    <h4 className="font-medium text-gray-900 mb-2">{question.question}</h4>
                                    <p className="text-gray-600">{question.answer}</p>
                                  </div>
                                )) || <span className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞</span>}
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        {/* –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è */}
                        {result.problems && result.problems.length > 0 && (
                          <Card>
                            <CardHeader>
                              <CardTitle className="flex items-center gap-2">
                                ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-6">
                                {result.problems.map((problem: any, index: number) => (
                                  <div key={index} className="border rounded-lg p-4">
                                    <div className="flex items-start justify-between mb-3">
                                      <h4 className="font-medium text-gray-900">{problem.title}</h4>
                                      <Badge className={problem.priority === 'high' ? 'bg-red-100 text-red-800' : 
                                                      problem.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' : 
                                                      'bg-green-100 text-green-800'}>
                                        {problem.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : 
                                         problem.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
                                      </Badge>
                                    </div>
                                    <p className="text-gray-600 mb-3">{problem.description}</p>
                                    <div className="space-y-2">
                                      <div>
                                        <span className="font-medium text-purple-600">–†–µ—à–µ–Ω–∏–µ:</span>{' '}
                                        <span className="text-gray-700">{problem.solution}</span>
                                      </div>
                                      <div>
                                        <span className="font-medium text-purple-600">–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</span>{' '}
                                        <span className="text-gray-700">{problem.expectedEffect}</span>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </CardContent>
                          </Card>
                        )}
                      </div>
                    )
                  })()}
                </TabsContent>
                
                <TabsContent value="ab-test">
                  <Card>
                    <CardContent className="text-center py-12">
                      <h3 className="text-lg font-semibold text-slate-900 mb-2">
                        AB —Ç–µ—Å—Ç
                      </h3>
                      <p className="text-slate-600">
                        –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                      </p>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="hypotheses">
                  <Card>
                    <CardContent className="text-center py-12">
                      <h3 className="text-lg font-semibold text-slate-900 mb-2">
                        –ì–∏–ø–æ—Ç–µ–∑—ã
                      </h3>
                      <p className="text-slate-600">
                        –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                      </p>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="analytics">
                  <Card>
                    <CardContent className="text-center py-12">
                      <h3 className="text-lg font-semibold text-slate-900 mb-2">
                        –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                      </h3>
                      <p className="text-slate-600">
                        –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                      </p>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π) */}
            <div className="sticky top-4 h-fit">
              {(audit.input_data?.screenshotUrl || audit.input_data?.url) && (
                <Card className="h-full">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      {audit.input_data?.screenshotUrl ? <Monitor className="w-5 h-5" /> : <Link2 className="w-5 h-5" />}
                      {audit.input_data?.screenshotUrl ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' : '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π URL'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {audit.input_data?.screenshotUrl ? (
                      <div className="space-y-4">
                        <CanvasAnnotations
                          src={audit.input_data.screenshotUrl}
                          alt="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                          className="w-full h-auto max-h-[70vh] object-contain"
                          onAnnotationSave={handleAnnotationSave}
                          initialAnnotationData={annotationData}
                          auditId={audit.id}
                        />
                        <div className="text-sm text-gray-500 text-center">
                          üí° –†–µ–¥–∞–∫—Ç–æ—Ä –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
                        </div>
                        <div className="text-xs text-gray-400 text-center mt-2">
                          –ê–Ω–∞–ª–∏–∑ {new Date(audit.created_at).toLocaleDateString('ru-RU')}
                        </div>
                      </div>
                    ) : audit.input_data?.url ? (
                      <div className="p-4 bg-slate-50 rounded-xl border-2 border-dashed border-slate-200">
                        <a 
                          href={audit.input_data.url} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-800 font-medium break-all flex items-center gap-2"
                        >
                          <Link2 className="w-4 h-4" />
                          {audit.input_data.url}
                        </a>
                      </div>
                    ) : null}
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        ) : (
          <Card>
            <CardContent className="text-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-500 border-t-transparent mx-auto mb-4"></div>
              <h3 className="text-lg font-semibold text-slate-900 mb-2">
                –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
              </h3>
              <p className="text-slate-600 mb-4">
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
              </p>
              <Button onClick={handleRefresh} variant="outline">
                <RefreshCw className="w-4 h-4 mr-2" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </CardContent>
          </Card>
        )}
      </div>
    </SidebarDemo>
  )
}
