import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'
import { LanguageManager } from '@/lib/language-manager'
import { PromptType } from '@/lib/i18n/types'
import { ResponseQualityAnalyzer } from '@/lib/quality-metrics'
import { LanguageAutoCorrector } from '@/lib/language-auto-corrector'

export async function POST(request: NextRequest) {
  try {
    console.log('=== RESEARCH API called ===')
    const { url, screenshot, context, language } = await request.json()

    if (!url && !screenshot) {
      return NextResponse.json(
        { error: 'URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('üåê Determining language context...')
    const languageContext = language 
      ? LanguageManager.createLanguageContextFromParams({ language })
      : await LanguageManager.determineAnalysisLanguage(request)
    
    LanguageManager.logLanguageContext(languageContext, 'Research API')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    console.log(`üîç Loading prompt for language: ${languageContext.promptLanguage}`)
    let mainPrompt = await LanguageManager.loadPromptForLanguage(PromptType.MAIN, languageContext)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    mainPrompt = LanguageManager.enforceResponseLanguage(mainPrompt, languageContext.responseLanguage)
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    let finalPrompt = mainPrompt
    if (context) {
      const contextLabel = languageContext.promptLanguage === 'ru' 
        ? '\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n'
        : '\n\nAdditional context:\n'
      finalPrompt = `${mainPrompt}${contextLabel}${context}`
    }

    console.log('üîç Final prompt ready, length:', finalPrompt.length)

    let analysisResult: string | null = null

    if (url) {
      // –ê–Ω–∞–ª–∏–∑ URL
      console.log('üîç Analyzing URL:', url)
      const urlInstruction = languageContext.promptLanguage === 'ru'
        ? `\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –ø–æ URL: ${url}\n\n–ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞.`
        : `\n\nAnalyze the website at URL: ${url}\n\nSince I cannot get a screenshot, conduct analysis based on general UX principles for this type of website.`
      
      const analysisPrompt = finalPrompt + urlInstruction
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: analysisPrompt }],
        temperature: 0.7,
        max_tokens: 3000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      })

      analysisResult = completion.choices[0]?.message?.content || null
    }

    if (screenshot) {
      // –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      console.log('üîç Analyzing screenshot')
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "user",
            content: [
              { type: "text", text: finalPrompt },
              {
                type: "image_url",
                image_url: {
                  url: screenshot,
                  detail: "high"
                }
              }
            ]
          }
        ],
        temperature: 0.7,
        max_tokens: 3000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      })

      analysisResult = completion.choices[0]?.message?.content || null
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!analysisResult) {
      console.error('‚ùå No analysis result received')
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 500 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    console.log('üìä Checking response quality...')
    const qualityMetrics = ResponseQualityAnalyzer.measureQuality(
      analysisResult,
      languageContext.responseLanguage as 'ru' | 'en'
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const languageValidation = LanguageManager.validateLanguageConsistency(
      finalPrompt,
      analysisResult,
      languageContext.responseLanguage
    )

    console.log('üìä Quality metrics:', qualityMetrics)
    console.log('üåê Language validation:', languageValidation)

    // –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    if (!ResponseQualityAnalyzer.meetsQualityStandards(qualityMetrics) && !languageValidation.isConsistent) {
      console.log('‚ö†Ô∏è Quality issues detected, attempting correction...')
      
      const correctionResult = await LanguageAutoCorrector.correctPrompt(
        finalPrompt,
        languageContext,
        [...languageValidation.issues, `Quality score: ${qualityMetrics.qualityScore}`]
      )

      if (correctionResult.success) {
        console.log('üîß Prompt corrected, retrying analysis...')
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º
        console.log('üîß Correction report:', LanguageAutoCorrector.generateCorrectionReport(correctionResult))
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    ResponseQualityAnalyzer.logQualityMetrics(qualityMetrics, 'Research API Response')
    LanguageManager.logLanguageContext(languageContext, 'Final Response')

    return NextResponse.json({ 
      result: analysisResult,
      quality: {
        score: qualityMetrics.qualityScore,
        completeness: qualityMetrics.completeness,
        language_accuracy: qualityMetrics.languageAccuracy,
        is_truncated: qualityMetrics.isTruncated,
        token_count: qualityMetrics.tokenCount,
        meets_standards: ResponseQualityAnalyzer.meetsQualityStandards(qualityMetrics)
      },
      language: {
        context: languageContext,
        validation: languageValidation
      }
    })

  } catch (error) {
    console.error('Research API error:', error)
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (error instanceof Error) {
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    
    return NextResponse.json(
      { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
      { status: 500 }
    )
  }
}


