import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'
import { supabase } from '@/lib/supabase'
import { BusinessAnalyticsResponse } from '@/lib/analysis-types'
import { LanguageManager } from '@/lib/language-manager'
import { PromptType } from '@/lib/i18n/types'
import { ResponseQualityAnalyzer } from '@/lib/quality-metrics'

export async function POST(request: NextRequest) {
  try {
    const { auditId } = await request.json()

    if (!auditId) {
      return NextResponse.json({ error: 'Audit ID is required' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞ –∏–∑ –±–∞–∑—ã
    const { data: audit, error: auditError } = await supabase
      .from('audits')
      .select(`
        *,
        projects (
          context,
          target_audience
        )
      `)
      .eq('id', auditId)
      .single()

    if (auditError || !audit) {
      return NextResponse.json({ error: 'Audit not found' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
    if (audit.status !== 'completed' || !audit.result_data) {
      return NextResponse.json({ 
        error: 'Main audit must be completed first' 
      }, { status: 400 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞
    const auditLanguage = audit.input_data?.language || 'ru'
    console.log('üåê Audit language from input_data:', auditLanguage)

    const languageContext = {
      requestLanguage: auditLanguage,
      detectedLanguage: auditLanguage,
      promptLanguage: auditLanguage,
      responseLanguage: auditLanguage,
      isConsistent: true,
      source: 'user-preference' as const
    }
    LanguageManager.logLanguageContext(languageContext, 'Business Analytics API')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    let businessAnalyticsPrompt = await LanguageManager.loadPromptForLanguage(
      PromptType.BUSINESS_ANALYTICS, 
      languageContext
    )
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    businessAnalyticsPrompt = LanguageManager.enforceResponseLanguage(
      businessAnalyticsPrompt, 
      languageContext.responseLanguage
    )

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º—Ç–∞
    const auditData = {
      imageUrl: audit.screenshot_url,
      context: audit.context || '',
      projectContext: audit.projects?.context || '',
      targetAudience: audit.projects?.target_audience || '',
      analysisResult: audit.result_data
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∞—É–¥–∏—Ç–∞
    const fullPrompt = `${businessAnalyticsPrompt}

**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${auditData.imageUrl}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞—É–¥–∏—Ç–∞: ${auditData.context}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${auditData.projectContext}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${auditData.targetAudience}
- –†–µ–∑—É–ª—å—Ç–∞—Ç UX –∞–Ω–∞–ª–∏–∑–∞: ${JSON.stringify(auditData.analysisResult, null, 2)}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`

    // –§–æ—Ä–º–∏—Ä—É–µ–º system message —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    const languageInstruction = languageContext.responseLanguage === 'en'
      ? 'CRITICAL: You MUST respond in ENGLISH ONLY. DO NOT use Russian, Ukrainian, or any other language. All industry analysis, KPIs, hypotheses, user stories, test plans, barriers, risks, opportunities, and next steps MUST be in English. Write "weeks" NOT "–Ω–µ–¥–µ–ª–∏", "days" NOT "–¥–Ω–µ–π", "First step" NOT "–ü–µ—Ä–≤—ã–π —à–∞–≥".'
      : '–ö–†–ò–¢–ò–ß–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏.'

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º JSON
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `You are a Senior Product Analyst and Growth expert. You MUST respond ONLY with valid JSON format. No markdown, no explanations, no additional text - ONLY JSON. ${languageInstruction}`
        },
        {
          role: "user",
          content: fullPrompt
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
      max_tokens: 4000
    })

    const responseText = completion.choices[0]?.message?.content
    if (!responseText) {
      throw new Error('No response from OpenAI')
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —á–∏—Å—Ç—ã–π JSON –±–ª–∞–≥–æ–¥–∞—Ä—è response_format)
    let businessAnalyticsData: BusinessAnalyticsResponse
    try {
      businessAnalyticsData = JSON.parse(responseText)

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!businessAnalyticsData.industry_analysis || !businessAnalyticsData.metadata) {
        throw new Error('Missing required fields in response')
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError)
      console.error('Response text:', responseText)
      return NextResponse.json({
        error: 'Failed to parse business analytics response',
        details: responseText
      }, { status: 500 })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–∞–∑—É
    const { error: updateError } = await supabase
      .from('audits')
      .update({
        result_data: {
          ...audit.result_data,
          business_analytics: businessAnalyticsData
        }
      })
      .eq('id', auditId)

    if (updateError) {
      console.error('Database update error:', updateError)
      return NextResponse.json({ 
        error: 'Failed to save business analytics' 
      }, { status: 500 })
    }

    return NextResponse.json({
      success: true,
      data: businessAnalyticsData
    })

  } catch (error) {
    console.error('Business analytics generation error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}



