import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'
import { supabase } from '@/lib/supabase'
import { checkCreditsForAudit, deductCreditsForAudit } from '@/lib/credits'

export async function POST(request: NextRequest) {
  try {
    console.log('=== BUSINESS WITH CREDITS API –≤—ã–∑–≤–∞–Ω ===')
    const { context, auditId } = await request.json()

    if (!context) {
      return NextResponse.json(
        { error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏–∑–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
    console.log('üîç –¢–∏–ø –∞—É–¥–∏—Ç–∞: business')
    
    const creditsCheck = await checkCreditsForAudit(user.id, 'business')
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', JSON.stringify(creditsCheck, null, 2))
    
    if (!creditsCheck.canProceed) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', creditsCheck)
      return NextResponse.json({
        error: 'Insufficient credits',
        message: creditsCheck.message,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance,
        is_test_account: creditsCheck.isTestAccount
      }, { status: 402 }) // 402 Payment Required
    }

    console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', creditsCheck)

    const prompt = `–¢—ã Senior –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ UX –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π UX –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.

–î–∞–Ω–Ω—ã–µ UX –∞–Ω–∞–ª–∏–∑–∞:
${context}

–°–æ–∑–¥–∞–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

## –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ UX –ø—Ä–æ–±–ª–µ–º

### –í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: –≤–ª–∏—è–Ω–∏–µ –Ω–∞ conversion rate
- Retention: –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- Revenue: –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–æ—Ö–æ–¥—ã
- CAC/LTV: –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏ –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å

### ROI –∞–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
- –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)
- –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç (%)
- –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
- Risk/Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ

### –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ RICE
–î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã:
- Reach (–æ—Ö–≤–∞—Ç): —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ
- Impact (–≤–ª–∏—è–Ω–∏–µ): –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
- Confidence (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å): –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —É—Å–ø–µ—Ö–µ
- Effort (—É—Å–∏–ª–∏—è): —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- RICE Score: –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —Ä–æ—Å—Ç–∞
- Quick wins (–±—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã)
- Strategic improvements (—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è)
- –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ç–∞–º, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
      max_tokens: 2000,
    })

    const result = completion.choices[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑'

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (auditId) {
      try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–∞–∑—É:', auditId)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞
        const { data: currentAudit, error: fetchError } = await supabase
          .from('audits')
          .select('result_data')
          .eq('id', auditId)
          .single()

        if (fetchError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞:', fetchError)
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º result_data —Å –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
          const { error: updateError } = await supabase
            .from('audits')
            .update({
              result_data: {
                ...currentAudit?.result_data,
                business_analytics: { result }
              }
            })
            .eq('id', auditId)

          if (updateError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', updateError)
          } else {
            console.log('‚úÖ –ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É')
          }
        }
      } catch (saveError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', saveError)
      }
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏–∑–∞
    if (auditId) {
      console.log('–°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏–∑:', auditId)
      const deductResult = await deductCreditsForAudit(
        user.id,
        'business',
        auditId,
        `Business analytics for audit: ${auditId}`
      )

      if (!deductResult.success) {
        console.error('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductResult)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
      } else {
        console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã:', deductResult)
      }
    }

    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç...')
    return NextResponse.json({ 
      result,
      credits_info: {
        deducted: auditId ? true : false,
        is_test_account: creditsCheck.isTestAccount,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ business-with-credits API:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
