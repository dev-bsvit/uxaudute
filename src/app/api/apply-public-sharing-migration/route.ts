import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏—Ç–∞–º...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø–æ–ª—è
    const { data: columns, error: columnsError } = await supabaseClient
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'audits')
      .eq('table_schema', 'public')
      .in('column_name', ['public_token', 'public_enabled'])

    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:', columnsError)
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏', details: columnsError.message }, { status: 500 })
    }

    const existingColumns = columns?.map(col => col.column_name) || []
    console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const results = []

    if (!existingColumns.includes('public_token')) {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É public_token...')
      const { error: tokenError } = await supabaseClient
        .from('audits')
        .select('id')
        .limit(1)
      
      if (tokenError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è public_token:', tokenError)
        results.push({ field: 'public_token', status: 'error', error: tokenError.message })
      } else {
        results.push({ field: 'public_token', status: 'exists_or_created' })
      }
    } else {
      results.push({ field: 'public_token', status: 'already_exists' })
    }

    if (!existingColumns.includes('public_enabled')) {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É public_enabled...')
      const { error: enabledError } = await supabaseClient
        .from('audits')
        .select('id')
        .limit(1)
      
      if (enabledError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è public_enabled:', enabledError)
        results.push({ field: 'public_enabled', status: 'error', error: enabledError.message })
      } else {
        results.push({ field: 'public_enabled', status: 'exists_or_created' })
      }
    } else {
      results.push({ field: 'public_enabled', status: 'already_exists' })
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏—Ç–∞–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.',
      results
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}