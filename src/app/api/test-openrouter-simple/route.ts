import { NextRequest, NextResponse } from 'next/server'

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OpenRouter –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
export async function POST(request: NextRequest) {
  try {
    const { model, message = 'Hello! Please respond.', screenshot } = await request.json()
    
    console.log('='.repeat(80))
    console.log(`üß™ –¢–ï–°–¢ OPENROUTER API - ${new Date().toISOString()}`)
    console.log(`üìù –ú–æ–¥–µ–ª—å: ${model}`)
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`)
    console.log(`üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç: ${screenshot ? '–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' : '–ù–ï–¢'}`)
    console.log('='.repeat(80))
    
    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY
    const OPENROUTER_BASE_URL = 'https://openrouter.ai/api/v1'
    
    console.log(`üîë API –∫–ª—é—á: ${OPENROUTER_API_KEY ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`)
    console.log(`üåê Base URL: ${OPENROUTER_BASE_URL}`)
    
    if (!OPENROUTER_API_KEY) {
      console.error('‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return NextResponse.json({ 
        success: false,
        error: 'OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
      }, { status: 500 })
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    const messages: any[] = []
    
    if (screenshot) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, —Å–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push({
        role: 'user',
        content: [
          {
            type: 'text',
            text: message
          },
          {
            type: 'image_url',
            image_url: {
              url: screenshot,
              detail: 'high'
            }
          }
        ]
      })
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push({
        role: 'user',
        content: message
      })
    }

    const requestBody = {
      model: model,
      messages: messages,
      max_tokens: 4000,
      temperature: 0.7
    }
    
    console.log('üì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°:')
    console.log(`üåê URL: ${OPENROUTER_BASE_URL}/chat/completions`)
    console.log(`üìã Headers:`, {
      'Authorization': `Bearer ${OPENROUTER_API_KEY.substring(0, 20)}...`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://uxaudute.vercel.app',
      'X-Title': 'UX Audit Platform Test'
    })
    console.log(`üì¶ Body:`, JSON.stringify(requestBody, null, 2))
    
    // –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenRouter
    const response = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://uxaudute.vercel.app', // Optional. Site URL for rankings on openrouter.ai
        'X-Title': 'UX Audit Platform Test' // Optional. Site title for rankings on openrouter.ai
      },
      body: JSON.stringify(requestBody)
    })

    console.log('üì° –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢:')
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`)
    console.log(`üìã Headers:`, Object.fromEntries(response.headers.entries()))
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå –û–®–ò–ë–ö–ê HTTP:')
      console.error(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`)
      console.error(`üìù –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${errorText}`)
      return NextResponse.json({ 
        success: false,
        error: `HTTP ${response.status}: ${errorText}`,
        status: response.status
      })
    }

    const data = await response.json()
    console.log('‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢:')
    console.log(JSON.stringify(data, null, 2))
    
    let responseText = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
    let finishReason = 'unknown'
    let usage = null
    
    console.log('üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –û–¢–í–ï–¢:')
    console.log(`üìä Choices: ${data.choices ? data.choices.length : '–ù–ï–¢'}`)
    
    if (data.choices && data.choices[0]) {
      responseText = data.choices[0].message.content || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
      finishReason = data.choices[0].finish_reason || 'unknown'
      console.log(`üí¨ –û—Ç–≤–µ—Ç: "${responseText}"`)
      console.log(`üèÅ Finish Reason: ${finishReason}`)
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ')
    }
    
    if (data.usage) {
      usage = data.usage
      console.log(`üìä Usage:`, usage)
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç usage –≤ –æ—Ç–≤–µ—Ç–µ')
    }

    const result = {
      success: true,
      model: model,
      response: responseText,
      finishReason: finishReason,
      usage: usage,
      fullResponse: data
    }
    
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:')
    console.log(JSON.stringify(result, null, 2))
    console.log('='.repeat(80))
    
    return NextResponse.json(result)

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:')
    console.error(`üìù –¢–∏–ø –æ—à–∏–±–∫–∏: ${error instanceof Error ? error.constructor.name : typeof error}`)
    console.error(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${error instanceof Error ? error.message : String(error)}`)
    console.error(`üìù Stack:`, error instanceof Error ? error.stack : '–ù–µ—Ç stack trace')
    console.error('='.repeat(80))
    
    return NextResponse.json({ 
      success: false,
      error: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}` 
    }, { status: 500 })
  }
}
