import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const auditId = params.id
    const { searchParams } = new URL(request.url)
    const token = searchParams.get('token')

    if (!token) {
      return NextResponse.json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 })
    }

    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞:', auditId, '—Å —Ç–æ–∫–µ–Ω–æ–º:', token)

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏—Ç –ø–æ ID
    const { data: audit, error: auditError } = await supabaseClient
      .from('audits')
      .select(`
        id,
        name,
        type,
        status,
        input_data,
        result_data,
        annotations,
        confidence,
        created_at,
        updated_at,
        projects!inner(
          id,
          name,
          description
        )
      `)
      .eq('id', auditId)
      .single()

    if (auditError || !audit) {
      console.error('‚ùå –ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', auditError)
      return NextResponse.json({ error: '–ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ input_data
    if (!audit.input_data?.public_enabled || audit.input_data?.public_token !== token) {
      console.error('‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω')
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 })
    }

    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∞—É–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω:', audit.name)

    return NextResponse.json({
      success: true,
      audit: {
        id: audit.id,
        name: audit.name,
        type: audit.type,
        status: audit.status,
        input_data: audit.input_data,
        result_data: audit.result_data,
        annotations: audit.annotations,
        confidence: audit.confidence,
        created_at: audit.created_at,
        updated_at: audit.updated_at,
        project: audit.projects
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
