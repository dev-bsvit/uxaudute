import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Sonoma Sky Alpha —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...')
    
    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY
    const OPENROUTER_BASE_URL = 'https://openrouter.ai/api/v1'
    
    if (!OPENROUTER_API_KEY) {
      console.error('‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({ 
        error: 'OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' 
      }, { status: 500 })
    }
    
    console.log('üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞:', OPENROUTER_API_KEY.length)
    
    // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    const response = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://uxaudute.vercel.app',
        'X-Title': 'UX Audit Platform'
      },
      body: JSON.stringify({
        model: 'openrouter/sonoma-sky-alpha',
        messages: [
          {
            role: 'system',
            content: 'You are a helpful assistant. Always respond with text.'
          },
          {
            role: 'user',
            content: 'Hello! How are you? Please respond briefly.'
          }
        ],
        max_tokens: 150,
        temperature: 0.8,
        stream: false
      }),
      signal: controller.signal
    })
    
    clearTimeout(timeoutId)

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText)
      return NextResponse.json({ 
        error: `HTTP ${response.status}: ${errorText}`,
        status: response.status
      })
    }

    const data = await response.json()
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Sonoma Sky Alpha:')
    console.log(JSON.stringify(data, null, 2))
    
    let sonomaResponse = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
    if (data.choices && data.choices[0]) {
      sonomaResponse = data.choices[0].message.content
      console.log('üí¨ –û—Ç–≤–µ—Ç Sonoma:', sonomaResponse)
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ choices')
    }

    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç Sonoma Sky Alpha –∑–∞–≤–µ—Ä—à–µ–Ω',
      sonomaResponse: sonomaResponse,
      fullResponse: data,
      status: response.status
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
    
    if (error.name === 'AbortError') {
      return NextResponse.json({ 
        error: '–¢–∞–π–º–∞—É—Ç - Sonoma Sky Alpha –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥',
        timeout: true
      }, { status: 408 })
    }
    
    return NextResponse.json({ 
      error: `–û—à–∏–±–∫–∞: ${error}` 
    }, { status: 500 })
  }
}
