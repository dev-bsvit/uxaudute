import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API ensure-user-balance –≤—ã–∑–≤–∞–Ω')
    console.log('üîç –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ API:', new Date().toISOString())
    
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )

    console.log('üîç Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')
    
    const { userId } = await request.json()
    console.log('üîç –ü–æ–ª—É—á–µ–Ω userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', userId)

    if (!userId) {
      console.error('‚ùå userId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
      return NextResponse.json({ error: 'userId is required' }, { status: 400 })
    }

    console.log('üîç ensureUserHasInitialBalance API –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    const { data: initialTransaction, error: transactionCheckError } = await supabaseClient
      .from('transactions')
      .select('id')
      .eq('user_id', userId)
      .ilike('description', '%–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å%')
      .limit(1)

    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', { initialTransaction, transactionCheckError })

    // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (initialTransaction && initialTransaction.length > 0) {
      console.log('‚ÑπÔ∏è –ù–∞—á–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const { data: currentBalance } = await supabaseClient
        .from('user_balances')
        .select('balance')
        .eq('user_id', userId)
        .single()

      return NextResponse.json({
        success: true,
        message: '–ù–∞—á–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã',
        balance: currentBalance?.balance || 0
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingBalance, error: checkError } = await supabaseClient
      .from('user_balances')
      .select('balance')
      .eq('user_id', userId)
      .single()

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', { existingBalance, checkError })

    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–õ–ò –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º 5 –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('üí∞ –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    let newBalance = 5
    if (existingBalance) {
      // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —Å 0), –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É 5
      newBalance = existingBalance.balance + 5
      console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å: ${existingBalance.balance} + 5 = ${newBalance}`)

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const { data: balanceData, error: balanceError } = await supabaseClient
        .from('user_balances')
        .update({ balance: newBalance })
        .eq('user_id', userId)
        .select()

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', { balanceData, balanceError })

      if (balanceError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError)
        return NextResponse.json({ error: balanceError.message }, { status: 500 })
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å 5 –∫—Ä–µ–¥–∏—Ç–∞–º–∏
      console.log('üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ —Å 5 –∫—Ä–µ–¥–∏—Ç–∞–º–∏')

      const { data: balanceData, error: balanceError } = await supabaseClient
        .from('user_balances')
        .insert({
          user_id: userId,
          balance: 5,
          grace_limit_used: false
        })
        .select()

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', { balanceData, balanceError })

      if (balanceError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', balanceError)
        return NextResponse.json({ error: balanceError.message }, { status: 500 })
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const { data: transactionData, error: transactionError } = await supabaseClient
      .from('transactions')
      .insert({
        user_id: userId,
        type: 'credit',
        amount: 5,
        balance_after: newBalance,
        source: 'manual',
        description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
      })
      .select()

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', { transactionData, transactionError })

    if (transactionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError)
      return NextResponse.json({ error: transactionError.message }, { status: 500 })
    }

    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    return NextResponse.json({
      success: true,
      message: '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      balance: newBalance,
      transaction: transactionData?.[0]
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
