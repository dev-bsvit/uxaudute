import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_new_user
    const { error: functionError } = await supabaseClient.rpc('exec_sql', {
      sql: `
        CREATE OR REPLACE FUNCTION public.handle_new_user()
        RETURNS TRIGGER AS $$
        BEGIN
          -- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          INSERT INTO public.profiles (id, email, full_name)
          VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
          
          -- –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å 5 –∫—Ä–µ–¥–∏—Ç–∞–º–∏
          INSERT INTO public.user_balances (user_id, balance, grace_limit_used)
          VALUES (NEW.id, 5, false);
          
          -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
          INSERT INTO public.transactions (
            user_id,
            type,
            amount,
            balance_after,
            source,
            description
          ) VALUES (
            NEW.id,
            'credit',
            5,
            5,
            'welcome',
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
          );
          
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `
    })

    if (functionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', functionError)
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é', details: functionError.message }, { status: 500 })
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    const { error: triggerError } = await supabaseClient.rpc('exec_sql', {
      sql: `
        DO $$
        BEGIN
          -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π trigger –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
          
          -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π trigger
          CREATE TRIGGER on_auth_user_created
            AFTER INSERT ON auth.users
            FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
            
          RAISE NOTICE 'Trigger on_auth_user_created updated successfully';
        END $$;
      `
    })

    if (triggerError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞:', triggerError)
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä', details: triggerError.message }, { status: 500 })
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

