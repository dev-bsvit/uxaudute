import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const { auditId, token } = await request.json()
    
    if (!auditId || !token) {
      return NextResponse.json({ error: 'auditId and token required' }, { status: 400 })
    }

    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞:', auditId, '—Å —Ç–æ–∫–µ–Ω–æ–º:', token)

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏—Ç
    const { data: audit, error: auditError } = await supabaseClient
      .from('audits')
      .select('id, input_data')
      .eq('id', auditId)
      .single()

    if (auditError || !audit) {
      console.error('‚ùå –ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', auditError)
      return NextResponse.json({ error: '–ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    console.log('‚úÖ –ê—É–¥–∏—Ç –Ω–∞–π–¥–µ–Ω:', audit.id)
    console.log('üîç –¢–µ–∫—É—â–∏–π input_data:', audit.input_data)

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º input_data
    const updatedInputData = {
      ...audit.input_data,
      public_enabled: true,
      public_token: token
    }

    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º input_data:', updatedInputData)

    const { error: updateError } = await supabaseClient
      .from('audits')
      .update({ input_data: updatedInputData })
      .eq('id', auditId)

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', details: updateError.message }, { status: 500 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    const { data: verifyAudit, error: verifyError } = await supabaseClient
      .from('audits')
      .select('input_data')
      .eq('id', auditId)
      .single()

    if (verifyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', verifyError)
    } else {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞:', verifyAudit.input_data)
    }

    console.log('‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–∞:', auditId)

    return NextResponse.json({
      success: true,
      message: '–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      auditId,
      token,
      publicUrl: `https://uxaudute.vercel.app/public/audit/${auditId}?token=${token}`,
      updatedInputData: verifyAudit?.input_data
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API force-fix-audit:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
