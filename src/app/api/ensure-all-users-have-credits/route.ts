import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const yesterday = new Date()
    yesterday.setDate(yesterday.getDate() - 1)
    
    const { data: recentUsers, error: usersError } = await supabaseClient
      .from('profiles')
      .select(`
        id,
        email,
        created_at,
        user_balances!left(balance)
      `)
      .gte('created_at', yesterday.toISOString())

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
      return NextResponse.json({ error: usersError.message }, { status: 500 })
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${recentUsers?.length || 0}`)

    if (!recentUsers || recentUsers.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
        processed: 0
      })
    }

    let processedCount = 0
    const results = []

    for (const user of recentUsers) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (${user.id})`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å
        if (!user.user_balances || user.user_balances.length === 0) {
          console.log(`üîß –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          
          // –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å
          const { error: balanceError } = await supabaseClient
            .from('user_balances')
            .insert({
              user_id: user.id,
              balance: 5,
              grace_limit_used: false
            })

          if (balanceError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${user.email}:`, balanceError)
            results.push({
              email: user.email,
              userId: user.id,
              success: false,
              error: balanceError.message
            })
            continue
          }

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { error: transactionError } = await supabaseClient
            .from('transactions')
            .insert({
              user_id: user.id,
              type: 'credit',
              amount: 5,
              balance_after: 5,
              source: 'welcome',
              description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
            })

          if (transactionError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${user.email}:`, transactionError)
            results.push({
              email: user.email,
              userId: user.id,
              success: false,
              error: transactionError.message
            })
            continue
          }

          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          processedCount++
          results.push({
            email: user.email,
            userId: user.id,
            success: true,
            action: 'created_balance'
          })

        } else if (user.user_balances[0].balance === 0) {
          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          const { error: updateError } = await supabaseClient
            .from('user_balances')
            .update({ balance: 5 })
            .eq('user_id', user.id)

          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${user.email}:`, updateError)
            results.push({
              email: user.email,
              userId: user.id,
              success: false,
              error: updateError.message
            })
            continue
          }

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { error: transactionError } = await supabaseClient
            .from('transactions')
            .insert({
              user_id: user.id,
              type: 'credit',
              amount: 5,
              balance_after: 5,
              source: 'manual',
              description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
            })

          if (transactionError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${user.email}:`, transactionError)
            results.push({
              email: user.email,
              userId: user.id,
              success: false,
              error: transactionError.message
            })
            continue
          }

          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          processedCount++
          results.push({
            email: user.email,
            userId: user.id,
            success: true,
            action: 'fixed_balance'
          })

        } else {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ –∏–º–µ–µ—Ç –±–∞–ª–∞–Ω—Å: ${user.user_balances[0].balance}`)
          results.push({
            email: user.email,
            userId: user.id,
            success: true,
            action: 'already_has_balance',
            balance: user.user_balances[0].balance
          })
        }

      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, userError)
        results.push({
          email: user.email,
          userId: user.id,
          success: false,
          error: userError instanceof Error ? userError.message : 'Unknown error'
        })
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${processedCount} –∏–∑ ${recentUsers.length}`)

    return NextResponse.json({
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      processed: processedCount,
      total: recentUsers.length,
      results: results
    })

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
