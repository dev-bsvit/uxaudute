import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const { data: users, error } = await supabaseClient
      .from('profiles')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10)

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö
    const userIds = users?.map(u => u.id) || []
    const { data: balances } = await supabaseClient
      .from('user_balances')
      .select('user_id, balance')
      .in('user_id', userIds)

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const usersWithBalances = users?.map(user => {
      const balance = balances?.find(b => b.user_id === user.id)
      return {
        ...user,
        balance: balance?.balance || 0,
        hasBalance: !!balance
      }
    })

    return NextResponse.json({
      success: true,
      users: usersWithBalances,
      total: usersWithBalances?.length || 0,
      debugInfo: {
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google OAuth',
        instructions: [
          '1. –í—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞',
          '2. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google OAuth',
          '3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)',
          '4. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏ —Å —ç–º–æ–¥–∑–∏ üîç –∏ üîÑ'
        ]
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API debug-auth-events:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
