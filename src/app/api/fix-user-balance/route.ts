import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    const { userId } = await request.json()

    if (!userId) {
      return NextResponse.json({ error: 'userId is required' }, { status: 400 })
    }

    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: currentBalance, error: balanceError } = await supabaseClient
      .from('user_balances')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (balanceError && balanceError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError)
      return NextResponse.json({ error: balanceError.message }, { status: 500 })
    }

    console.log('üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance)

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω 0, —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º
    if (!currentBalance || currentBalance.balance === 0) {
      console.log('üí∞ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å 5 –∫—Ä–µ–¥–∏—Ç–∞–º–∏')
      
      let result
      if (currentBalance) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å
        result = await supabaseClient
          .from('user_balances')
          .update({ balance: 5 })
          .eq('user_id', userId)
          .select()
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        result = await supabaseClient
          .from('user_balances')
          .insert({
            user_id: userId,
            balance: 5,
            grace_limit_used: false
          })
          .select()
      }

      if (result.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', result.error)
        return NextResponse.json({ error: result.error.message }, { status: 500 })
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: transactionError } = await supabaseClient
        .from('transactions')
        .insert({
          user_id: userId,
          type: 'credit',
          amount: 5,
          balance_after: 5,
          source: 'manual_fix',
          description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –Ω–∞—á–∞–ª—å–Ω—ã–µ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
        })

      if (transactionError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError)
        return NextResponse.json({ error: transactionError.message }, { status: 500 })
      }

      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')

      return NextResponse.json({
        success: true,
        message: '–ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        balance: 5,
        action: currentBalance ? 'updated' : 'created'
      })
    } else {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', currentBalance.balance)
      
      return NextResponse.json({
        success: true,
        message: '–ë–∞–ª–∞–Ω—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        balance: currentBalance.balance,
        action: 'no_change'
      })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}