import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function GET(request: NextRequest) {
  try {
    console.log('üîç [Admin API] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞...')

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    const { data: onboardingData, error: onboardingError } = await supabase
      .from('user_onboarding')
      .select('*')
      .order('created_at', { ascending: false })

    console.log('üìä [Admin API] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', onboardingData?.length || 0)

    if (onboardingError) {
      console.error('‚ùå [Admin API] Error fetching onboarding data:', onboardingError)
      return NextResponse.json(
        { error: 'Failed to fetch onboarding data', details: onboardingError },
        { status: 500 }
      )
    }

    if (!onboardingData || onboardingData.length === 0) {
      console.log('‚ÑπÔ∏è [Admin API] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞')
      return NextResponse.json({ success: true, data: [] })
    }

    // –ü–æ–ª—É—á–∞–µ–º user_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userIds = onboardingData.map(item => item.user_id)
    console.log('üìä [Admin API] –ó–∞–≥—Ä—É–∂–∞–µ–º profiles –¥–ª—è', userIds.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

    // –ü–æ–ª—É—á–∞–µ–º profiles –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id,email')
      .in('id', userIds)

    if (profilesError) {
      console.error('‚ö†Ô∏è [Admin API] Error fetching profiles:', profilesError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ email
    }

    console.log('üìä [Admin API] –ü–æ–ª—É—á–µ–Ω–æ profiles:', profiles?.length || 0)

    // –°–æ–∑–¥–∞–µ–º map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ email
    const emailMap = new Map(profiles?.map(p => [p.id, p.email]) || [])

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email
    const formattedData = onboardingData.map(item => ({
      ...item,
      user_email: emailMap.get(item.user_id) || null
    }))

    console.log('‚úÖ [Admin API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø–∏—Å–µ–π:', formattedData.length)
    return NextResponse.json({ success: true, data: formattedData })
  } catch (error) {
    console.error('‚ùå [Admin API] Error in admin onboarding API:', error)
    return NextResponse.json(
      { error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
