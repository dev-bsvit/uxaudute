import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function DELETE(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )

    const { userId } = await request.json()

    if (!userId) {
      return NextResponse.json({ error: 'userId is required' }, { status: 400 })
    }

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

    // 1. –£–¥–∞–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: annotationsError } = await supabaseClient
      .from('annotations')
      .delete()
      .eq('user_id', userId)

    if (annotationsError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:', annotationsError)
      return NextResponse.json({ error: annotationsError.message }, { status: 500 })
    }

    // 2. –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (—á–µ—Ä–µ–∑ audits)
    const { data: userAudits } = await supabaseClient
      .from('audits')
      .select('id')
      .eq('user_id', userId)

    if (userAudits && userAudits.length > 0) {
      const auditIds = userAudits.map(audit => audit.id)
      
      // –£–¥–∞–ª—è–µ–º analysis_results
      const { error: analysisResultsError } = await supabaseClient
        .from('analysis_results')
        .delete()
        .in('audit_id', auditIds)

      if (analysisResultsError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', analysisResultsError)
        return NextResponse.json({ error: analysisResultsError.message }, { status: 500 })
      }

      // –£–¥–∞–ª—è–µ–º audit_history
      const { error: auditHistoryError } = await supabaseClient
        .from('audit_history')
        .delete()
        .in('audit_id', auditIds)

      if (auditHistoryError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞—É–¥–∏—Ç–æ–≤:', auditHistoryError)
        return NextResponse.json({ error: auditHistoryError.message }, { status: 500 })
      }
    }

    // 3. –£–¥–∞–ª—è–µ–º –∞—É–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: auditsError } = await supabaseClient
      .from('audits')
      .delete()
      .eq('user_id', userId)

    if (auditsError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–≤:', auditsError)
      return NextResponse.json({ error: auditsError.message }, { status: 500 })
    }

    // 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: projectsError } = await supabaseClient
      .from('projects')
      .delete()
      .eq('user_id', userId)

    if (projectsError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError)
      return NextResponse.json({ error: projectsError.message }, { status: 500 })
    }

    // 5. –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: transactionsError } = await supabaseClient
      .from('transactions')
      .delete()
      .eq('user_id', userId)

    if (transactionsError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError)
      return NextResponse.json({ error: transactionsError.message }, { status: 500 })
    }

    // 6. –£–¥–∞–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: balanceError } = await supabaseClient
      .from('user_balances')
      .delete()
      .eq('user_id', userId)

    if (balanceError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError)
      return NextResponse.json({ error: balanceError.message }, { status: 500 })
    }

    // 7. –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: profileError } = await supabaseClient
      .from('profiles')
      .delete()
      .eq('id', userId)

    if (profileError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError)
      return NextResponse.json({ error: profileError.message }, { status: 500 })
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth.users (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try {
      const { error: authError } = await supabaseClient.auth.admin.deleteUser(userId)
      if (authError) {
        console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth:', authError.message)
      }
    } catch (authErr) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ auth:', authErr)
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', userId)

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
