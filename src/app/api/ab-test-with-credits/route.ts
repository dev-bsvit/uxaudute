import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'
import { supabase } from '@/lib/supabase'
import { ABTestResponse } from '@/lib/analysis-types'
import { checkCreditsForAudit, deductCreditsForAudit } from '@/lib/credits'
import { LanguageManager } from '@/lib/language-manager'
import { PromptType } from '@/lib/i18n/types'

export async function POST(request: NextRequest) {
  try {
    console.log('=== AB TEST WITH CREDITS API –≤—ã–∑–≤–∞–Ω ===')
    const { auditId } = await request.json()

    if (!auditId) {
      return NextResponse.json({ error: 'Audit ID is required' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º AB —Ç–µ—Å—Ç–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
    console.log('üîç –¢–∏–ø –∞—É–¥–∏—Ç–∞: ab_test')
    
    const creditsCheck = await checkCreditsForAudit(user.id, 'ab_test')
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', JSON.stringify(creditsCheck, null, 2))
    
    if (!creditsCheck.canProceed) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', creditsCheck)
      return NextResponse.json({
        error: 'Insufficient credits',
        message: creditsCheck.message,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance,
        is_test_account: creditsCheck.isTestAccount
      }, { status: 402 }) // 402 Payment Required
    }

    console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', creditsCheck)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞ –∏–∑ –±–∞–∑—ã
    const { data: audit, error: auditError } = await supabase
      .from('audits')
      .select(`
        *,
        projects (
          context,
          target_audience
        )
      `)
      .eq('id', auditId)
      .single()

    if (auditError || !audit) {
      return NextResponse.json({ error: 'Audit not found' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
    if (audit.status !== 'completed' || !audit.result_data) {
      return NextResponse.json({ 
        error: 'Main audit must be completed first' 
      }, { status: 400 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞
    let auditLanguage = audit.input_data?.language

    // –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É result_data
    if (!auditLanguage && audit.result_data) {
      const resultText = JSON.stringify(audit.result_data)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
      const hasCyrillic = /[–∞-—è–ê-–Ø—ë–Å]/.test(resultText)
      auditLanguage = hasCyrillic ? 'ru' : 'en'
      console.log('üåê Language auto-detected from result_data:', auditLanguage, hasCyrillic)
    }

    // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ —è–∑—ã–∫ –≤—Å—ë –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    auditLanguage = auditLanguage || 'ru'
    console.log('üåê Final audit language:', auditLanguage)

    const languageContext = {
      requestLanguage: auditLanguage,
      detectedLanguage: auditLanguage,
      promptLanguage: auditLanguage,
      responseLanguage: auditLanguage,
      isConsistent: true,
      source: 'user-preference' as const
    }
    LanguageManager.logLanguageContext(languageContext, 'AB Test API')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è AB —Ç–µ—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    let abTestPrompt = await LanguageManager.loadPromptForLanguage(
      PromptType.AB_TEST,
      languageContext
    )

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    abTestPrompt = LanguageManager.enforceResponseLanguage(
      abTestPrompt,
      languageContext.responseLanguage
    )

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º—Ç–∞
    const auditData = {
      imageUrl: audit.screenshot_url,
      context: audit.context || '',
      projectContext: audit.projects?.context || '',
      targetAudience: audit.projects?.target_audience || '',
      analysisResult: audit.result_data
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∞—É–¥–∏—Ç–∞
    const fullPrompt = `${abTestPrompt}

**–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${auditData.imageUrl}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞—É–¥–∏—Ç–∞: ${auditData.context}
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${auditData.projectContext}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${auditData.targetAudience}
- –†–µ–∑—É–ª—å—Ç–∞—Ç UX –∞–Ω–∞–ª–∏–∑–∞: ${JSON.stringify(auditData.analysisResult, null, 2)}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π AB —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`

    // –§–æ—Ä–º–∏—Ä—É–µ–º system message —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    const languageInstruction = languageContext.responseLanguage === 'en'
      ? 'CRITICAL: You MUST respond in ENGLISH ONLY. DO NOT use Russian, Ukrainian, or any other language. All problems, hypotheses, solutions, tasks, metrics, risks, assumptions, and next steps MUST be in English.'
      : '–ö–†–ò–¢–ò–ß–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏.'

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `You are a Senior UI/UX & CRO consultant. Generate AB tests in JSON format. ${languageInstruction}`
        },
        {
          role: "user",
          content: fullPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 4000
    })

    const responseText = completion.choices[0]?.message?.content
    if (!responseText) {
      throw new Error('No response from OpenAI')
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let abTestData: ABTestResponse
    try {
      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ markdown)
      const jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/) || 
                       responseText.match(/\{[\s\S]*\}/)
      
      if (jsonMatch) {
        abTestData = JSON.parse(jsonMatch[1] || jsonMatch[0])
      } else {
        throw new Error('No JSON found in response')
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError)
      console.error('Response text:', responseText)
      return NextResponse.json({ 
        error: 'Failed to parse AB test response',
        details: responseText 
      }, { status: 500 })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AB —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑—É
    const { error: updateError } = await supabase
      .from('audits')
      .update({
        result_data: {
          ...audit.result_data,
          ab_tests: abTestData
        }
      })
      .eq('id', auditId)

    if (updateError) {
      console.error('Database update error:', updateError)
      return NextResponse.json({ 
        error: 'Failed to save AB tests' 
      }, { status: 500 })
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AB —Ç–µ—Å—Ç–∞
    console.log('–°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ AB —Ç–µ—Å—Ç:', auditId)
    const deductResult = await deductCreditsForAudit(
      user.id,
      'ab_test',
      auditId,
      `AB Test generation for audit: ${audit.name}`
    )

    if (!deductResult.success) {
      console.error('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductResult)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ AB —Ç–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
    } else {
      console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã:', deductResult)
    }

    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç...')
    return NextResponse.json({
      success: true,
      data: abTestData,
      credits_info: {
        deducted: true,
        is_test_account: creditsCheck.isTestAccount,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ ab-test-with-credits API:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
