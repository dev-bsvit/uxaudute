import { NextRequest, NextResponse } from 'next/server'
import { executeAIRequest } from '@/lib/ai-provider'
import { StructuredAnalysisResponse, isStructuredResponse } from '@/lib/analysis-types'
import { validateSurvey, analyzeSurveyResults } from '@/lib/survey-utils'
import { supabase } from '@/lib/supabase'
import { loadJSONPromptV2, loadSonomaStructuredPrompt } from '@/lib/prompt-loader'

export async function POST(request: NextRequest) {
  try {
    console.log('=== RESEARCH EXPERIMENTAL API –≤—ã–∑–≤–∞–Ω ===')
    const { 
      url, 
      screenshot, 
      context, 
      provider = 'openai',  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é OpenAI
      openrouterModel = 'sonoma',  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Sonoma –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
      auditId,  // ID –∞—É–¥–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      locale = 'ru'
    } = await request.json()
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
      url: !!url, 
      screenshot: !!screenshot, 
      context: !!context,
      provider,
      openrouterModel,
      auditId
    })

    if (!url && !screenshot) {
      console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
      return NextResponse.json(
        { error: 'URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç...')
    let jsonPrompt: string
    if (provider === 'openrouter' && openrouterModel === 'sonoma') {
      jsonPrompt = await loadSonomaStructuredPrompt()
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma Sky Alpha')
    } else {
      jsonPrompt = await loadJSONPromptV2(locale)
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç v2 –¥–ª—è –ª–æ–∫–∞–ª–∏:', locale)
    }
    
    const finalPrompt = combineWithContext(jsonPrompt, context)
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞:', finalPrompt.length)

    let analysisResult: StructuredAnalysisResponse | null = null

    if (url) {
      // –ê–Ω–∞–ª–∏–∑ URL —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL —á–µ—Ä–µ–∑ ${provider} (${openrouterModel})...`)
      const analysisPrompt = `${finalPrompt}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –ø–æ URL: ${url}\n\n–ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞.`
      
      const aiResponse = await executeAIRequest([
        { role: "user", content: analysisPrompt }
      ], {
        temperature: 0.7,
        max_tokens: 4000,
        provider: provider as 'openai' | 'openrouter',
        openrouterModel: openrouterModel as 'claude' | 'sonoma' | 'gpt4' | 'default'
      })

      if (!aiResponse.success) {
        console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', aiResponse.error)
        return NextResponse.json(
          { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
          { status: 500 }
        )
      }

      const result = aiResponse.content
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –¥–ª–∏–Ω–∞:', result.length)
      
      try {
        analysisResult = JSON.parse(result) as StructuredAnalysisResponse
        console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω')
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
          { status: 500 }
        )
      }
    }

    if (screenshot) {
      // –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
      console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ ${provider} (${openrouterModel})...`)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const description = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è UX –∞–Ω–∞–ª–∏–∑–∞. 
      
      –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
      
      –£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã UX –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.`
      
      const analysisPrompt = `${finalPrompt}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è:\n\n${description}`
      
      const analysisResponse = await executeAIRequest([
        { role: "user", content: analysisPrompt }
      ], {
        temperature: 0.7,
        max_tokens: 4000,
        provider: provider as 'openai' | 'openrouter',
        openrouterModel: openrouterModel as 'claude' | 'sonoma' | 'gpt4' | 'default'
      })

      if (!analysisResponse.success) {
        console.error('–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è:', analysisResponse.error)
        return NextResponse.json(
          { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
          { status: 500 }
        )
      }

      const result = analysisResponse.content
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI, –¥–ª–∏–Ω–∞:', result.length)
      
      try {
        analysisResult = JSON.parse(result) as StructuredAnalysisResponse
        console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω')
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
          { status: 500 }
        )
      }
    }

    if (!analysisResult) {
      console.error('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞')
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 500 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let validation, surveyValidation, surveyAnalysis
    
    if (provider === 'openrouter' && openrouterModel === 'sonoma') {
      console.log('üéØ Sonoma Sky Alpha - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é')
      validation = { isValid: true, errors: [] }
      surveyValidation = { isValid: true, errors: [] }
      surveyAnalysis = { totalScore: 0, averageScore: 0, categoryScores: {} }
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è OpenAI
      const isValidStructure = isStructuredResponse(analysisResult)
      if (!isValidStructure) {
        console.error('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ')
        return NextResponse.json(
          { error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É' },
          { status: 500 }
        )
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è UX-–æ–ø—Ä–æ—Å–∞
      surveyValidation = validateSurvey(analysisResult.uxSurvey)
      if (!surveyValidation.isValid) {
        console.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞:', surveyValidation.errors)
        return NextResponse.json(
          { error: 'UX-–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É' },
          { status: 500 }
        )
      }

      surveyAnalysis = analyzeSurveyResults(analysisResult.uxSurvey)
      validation = { isValid: true, errors: [] }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (auditId) {
      try {
        const { error: saveError } = await supabase
          .from('audits')
          .update({
            result_data: analysisResult,
            updated_at: new Date().toISOString()
          })
          .eq('id', auditId)

        if (saveError) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveError)
          return NextResponse.json(
            { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞' },
            { status: 500 }
          )
        }

        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      } catch (dbError) {
        console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbError)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' },
          { status: 500 }
        )
      }
    }

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    return NextResponse.json({
      success: true,
      result: analysisResult,
      validation,
      surveyValidation,
      surveyAnalysis,
      provider: provider,
      model: 'unknown'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ research-experimental API:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
function combineWithContext(prompt: string, context?: string): string {
  if (!context || context.trim() === '') {
    return prompt
  }
  
  return `${prompt}\n\n## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n${context}\n\n–£—á—Ç–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.`
}