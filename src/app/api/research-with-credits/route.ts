import { NextRequest, NextResponse } from 'next/server'
import { executeAIRequest, AIResponse } from '@/lib/ai-provider'
import { isStructuredResponse } from '@/lib/analysis-types'
import { validateSurvey, analyzeSurveyResults } from '@/lib/survey-utils'
import { supabase } from '@/lib/supabase'
import { checkCreditsForAudit, deductCreditsForAudit } from '@/lib/credits'
import { LanguageManager } from '@/lib/language-manager'
import { PromptType } from '@/lib/i18n/types'
import { ResponseQualityAnalyzer } from '@/lib/quality-metrics'

export async function POST(request: NextRequest) {
  try {
    console.log('=== RESEARCH WITH CREDITS API –≤—ã–∑–≤–∞–Ω ===')
    const { 
      url, 
      screenshot, 
      context, 
      provider = 'openai',
      openrouterModel = 'sonoma',
      auditId
    } = await request.json()
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
      url: !!url, 
      screenshot: !!screenshot, 
      context: !!context,
      provider,
      openrouterModel,
      auditId
    })

    if (!url && !screenshot) {
      console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
      return NextResponse.json(
        { error: 'URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      return NextResponse.json({ error: 'Authorization header required' }, { status: 401 })
    }

    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞—É–¥–∏—Ç–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
    console.log('üîç –¢–∏–ø –∞—É–¥–∏—Ç–∞: research')
    
    const creditsCheck = await checkCreditsForAudit(user.id, 'research')
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', JSON.stringify(creditsCheck, null, 2))
    
    if (!creditsCheck.canProceed) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', creditsCheck)
      return NextResponse.json({
        error: 'Insufficient credits',
        message: creditsCheck.message,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance,
        is_test_account: creditsCheck.isTestAccount
      }, { status: 402 }) // 402 Payment Required
    }

    console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', creditsCheck)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('üåê Determining language for analysis...')
    const languageContext = await LanguageManager.determineAnalysisLanguage(request)
    LanguageManager.logLanguageContext(languageContext, 'API Request')

    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    let promptType: PromptType
    if (provider === 'openrouter' && openrouterModel === 'sonoma') {
      promptType = PromptType.SONOMA_STRUCTURED
      console.log('üîç Using SONOMA_STRUCTURED prompt for Sonoma model')
    } else {
      promptType = PromptType.JSON_STRUCTURED
      console.log('üîç Using JSON_STRUCTURED prompt for standard analysis')
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    console.log(`üîç Loading prompt ${promptType} for language: ${languageContext.promptLanguage}`)
    let jsonPrompt = await LanguageManager.loadPromptForLanguage(promptType, languageContext)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    jsonPrompt = LanguageManager.enforceResponseLanguage(jsonPrompt, languageContext.responseLanguage)
    
    console.log('üîç Final prompt length:', jsonPrompt.length)
    console.log('üîç Prompt preview (first 300 chars):', jsonPrompt.substring(0, 300))
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    let finalPrompt = jsonPrompt
    if (context) {
      const contextLabel = languageContext.promptLanguage === 'ru' 
        ? '\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
        : '\n\nAdditional context from user:\n'
      finalPrompt = `${jsonPrompt}${contextLabel}${context}`
    }
    
    console.log('Final prompt ready, length:', finalPrompt.length)

    let analysisResult: AIResponse | null = null

    if (url) {
      // –ê–Ω–∞–ª–∏–∑ URL
      console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ URL:', url)
      const urlPrompt = `${finalPrompt}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –ø–æ URL: ${url}\n\n–ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞.`
      
      analysisResult = await executeAIRequest(
        [
          { 
            role: 'user', 
            content: urlPrompt 
          }
        ],
        {
          provider: provider,
          openrouterModel: openrouterModel,
          max_tokens: 3000, // –ö–∞–∫ –≤ stable –≤–µ—Ä—Å–∏–∏
          temperature: 0.7 // –ö–∞–∫ –≤ stable –≤–µ—Ä—Å–∏–∏
        }
      )
    } else if (screenshot) {
      // –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º')
      analysisResult = await executeAIRequest(
        [
          {
            role: 'user',
            content: [
              {
                type: "text",
                text: finalPrompt
              },
              {
                type: "image_url",
                image_url: {
                  url: screenshot,
                  detail: "high"
                }
              }
            ]
          }
        ],
        {
          provider: provider,
          openrouterModel: openrouterModel,
          max_tokens: 3000, // –ö–∞–∫ –≤ stable –≤–µ—Ä—Å–∏–∏
          temperature: 0.7 // –ö–∞–∫ –≤ stable –≤–µ—Ä—Å–∏–∏
        }
      )
    }

    if (!analysisResult) {
      console.log('–û—à–∏–±–∫–∞: –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω')
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑' },
        { status: 500 }
      )
    }

    console.log('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', Object.keys(analysisResult || {}))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    console.log('üîç Checking response quality...')
    if (!analysisResult) {
      console.log('‚ùå No result from AI')
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞' }, { status: 500 })
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
    let responseContent = ''
    if (analysisResult && typeof analysisResult === 'object' && 'content' in analysisResult) {
      responseContent = (analysisResult as any).content
    } else if (typeof analysisResult === 'string') {
      responseContent = analysisResult
    } else {
      responseContent = JSON.stringify(analysisResult)
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    const qualityMetrics = ResponseQualityAnalyzer.measureQuality(
      responseContent, 
      languageContext.responseLanguage as 'ru' | 'en'
    )
    
    console.log('üìä Response quality metrics:', qualityMetrics)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const languageValidation = LanguageManager.validateLanguageConsistency(
      finalPrompt,
      responseContent,
      languageContext.responseLanguage
    )
    
    console.log('üåê Language validation:', languageValidation)

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let parsedResult
    try {
      parsedResult = JSON.parse(responseContent)
      console.log('‚úÖ JSON successfully parsed')
    } catch (parseError) {
      console.error('‚ùå JSON parsing error:', parseError)
      console.log('üìÑ Raw response content:', responseContent.substring(0, 500))
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        details: parseError instanceof Error ? parseError.message : 'Parse error',
        quality: qualityMetrics,
        language_validation: languageValidation
      }, { status: 500 })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let validation: any = { isValid: false, errors: [] }
    let surveyValidation: any = null
    let surveyAnalysis: any = null

    if (parsedResult && isStructuredResponse(parsedResult as any)) {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º...')
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ä–æ—Å–∞
      if ((parsedResult as any).uxSurvey) {
        surveyValidation = validateSurvey((parsedResult as any).uxSurvey)
        console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ä–æ—Å–∞:', surveyValidation)
      }

      // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
      if ((parsedResult as any).uxSurvey && surveyValidation?.isValid) {
        surveyAnalysis = analyzeSurveyResults((parsedResult as any).uxSurvey)
        console.log('–ê–Ω–∞–ª–∏–∑ –æ–ø—Ä–æ—Å–∞:', surveyAnalysis)
      }

      validation = { isValid: true, errors: [] }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É audits
    if (auditId) {
      try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ audits:', {
          auditId,
          result_data: parsedResult as any,
          status: 'completed'
        })
        
        const { error: auditUpdateError } = await supabase
          .from('audits')
          .update({
            result_data: parsedResult as any,
            status: 'completed',
            updated_at: new Date().toISOString()
          })
          .eq('id', auditId)
        
        if (auditUpdateError) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è audits:', auditUpdateError)
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${auditUpdateError.message}`)
        } else {
          console.log('‚úÖ –ê—É–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º')
        }
      } catch (saveError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', saveError)
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞: ${saveError instanceof Error ? saveError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      }
    } else {
      console.warn('‚ö†Ô∏è auditId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞
    if (auditId) {
      console.log('–°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –∞—É–¥–∏—Ç:', auditId)
      const deductResult = await deductCreditsForAudit(
        user.id,
        'research',
        auditId,
        `UX Research audit: ${url || 'screenshot analysis'}`
      )

      if (!deductResult.success) {
        console.error('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductResult)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞—É–¥–∏—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
      } else {
        console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã:', deductResult)
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    ResponseQualityAnalyzer.logQualityMetrics(qualityMetrics, 'API Response')
    LanguageManager.logLanguageContext(languageContext, 'Final Response')

    console.log('‚úÖ Returning successful response with quality metrics')
    return NextResponse.json({ 
      success: true,
      data: parsedResult as any,
      format: 'json',
      validation: {
        survey: surveyValidation,
        analysis: surveyAnalysis
      },
      quality: {
        score: qualityMetrics.qualityScore,
        completeness: qualityMetrics.completeness,
        language_accuracy: qualityMetrics.languageAccuracy,
        is_truncated: qualityMetrics.isTruncated,
        token_count: qualityMetrics.tokenCount,
        meets_standards: ResponseQualityAnalyzer.meetsQualityStandards(qualityMetrics)
      },
      language: {
        context: languageContext,
        validation: languageValidation
      },
      credits_info: {
        deducted: auditId ? true : false,
        is_test_account: creditsCheck.isTestAccount,
        required_credits: creditsCheck.requiredCredits,
        current_balance: creditsCheck.currentBalance
      }
    })

  } catch (error) {
    console.error('‚ùå CRITICAL ERROR in research-with-credits API:', error)
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace')
    console.error('‚ùå Error message:', error instanceof Error ? error.message : String(error))
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}


