import { NextRequest, NextResponse } from 'next/server'
import { readFileSync } from 'fs'
import { join } from 'path'
import { supabase } from '@/lib/supabase'
import { createClient } from '@supabase/supabase-js'
import { executeAIRequest } from '@/lib/ai-provider'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    console.log('=== RESEARCH SONOMA API –≤—ã–∑–≤–∞–Ω ===')
    const { 
      url, 
      screenshot, 
      context, 
      auditId,
      userId
    } = await request.json()
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
      url: !!url, 
      screenshot: !!screenshot, 
      context: !!context,
      auditId,
      userId
    })
    
    if (screenshot) {
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', screenshot.length)
    }
    if (url) {
      console.log('üîó URL –ø–æ–ª—É—á–µ–Ω:', url)
    }

    if (!url && !screenshot) {
      console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
      return NextResponse.json(
        { error: 'URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è UX –∞—É–¥–∏—Ç–∞
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const testUserId = userId || 'cc37dfed-4dad-4e7e-bff5-1b38645e3c7d'
    const auditCost = 2 // –û—Å–Ω–æ–≤–Ω–æ–π –∞—É–¥–∏—Ç —Å—Ç–æ–∏—Ç 2 –∫—Ä–µ–¥–∏—Ç–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const { data: balanceData, error: balanceError } = await supabaseClient
      .from('user_balances')
      .select('balance')
      .eq('user_id', testUserId)
      .single()

    if (balanceError) {
      console.error('Error checking balance:', balanceError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤' },
        { status: 500 }
      )
    }

    const currentBalance = balanceData?.balance || 0

    if (currentBalance < auditCost) {
      return NextResponse.json(
        { 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞',
          required: auditCost,
          available: currentBalance,
          message: '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è'
        },
        { status: 402 } // Payment Required
      )
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
    const newBalance = currentBalance - auditCost
    
    const { error: updateError } = await supabaseClient
      .from('user_balances')
      .update({ balance: newBalance })
      .eq('user_id', testUserId)

    if (updateError) {
      console.error('Error updating balance:', updateError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤' },
        { status: 500 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { error: transactionError } = await supabaseClient
      .from('transactions')
      .insert({
        user_id: testUserId,
        type: 'debit',
        amount: -auditCost,
        balance_after: newBalance,
        source: 'audit',
        description: 'UX –∞—É–¥–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (research-sonoma)'
      })

    if (transactionError) {
      console.error('Error creating transaction:', transactionError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
        { status: 500 }
      )
    }

    console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–æ ${auditCost} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è UX –∞—É–¥–∏—Ç–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma Sky Alpha
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma Sky Alpha...')
    let jsonPrompt: string
    try {
      const promptPath = join(process.cwd(), 'prompts', 'sonoma-structured-prompt.md')
      jsonPrompt = readFileSync(promptPath, 'utf-8')
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç Sonoma –∏–∑ —Ñ–∞–π–ª–∞')
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
      jsonPrompt = `You are an expert UX designer. Analyze the interface and return JSON in this format:

{
  "screenDescription": {
    "screenType": "Type of screen",
    "userGoal": "User's main goal",
    "keyElements": ["List of key elements"],
    "confidence": 85,
    "confidenceReason": "Reason for confidence"
  },
  "uxSurvey": {
    "dynamicQuestionsAdded": true,
    "screenType": "landing",
    "questions": [
      {
        "id": 1,
        "question": "What is the main purpose?",
        "options": ["A) Option 1", "B) Option 2", "C) Option 3"],
        "scores": [70, 20, 10],
        "confidence": 85,
        "category": "clarity",
        "principle": "Goal Clarity",
        "explanation": "Explanation"
      }
    ],
    "overallConfidence": 82,
    "summary": {
      "totalQuestions": 1,
      "averageConfidence": 82,
      "categoryBreakdown": {"clarity": 82}
    }
  },
  "problemsAndSolutions": {
    "criticalIssues": [
      {
        "id": 1,
        "title": "Issue title",
        "description": "Issue description",
        "severity": "high",
        "impact": "High impact on user experience",
        "solution": "Proposed solution",
        "priority": 1
      }
    ],
    "recommendations": [
      {
        "id": 1,
        "title": "Recommendation title",
        "description": "Recommendation description",
        "category": "usability",
        "effort": "medium",
        "impact": "high"
      }
    ],
    "overallScore": 75,
    "summary": "Overall analysis summary"
  }
}

Respond with valid JSON only.`
    }

    const finalPrompt = context ? `${jsonPrompt}\n\n## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n${context}\n\n–£—á—Ç–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.` : jsonPrompt
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞:', finalPrompt.length)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    let analysisPrompt: string
    if (screenshot) {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—É - —ç—Ç–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      analysisPrompt = `${finalPrompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è UX –∞–Ω–∞–ª–∏–∑–∞. 

–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.

–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã UX –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.

${url ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: URL —Å–∞–π—Ç–∞: ${url}` : ''}`
    } else if (url) {
      analysisPrompt = `${finalPrompt}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –ø–æ URL: ${url}\n\n–ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞.`
    } else {
      analysisPrompt = `${finalPrompt}\n\n–ü—Ä–æ–≤–µ–¥–∏ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ UX –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.`
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É...')
    
    let aiResponse: any
    
    if (screenshot) {
      // –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o Vision –Ω–∞–ø—Ä—è–º—É—é
      console.log('üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...')
      const { openai } = await import('@/lib/openai')
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: analysisPrompt
              },
              {
                type: "image_url",
                image_url: {
                  url: screenshot,
                  detail: "high"
                }
              }
            ]
          }
        ],
        temperature: 0.8,
        max_tokens: 8000,
        response_format: { type: "json_object" }
      })

      const content = completion.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
      console.log('üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT-4o Vision, –¥–ª–∏–Ω–∞:', content.length)
      console.log('üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', content.substring(0, 500))
      
      if (content === '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞' || content.length < 50) {
        console.error('‚ùå GPT-4o Vision –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç')
        aiResponse = {
          success: false,
          content: '',
          provider: 'openai',
          model: 'gpt-4o',
          error: 'GPT-4o Vision –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.'
        }
      } else {
        aiResponse = {
          success: true,
          content,
          provider: 'openai',
          model: 'gpt-4o',
          usage: completion.usage
        }
      }
    } else {
      // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      aiResponse = await executeAIRequest(
        [{ role: 'user', content: analysisPrompt }],
        {
          temperature: 0.8,
          max_tokens: 8000,
          provider: 'openai' // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      )
    }

    if (!aiResponse.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', aiResponse.error)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${aiResponse.error}` },
        { status: 500 }
      )
    }

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', aiResponse.provider, aiResponse.model)
    const content = aiResponse.content
    console.log('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:', content.substring(0, 200) + '...')

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let analysisResult: any
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
      let cleanedContent = content.trim()
      
      // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
      if (cleanedContent.startsWith('```json')) {
        cleanedContent = cleanedContent.replace(/^```json\s*/, '').replace(/\s*```$/, '')
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
      const jsonMatch = cleanedContent.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        cleanedContent = jsonMatch[0]
      }
      
      analysisResult = JSON.parse(cleanedContent)
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω')
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError)
      console.error('–û—Ç–≤–µ—Ç AI:', content)
      
      // –°–æ–∑–¥–∞–µ–º fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      analysisResult = {
        screenDescription: {
          screenType: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Ä–∞–Ω–∞",
          userGoal: "–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
          keyElements: ["–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"],
          confidence: 0,
          confidenceReason: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI"
        },
        uxSurvey: {
          dynamicQuestionsAdded: false,
          screenType: "unknown",
          questions: [],
          overallConfidence: 0,
          summary: {
            totalQuestions: 0,
            averageConfidence: 0,
            categoryBreakdown: {}
          }
        },
        problemsAndSolutions: [],
        audience: {
          targetAudience: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
          mainPain: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
          fears: []
        },
        behavior: {
          userScenarios: {
            idealPath: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            typicalError: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
            alternativeWorkaround: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
          },
          frictionPoints: [],
          actionMotivation: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
          behavioralPatterns: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        },
        selfCheck: {
          checklist: {
            coversAllElements: false,
            noContradictions: false,
            principlesJustified: false,
            actionClarity: false
          },
          confidence: {
            analysis: 0,
            survey: 0,
            recommendations: 0
          },
          varietyCheck: {
            passed: false,
            description: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
            principleVariety: [],
            issueTypes: []
          },
          confidenceVariation: {
            min: 0,
            max: 0,
            average: 0,
            explanation: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
          }
        },
        metadata: {
          timestamp: new Date().toISOString(),
          version: "1.0",
          model: "sonoma-sky-alpha"
        },
        rawResponse: content,
        parseError: parseError instanceof Error ? parseError.message : 'Unknown error'
      }
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—É')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å auditId
    if (auditId) {
      try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        const { error: auditUpdateError } = await supabase
          .from('audits')
          .update({
            result_data: analysisResult,
            status: 'completed',
            updated_at: new Date().toISOString()
          })
          .eq('id', auditId)

        if (auditUpdateError) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', auditUpdateError)
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${auditUpdateError.message}`)
        } else {
          console.log('‚úÖ –ê—É–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º')
        }
      } catch (saveError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', saveError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    } else {
      console.warn('‚ö†Ô∏è auditId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç...')
    return NextResponse.json({ 
      success: true,
      data: analysisResult,
      format: 'json',
      provider: 'openrouter',
      model: 'sonoma-sky-alpha',
      experimental: true
    })

  } catch (error) {
    console.error('Research Sonoma API error:', error)
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}
