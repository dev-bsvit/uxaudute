import { NextRequest, NextResponse } from 'next/server'
import { readFileSync } from 'fs'
import { join } from 'path'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    console.log('=== RESEARCH SONOMA API –≤—ã–∑–≤–∞–Ω ===')
    const { 
      url, 
      screenshot, 
      context, 
      auditId
    } = await request.json()
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { 
      url: !!url, 
      screenshot: !!screenshot, 
      context: !!context,
      auditId
    })

    if (!url && !screenshot) {
      console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
      return NextResponse.json(
        { error: 'URL –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 400 }
      )
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma Sky Alpha
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma Sky Alpha...')
    let jsonPrompt: string
    try {
      const promptPath = join(process.cwd(), 'prompts', 'sonoma-structured-prompt.md')
      jsonPrompt = readFileSync(promptPath, 'utf-8')
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç Sonoma –∏–∑ —Ñ–∞–π–ª–∞')
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
      jsonPrompt = `You are an expert UX designer. Analyze the interface and return JSON in this format:

{
  "screenDescription": {
    "screenType": "Type of screen",
    "userGoal": "User's main goal",
    "keyElements": ["List of key elements"],
    "confidence": 85,
    "confidenceReason": "Reason for confidence"
  },
  "uxSurvey": {
    "dynamicQuestionsAdded": true,
    "screenType": "landing",
    "questions": [
      {
        "id": 1,
        "question": "What is the main purpose?",
        "options": ["A) Option 1", "B) Option 2", "C) Option 3"],
        "scores": [70, 20, 10],
        "confidence": 85,
        "category": "clarity",
        "principle": "Goal Clarity",
        "explanation": "Explanation"
      }
    ],
    "overallConfidence": 82,
    "summary": {
      "totalQuestions": 1,
      "averageConfidence": 82,
      "categoryBreakdown": {"clarity": 82}
    }
  },
  "problemsAndSolutions": {
    "criticalIssues": [
      {
        "id": 1,
        "title": "Issue title",
        "description": "Issue description",
        "severity": "high",
        "impact": "High impact on user experience",
        "solution": "Proposed solution",
        "priority": 1
      }
    ],
    "recommendations": [
      {
        "id": 1,
        "title": "Recommendation title",
        "description": "Recommendation description",
        "category": "usability",
        "effort": "medium",
        "impact": "high"
      }
    ],
    "overallScore": 75,
    "summary": "Overall analysis summary"
  }
}

Respond with valid JSON only.`
    }

    const finalPrompt = context ? `${jsonPrompt}\n\n## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n${context}\n\n–£—á—Ç–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.` : jsonPrompt
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞:', finalPrompt.length)

    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY
    const OPENROUTER_BASE_URL = 'https://openrouter.ai/api/v1'
    
    if (!OPENROUTER_API_KEY) {
      console.error('‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return NextResponse.json(
        { error: 'OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      )
    }

    let analysisPrompt: string
    if (url) {
      analysisPrompt = `${finalPrompt}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –ø–æ URL: ${url}\n\n–ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞.`
    } else {
      // –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (Sonoma –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å)
      analysisPrompt = `${finalPrompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è UX –∞–Ω–∞–ª–∏–∑–∞. 

–ü–æ—Å–∫–æ–ª—å–∫—É Sonoma Sky Alpha –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, 
–ø—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö UX –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.

–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã UX –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.`
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...')
    
    const requestBody = {
      model: 'openrouter/sonoma-sky-alpha',
      messages: [
        {
          role: 'user',
          content: analysisPrompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.8
    }

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody, null, 2))

    const response = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://uxaudute.vercel.app',
        'X-Title': 'UX Audit Platform'
      },
      body: JSON.stringify(requestBody)
    })

    console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter:', response.status, response.statusText)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ OpenRouter:', errorText)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ OpenRouter: ${response.status} ${errorText}` },
        { status: 500 }
      )
    }

    const data = await response.json()
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(data, null, 2))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (data.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ OpenRouter:', data.error)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ API: ${data.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` },
        { status: 500 }
      )
    }

    const content = data.choices?.[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
    console.log('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:', content)

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let analysisResult: any
    try {
      analysisResult = JSON.parse(content)
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω')
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError)
      console.error('–û—Ç–≤–µ—Ç AI:', content)
      
      // –°–æ–∑–¥–∞–µ–º fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      analysisResult = {
        screenDescription: {
          screenType: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Ä–∞–Ω–∞",
          userGoal: "–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
          keyElements: ["–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"],
          confidence: 0,
          confidenceReason: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI"
        },
        uxSurvey: {
          dynamicQuestionsAdded: false,
          screenType: "unknown",
          questions: [],
          overallConfidence: 0,
          summary: {
            totalQuestions: 0,
            averageConfidence: 0,
            categoryBreakdown: {}
          }
        },
        problemsAndSolutions: {
          criticalIssues: [],
          recommendations: [],
          overallScore: 0,
          summary: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        },
        rawResponse: content,
        parseError: parseError instanceof Error ? parseError.message : 'Unknown error'
      }
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—É')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å auditId
    if (auditId) {
      try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        const { error: auditUpdateError } = await supabase
          .from('audits')
          .update({
            result_data: analysisResult,
            status: 'completed',
            updated_at: new Date().toISOString()
          })
          .eq('id', auditId)

        if (auditUpdateError) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', auditUpdateError)
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${auditUpdateError.message}`)
        } else {
          console.log('‚úÖ –ê—É–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º')
        }
      } catch (saveError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', saveError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    } else {
      console.warn('‚ö†Ô∏è auditId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    }

    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç...')
    return NextResponse.json({ 
      success: true,
      data: analysisResult,
      format: 'json',
      provider: 'openrouter',
      model: 'sonoma-sky-alpha',
      experimental: true
    })

  } catch (error) {
    console.error('Research Sonoma API error:', error)
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}
