import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth.users
    const { data: authUsers, error: authError } = await supabaseClient.auth.admin.listUsers()
    
    if (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', authError)
      return NextResponse.json({ error: authError.message }, { status: 500 })
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth: ${authUsers.users.length}`)

    const results = []
    let fixedCount = 0

    for (const user of authUsers.users) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (${user.id})`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        const { data: profile, error: profileError } = await supabaseClient
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single()

        if (profileError && profileError.code !== 'PGRST116') {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${user.email}:`, profileError)
          continue
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!profile) {
          console.log(`üë§ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${user.email}`)
          const { error: createProfileError } = await supabaseClient
            .from('profiles')
            .insert({
              id: user.id,
              email: user.email,
              full_name: user.user_metadata?.full_name || user.user_metadata?.name || null,
              avatar_url: user.user_metadata?.avatar_url || user.user_metadata?.picture || null
            })

          if (createProfileError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${user.email}:`, createProfileError)
            continue
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å
        const { data: balance, error: balanceError } = await supabaseClient
          .from('user_balances')
          .select('*')
          .eq('user_id', user.id)
          .single()

        if (balanceError && balanceError.code !== 'PGRST116') {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${user.email}:`, balanceError)
          continue
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!balance) {
          console.log(`üí∞ –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è ${user.email}`)
          const { error: createBalanceError } = await supabaseClient
            .from('user_balances')
            .insert({
              user_id: user.id,
              balance: 5,
              grace_limit_used: false
            })

          if (createBalanceError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${user.email}:`, createBalanceError)
            continue
          }

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { error: transactionError } = await supabaseClient
            .from('transactions')
            .insert({
              user_id: user.id,
              type: 'credit',
              amount: 5,
              balance_after: 5,
              source: 'manual_fix',
              description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –Ω–∞—á–∞–ª—å–Ω—ã–µ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
            })

          if (transactionError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${user.email}:`, transactionError)
            continue
          }

          fixedCount++
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`)
        } else {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ –∏–º–µ–µ—Ç –±–∞–ª–∞–Ω—Å: ${balance.balance}`)
        }

        results.push({
          email: user.email,
          userId: user.id,
          hasProfile: !!profile,
          hasBalance: !!balance,
          balance: balance?.balance || 0,
          fixed: !balance
        })

      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, userError)
        results.push({
          email: user.email,
          userId: user.id,
          error: userError instanceof Error ? userError.message : 'Unknown error'
        })
      }
    }

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedCount}`)

    return NextResponse.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      total: authUsers.users.length,
      fixed: fixedCount,
      results
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

