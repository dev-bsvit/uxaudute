import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º 0
    const { data: zeroBalanceUsers, error: fetchError } = await supabaseClient
      .from('user_balances')
      .select(`
        user_id,
        balance,
        profiles!inner(email, created_at)
      `)
      .eq('balance', 0)

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', fetchError)
      return NextResponse.json({ error: fetchError.message }, { status: 500 })
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${zeroBalanceUsers?.length || 0}`)

    if (!zeroBalanceUsers || zeroBalanceUsers.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
        fixed: 0
      })
    }

    let fixedCount = 0
    const results = []

    for (const user of zeroBalanceUsers) {
      try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ email —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        const userEmail = (user as any).profiles?.email || 'unknown@email.com'
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail} (${user.user_id})`)

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ 5
        const { error: updateError } = await supabaseClient
          .from('user_balances')
          .update({ balance: 5 })
          .eq('user_id', user.user_id)

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userEmail}:`, updateError)
          results.push({
            email: userEmail,
            userId: user.user_id,
            success: false,
            error: updateError.message
          })
          continue
        }

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const { error: transactionError } = await supabaseClient
          .from('transactions')
          .insert({
            user_id: user.user_id,
            type: 'credit',
            amount: 5,
            balance_after: 5,
            source: 'manual',
            description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤'
          })

        if (transactionError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${userEmail}:`, transactionError)
          results.push({
            email: userEmail,
            userId: user.user_id,
            success: false,
            error: transactionError.message
          })
          continue
        }

        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userEmail}`)
        fixedCount++
        results.push({
          email: userEmail,
          userId: user.user_id,
          success: true
        })

      } catch (userError) {
        const userEmail = (user as any).profiles?.email || 'unknown@email.com'
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userEmail}:`, userError)
        results.push({
          email: userEmail,
          userId: user.user_id,
          success: false,
          error: userError instanceof Error ? userError.message : 'Unknown error'
        })
      }
    }

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedCount} –∏–∑ ${zeroBalanceUsers.length}`)

    return NextResponse.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º`,
      fixed: fixedCount,
      total: zeroBalanceUsers.length,
      results: results
    })

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}