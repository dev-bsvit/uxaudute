import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—É–¥–∏—Ç—ã
    const { data: audits, error: auditsError } = await supabaseClient
      .from('audits')
      .select('id, input_data')
      .not('input_data', 'is', null)

    if (auditsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–≤:', auditsError)
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–≤', 
        details: auditsError.message 
      }, { status: 500 })
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${audits.length} –∞—É–¥–∏—Ç–æ–≤`)

    let updatedCount = 0
    let errorCount = 0

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞—É–¥–∏—Ç
    for (const audit of audits) {
      try {
        const currentInputData = audit.input_data || {}
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (currentInputData.public_enabled !== undefined) {
          continue
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è
        const updatedInputData = {
          ...currentInputData,
          public_enabled: false,
          public_token: null
        }

        const { error: updateError } = await supabaseClient
          .from('audits')
          .update({ input_data: updatedInputData })
          .eq('id', audit.id)

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞ ${audit.id}:`, updateError)
          errorCount++
        } else {
          updatedCount++
          console.log(`‚úÖ –ê—É–¥–∏—Ç ${audit.id} –æ–±–Ω–æ–≤–ª–µ–Ω`)
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏—Ç–∞ ${audit.id}:`, err)
        errorCount++
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`)

    return NextResponse.json({
      success: true,
      message: '–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω',
      updatedCount,
      errorCount,
      totalAudits: audits.length
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API fix-public-access:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
