import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { getAudit } from '@/lib/database'

export const dynamic = 'force-dynamic'

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const auditId = params.id
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞:', auditId)

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏—Ç
    const audit = await getAudit(auditId)
    if (!audit) {
      return NextResponse.json({ error: '–ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω
    const publicToken = crypto.randomUUID()
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ input_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    const { data: currentAudit, error: fetchError } = await supabaseClient
      .from('audits')
      .select('input_data')
      .eq('id', auditId)
      .single()

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞:', fetchError)
      return NextResponse.json({ error: fetchError.message }, { status: 500 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º input_data —Å –ø—É–±–ª–∏—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    const currentInputData = currentAudit.input_data || {}
    const updatedInputData = {
      ...currentInputData,
      public_token: publicToken,
      public_enabled: true
    }

    console.log('üîç Debug info:', {
      auditId,
      currentInputData,
      updatedInputData,
      publicToken
    })

    const { error: updateError } = await supabaseClient
      .from('audits')
      .update({ 
        input_data: updatedInputData
      })
      .eq('id', auditId)

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏:', updateError)
      return NextResponse.json({ error: updateError.message }, { status: 500 })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
    const publicUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://uxaudute.vercel.app'}/public/audit/${auditId}?token=${publicToken}`

    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', publicUrl)

    return NextResponse.json({
      success: true,
      publicUrl: publicUrl,
      token: publicToken
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const auditId = params.id
    const supabaseClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    console.log('üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞:', auditId)

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
    const { error: updateError } = await supabaseClient
      .from('audits')
      .update({ 
        public_enabled: false,
        public_token: null
      })
      .eq('id', auditId)

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏:', updateError)
      return NextResponse.json({ error: updateError.message }, { status: 500 })
    }

    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞:', auditId)

    return NextResponse.json({
      success: true,
      message: '–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error)
    return NextResponse.json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
