/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */

import { StructuredAnalysisResponse } from './analysis-types'

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function safeParseJSON(jsonString: string): StructuredAnalysisResponse | null {
  if (!jsonString || typeof jsonString !== 'string') {
    console.warn('Invalid JSON string provided')
    return null
  }

  // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanedString = cleanJSONString(jsonString)
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—ã—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    const parsed = JSON.parse(cleanedString)
    console.log('‚úÖ JSON parsed successfully')
    return validateAndFixStructure(parsed)
  } catch (error) {
    console.warn('‚ö†Ô∏è JSON parsing failed, attempting recovery...', error)
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
    const recovered = recoverTruncatedJSON(cleanedString)
    if (recovered) {
      try {
        const parsed = JSON.parse(recovered)
        console.log('‚úÖ JSON recovered and parsed successfully')
        return validateAndFixStructure(parsed)
      } catch (recoveryError) {
        console.warn('‚ùå JSON recovery failed', recoveryError)
      }
    }
    
    // –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º fallback –æ–±—ä–µ–∫—Ç
    console.log('üîÑ Creating fallback object from partial JSON')
    return createFallbackFromPartialJSON(cleanedString)
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç JSON —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function cleanJSONString(jsonString: string): string {
  return jsonString
    .trim()
    // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
    .replace(/^```json\s*/i, '')
    .replace(/\s*```$/i, '')
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/^\s+|\s+$/g, '')
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 */
function validateAndFixStructure(parsed: any): StructuredAnalysisResponse {
  if (!parsed || typeof parsed !== 'object') {
    return createFallbackFromPartialJSON('')
  }

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const result: StructuredAnalysisResponse = {
    screenDescription: parsed.screenDescription || {
      screenType: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      userGoal: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
      keyElements: [],
      confidence: 0,
      confidenceReason: '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    },
    uxSurvey: parsed.uxSurvey || {
      questions: [],
      overallConfidence: 0,
      summary: {
        totalQuestions: 0,
        averageConfidence: 0,
        criticalIssues: 0,
        recommendations: []
      }
    },
    audience: parsed.audience || {
      targetAudience: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
      mainPain: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      fears: []
    },
    behavior: parsed.behavior || {
      userScenarios: {
        idealPath: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
        typicalError: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
        alternativeWorkaround: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'
      },
      behavioralPatterns: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      frictionPoints: [],
      actionMotivation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'
    },
    problemsAndSolutions: parsed.problemsAndSolutions || [],
    selfCheck: parsed.selfCheck || {
      checklist: {
        coversAllElements: false,
        noContradictions: false,
        principlesJustified: false,
        actionClarity: false
      },
      confidence: {
        analysis: 0,
        survey: 0,
        recommendations: 0
      }
    },
    metadata: parsed.metadata || {
      timestamp: new Date().toISOString(),
      version: '1.0',
      model: 'unknown'
    }
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö
  if (result.screenDescription && typeof result.screenDescription === 'object') {
    result.screenDescription.keyElements = Array.isArray(result.screenDescription.keyElements) 
      ? result.screenDescription.keyElements 
      : []
    result.screenDescription.confidence = typeof result.screenDescription.confidence === 'number' 
      ? result.screenDescription.confidence 
      : 0
  }

  if (result.uxSurvey && typeof result.uxSurvey === 'object') {
    result.uxSurvey.questions = Array.isArray(result.uxSurvey.questions) 
      ? result.uxSurvey.questions 
      : []
  }

  if (result.audience && typeof result.audience === 'object') {
    result.audience.fears = Array.isArray(result.audience.fears) 
      ? result.audience.fears 
      : []
  }

  if (result.behavior && typeof result.behavior === 'object') {
    result.behavior.frictionPoints = Array.isArray(result.behavior.frictionPoints) 
      ? result.behavior.frictionPoints 
      : []
  }

  result.problemsAndSolutions = Array.isArray(result.problemsAndSolutions) 
    ? result.problemsAndSolutions 
    : []

  return result
}

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
 */
function recoverTruncatedJSON(jsonString: string): string | null {
  try {
    let recovered = jsonString.trim()
    console.log('üîß Attempting to recover JSON, length:', recovered.length)
    console.log('üîß Last 100 chars:', recovered.slice(-100))
    
    // –ï—Å–ª–∏ JSON –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–ø—è—Ç—É—é, —É–¥–∞–ª—è–µ–º –µ—ë
    if (recovered.endsWith(',')) {
      recovered = recovered.slice(0, -1)
      console.log('üîß Removed trailing comma')
    }
    
    // –ï—Å–ª–∏ JSON –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—É—é –∫–∞–≤—ã—á–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (recovered.endsWith('"') && !recovered.endsWith('""') && !recovered.endsWith('"}') && !recovered.endsWith('"]')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
      const lastQuoteIndex = recovered.lastIndexOf('"')
      if (lastQuoteIndex > 0) {
        const beforeQuote = recovered[lastQuoteIndex - 1]
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –∫–∞–≤—ã—á–∫–æ–π –Ω–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –Ω–µ –∑–∞–ø—è—Ç–∞—è, —ç—Ç–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (beforeQuote !== ':' && beforeQuote !== ',' && beforeQuote !== '[') {
          recovered = recovered.slice(0, -1)
          console.log('üîß Removed incomplete string value')
        }
      }
    }
    
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–µ–ø–æ–ª–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—è
    const lastCompleteField = findLastCompleteField(recovered)
    if (lastCompleteField && lastCompleteField !== recovered) {
      recovered = lastCompleteField
      console.log('üîß Truncated to last complete field')
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
    let openBraces = 0
    let openBrackets = 0
    let inString = false
    let escapeNext = false
    
    for (let i = 0; i < recovered.length; i++) {
      const char = recovered[i]
      
      if (escapeNext) {
        escapeNext = false
        continue
      }
      
      if (char === '\\') {
        escapeNext = true
        continue
      }
      
      if (char === '"' && !escapeNext) {
        inString = !inString
        continue
      }
      
      if (!inString) {
        if (char === '{') openBraces++
        else if (char === '}') openBraces--
        else if (char === '[') openBrackets++
        else if (char === ']') openBrackets--
      }
    }
    
    console.log('üîß Open braces:', openBraces, 'Open brackets:', openBrackets, 'In string:', inString)
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (inString) {
      recovered += '"'
      console.log('üîß Closed unclosed string')
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
    while (openBrackets > 0) {
      recovered += ']'
      openBrackets--
      console.log('üîß Closed array bracket')
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
    while (openBraces > 0) {
      recovered += '}'
      openBraces--
      console.log('üîß Closed object brace')
    }
    
    console.log('üîß Recovery complete, final length:', recovered.length)
    return recovered
  } catch (error) {
    console.warn('Error during JSON recovery:', error)
    return null
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø–æ–ª–µ –≤ JSON —Å—Ç—Ä–æ–∫–µ
 */
function findLastCompleteField(jsonString: string): string | null {
  try {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "field": "value" –∏–ª–∏ "field": value
    const patterns = [
      /,\s*"[^"]+"\s*:\s*"[^"]*"$/,  // "field": "value" –≤ –∫–æ–Ω—Ü–µ
      /,\s*"[^"]+"\s*:\s*[^,}]+$/,   // "field": value –≤ –∫–æ–Ω—Ü–µ
      /"[^"]+"\s*:\s*"[^"]*"$/,      // –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
      /"[^"]+"\s*:\s*[^,}]+$/        // –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å —á–∏—Å–ª–æ–º/boolean
    ]
    
    for (const pattern of patterns) {
      const matches = jsonString.match(pattern)
      if (matches) {
        const matchIndex = jsonString.lastIndexOf(matches[0])
        if (matchIndex > 0) {
          // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—è
          return jsonString.substring(0, matchIndex)
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º –ø–æ–ª–µ–º
    const lastCommaIndex = jsonString.lastIndexOf('",')
    if (lastCommaIndex > 0) {
      return jsonString.substring(0, lastCommaIndex + 1)
    }
    
    return null
  } catch (error) {
    console.warn('Error finding last complete field:', error)
    return null
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç fallback –æ–±—ä–µ–∫—Ç –∏–∑ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ JSON
 */
function createFallbackFromPartialJSON(jsonString: string): StructuredAnalysisResponse {
  console.log('üîÑ Creating fallback from partial JSON, length:', jsonString.length)
  
  const fallback: StructuredAnalysisResponse = {
    screenDescription: {
      screenType: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      userGoal: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      keyElements: [],
      confidence: 0,
      confidenceReason: '–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã'
    },
    uxSurvey: {
      questions: [],
      overallConfidence: 0,
      summary: {
        totalQuestions: 0,
        averageConfidence: 0,
        criticalIssues: 0,
        recommendations: []
      }
    },
    audience: {
      targetAudience: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      mainPain: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      fears: []
    },
    behavior: {
      userScenarios: {
        idealPath: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        typicalError: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        alternativeWorkaround: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
      },
      behavioralPatterns: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      frictionPoints: [],
      actionMotivation: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
    },
    problemsAndSolutions: [],
    selfCheck: {
      checklist: {
        coversAllElements: false,
        noContradictions: false,
        principlesJustified: false,
        actionClarity: false
      },
      confidence: {
        analysis: 0,
        survey: 0,
        recommendations: 0
      }
    },
    metadata: {
      timestamp: new Date().toISOString(),
      version: '1.0',
      model: 'fallback'
    }
  }

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const partialData = extractPartialData(jsonString)
    console.log('üîÑ Extracted partial data keys:', Object.keys(partialData))
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å fallback –¥–∞–Ω–Ω—ã–º–∏
    const result = {
      ...fallback,
      ...partialData
    }
    
    console.log('üîÑ Final result keys:', Object.keys(result))
    console.log('üîÑ Problems and solutions count:', result.problemsAndSolutions?.length || 0)
    
    return result
  } catch (error) {
    console.warn('Error creating fallback object:', error)
    return fallback
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON
 */
function extractPartialData(jsonString: string): Partial<StructuredAnalysisResponse> {
  const result: Partial<StructuredAnalysisResponse> = {}
  
  try {
    console.log('üîç Extracting partial data from JSON...')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∏–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const sections = [
      'screenDescription',
      'uxSurvey', 
      'audience',
      'behavior',
      'problemsAndSolutions',
      'selfCheck'
    ]
    
    for (const section of sections) {
      console.log(`üîç Extracting section: ${section}`)
      const extracted = extractJSONSection(jsonString, section)
      if (extracted) {
        result[section as keyof StructuredAnalysisResponse] = extracted
        console.log(`‚úÖ Successfully extracted ${section}:`, typeof extracted === 'object' ? Object.keys(extracted) : extracted)
      } else {
        console.log(`‚ùå Failed to extract ${section}`)
      }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è problemsAndSolutions - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!result.problemsAndSolutions || (Array.isArray(result.problemsAndSolutions) && result.problemsAndSolutions.length === 0)) {
      console.log('üîç Attempting to extract partial problemsAndSolutions...')
      const partialProblems = extractPartialProblemsAndSolutions(jsonString)
      if (partialProblems && partialProblems.length > 0) {
        result.problemsAndSolutions = partialProblems
        console.log(`‚úÖ Extracted ${partialProblems.length} partial problems`)
      }
    }
    
  } catch (error) {
    console.warn('Error extracting partial data:', error)
  }
  
  return result
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö problemsAndSolutions
 */
function extractPartialProblemsAndSolutions(jsonString: string): any[] {
  try {
    const problems: any[] = []
    
    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ problemsAndSolutions (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    let problemsStart = jsonString.indexOf('"problemsAndSolutions": [')
    if (problemsStart === -1) {
      problemsStart = jsonString.indexOf("'problemsAndSolutions': [")
    }
    if (problemsStart === -1) {
      problemsStart = jsonString.indexOf('problemsAndSolutions: [')
    }
    
    if (problemsStart === -1) {
      console.log('‚ùå problemsAndSolutions section not found')
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
      const problemMention = jsonString.indexOf('"element"')
      if (problemMention !== -1) {
        console.log('üîç Found element mention, trying to extract...')
        return extractProblemsFromText(jsonString)
      }
      return []
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    const arrayStart = jsonString.indexOf('[', problemsStart)
    if (arrayStart === -1) return []
    
    // –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ, –¥–∞–∂–µ –Ω–µ–ø–æ–ª–Ω—ã–µ
    let pos = arrayStart + 1
    let braceCount = 0
    let inString = false
    let escapeNext = false
    let currentObject = ''
    let objectStart = -1
    
    while (pos < jsonString.length) {
      const char = jsonString[pos]
      
      if (escapeNext) {
        escapeNext = false
        pos++
        continue
      }
      
      if (char === '\\') {
        escapeNext = true
        pos++
        continue
      }
      
      if (char === '"' && !escapeNext) {
        inString = !inString
      }
      
      if (!inString) {
        if (char === '{') {
          if (braceCount === 0) {
            objectStart = pos
          }
          braceCount++
        } else if (char === '}') {
          braceCount--
          if (braceCount === 0 && objectStart !== -1) {
            // –ù–∞—à–ª–∏ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
            currentObject = jsonString.substring(objectStart, pos + 1)
            try {
              const parsed = JSON.parse(currentObject)
              problems.push(parsed)
              console.log('‚úÖ Extracted complete problem object')
            } catch (e) {
              console.log('‚ùå Failed to parse complete object')
            }
            objectStart = -1
          }
        } else if (char === ']') {
          // –ö–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
          break
        }
      }
      
      pos++
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if (objectStart !== -1 && braceCount > 0) {
      currentObject = jsonString.substring(objectStart)
      console.log('üîß Attempting to recover incomplete object:', currentObject.substring(0, 100) + '...')
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç
      const recovered = recoverIncompleteObject(currentObject)
      if (recovered) {
        try {
          const parsed = JSON.parse(recovered)
          problems.push(parsed)
          console.log('‚úÖ Recovered incomplete problem object')
        } catch (e) {
          console.log('‚ùå Failed to parse recovered object')
        }
      }
    }
    
    return problems
  } catch (error) {
    console.warn('Error extracting partial problems:', error)
    return []
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ JSON –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
 */
function extractProblemsFromText(text: string): any[] {
  const problems: any[] = []
  
  try {
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–±–ª–µ–º
    const elementRegex = /"element":\s*"([^"]+)"/g
    const problemRegex = /"problem":\s*"([^"]+)"/g
    const recommendationRegex = /"recommendation":\s*"([^"]+)"/g
    
    let elementMatch
    const elements: string[] = []
    const problemTexts: string[] = []
    const recommendations: string[] = []
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    while ((elementMatch = elementRegex.exec(text)) !== null) {
      elements.push(elementMatch[1])
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
    let problemMatch
    while ((problemMatch = problemRegex.exec(text)) !== null) {
      problemTexts.push(problemMatch[1])
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    let recommendationMatch
    while ((recommendationMatch = recommendationRegex.exec(text)) !== null) {
      recommendations.push(recommendationMatch[1])
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–±–ª–µ–º
    const maxLength = Math.max(elements.length, problemTexts.length, recommendations.length)
    for (let i = 0; i < maxLength; i++) {
      problems.push({
        element: elements[i] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
        problem: problemTexts[i] || '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∞',
        recommendation: recommendations[i] || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        priority: 'medium',
        principle: '–ü—Ä–∏–Ω—Ü–∏–ø UX'
      })
    }
    
    console.log(`üîß Extracted ${problems.length} problems from text patterns`)
    return problems
    
  } catch (error) {
    console.log('‚ùå Error extracting problems from text:', error)
    return []
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
 */
function recoverIncompleteObject(objectString: string): string | null {
  try {
    let recovered = objectString.trim()
    
    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ }, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å
    if (!recovered.endsWith('}')) {
      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø–æ–ª–µ
      const lastCompleteField = recovered.lastIndexOf('",')
      if (lastCompleteField > 0) {
        recovered = recovered.substring(0, lastCompleteField + 1)
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç
      recovered += '}'
    }
    
    return recovered
  } catch (error) {
    console.warn('Error recovering incomplete object:', error)
    return null
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
 */
function extractJSONSection(jsonString: string, sectionName: string): any {
  try {
    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏
    const sectionStart = jsonString.indexOf(`"${sectionName}":`)
    if (sectionStart === -1) return null
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const valueStart = jsonString.indexOf(':', sectionStart) + 1
    let pos = valueStart
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    while (pos < jsonString.length && /\s/.test(jsonString[pos])) {
      pos++
    }
    
    if (pos >= jsonString.length) return null
    
    const startChar = jsonString[pos]
    let endPos = pos
    let depth = 0
    let inString = false
    let escapeNext = false
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –∫–æ–Ω–µ—Ü
    if (startChar === '{' || startChar === '[') {
      const openChar = startChar
      const closeChar = startChar === '{' ? '}' : ']'
      
      for (let i = pos; i < jsonString.length; i++) {
        const char = jsonString[i]
        
        if (escapeNext) {
          escapeNext = false
          continue
        }
        
        if (char === '\\') {
          escapeNext = true
          continue
        }
        
        if (char === '"' && !escapeNext) {
          inString = !inString
          continue
        }
        
        if (!inString) {
          if (char === openChar) {
            depth++
          } else if (char === closeChar) {
            depth--
            if (depth === 0) {
              endPos = i + 1
              break
            }
          }
        }
      }
      
      if (depth === 0) {
        const sectionJSON = jsonString.substring(pos, endPos)
        return JSON.parse(sectionJSON)
      }
    }
    
    return null
  } catch (error) {
    console.warn(`Failed to extract section ${sectionName}:`, error)
    return null
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–Ω—ã–º StructuredAnalysisResponse
 */
export function validateAnalysisResponse(obj: any): obj is StructuredAnalysisResponse {
  if (!obj || typeof obj !== 'object') {
    console.warn('üîç VALIDATION: Object is null or not an object')
    return false
  }
  
  console.log('üîç VALIDATION: Validating object with keys:', Object.keys(obj))
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π (–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–π)
  const requiredFields = ['screenDescription', 'uxSurvey', 'audience', 'behavior', 'problemsAndSolutions']
  const presentFields = requiredFields.filter(field => field in obj)
  
  console.log('üîç VALIDATION: Present fields:', presentFields)
  console.log('üîç VALIDATION: Missing fields:', requiredFields.filter(field => !(field in obj)))
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 –∏–∑ 5 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
  if (presentFields.length >= 3) {
    console.log('‚úÖ VALIDATION: Object is valid (has', presentFields.length, 'of', requiredFields.length, 'required fields)')
    return true
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±—ã–µ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
  const alternativeFields = ['audience', 'behavior', 'metadata', 'uxSurvey', 'selfCheck', 'screenDescription', 'problemsAndSolutions']
  const hasAlternativeFields = alternativeFields.some(field => field in obj)
  
  if (hasAlternativeFields) {
    console.log('‚úÖ VALIDATION: Object is valid (has alternative structure)')
    return true
  }
  
  console.warn('‚ùå VALIDATION: Object is not valid - insufficient fields')
  return false
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å fallback
 */
export function safeGet<T>(obj: any, path: string, fallback: T): T {
  try {
    const keys = path.split('.')
    let current = obj
    
    for (const key of keys) {
      if (current && typeof current === 'object' && key in current) {
        current = current[key]
      } else {
        return fallback
      }
    }
    
    return current !== undefined ? current : fallback
  } catch (error) {
    console.warn(`Error getting path ${path}:`, error)
    return fallback
  }
}