import { createClient } from '@supabase/supabase-js'

const supabaseClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export interface CreditsCheckResult {
  canProceed: boolean
  isTestAccount: boolean
  currentBalance: number
  requiredCredits: number
  message?: string
}

export interface CreditsDeductResult {
  success: boolean
  deducted: boolean
  isTestAccount: boolean
  transactionId?: string
  newBalance?: number
  message?: string
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∞—É–¥–∏—Ç–∞
 */
export async function checkCreditsForAudit(
  userId: string,
  auditType: 'research' | 'ab_test' | 'business' | 'hypotheses',
  customCredits?: number // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
): Promise<CreditsCheckResult> {
  try {
    console.log('üîç checkCreditsForAudit: userId=', userId, 'auditType=', auditType, 'customCredits=', customCredits)

    let requiredCredits: number

    if (customCredits !== undefined) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
      requiredCredits = customCredits
      console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', requiredCredits)
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—É–¥–∏—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—É–¥–∏—Ç–∞ –∏–∑ audit_credits...')
      const { data: auditCost, error: costError } = await supabaseClient
        .from('audit_credits')
        .select('credits_cost')
        .eq('audit_type', auditType)
        .eq('is_active', true)
        .single()

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', { auditCost, costError })

      if (costError || !auditCost) {
        console.error('‚ùå Error fetching audit cost:', costError)
        return {
          canProceed: false,
          isTestAccount: false,
          currentBalance: 0,
          requiredCredits: 0,
          message: 'Failed to get audit cost'
        }
      }

      requiredCredits = auditCost.credits_cost
      console.log('üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', requiredCredits)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–º
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const { data: profile, error: profileError } = await supabaseClient
      .from('profiles')
      .select('is_test_account')
      .eq('id', userId)
      .single()

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è:', { profile, profileError })

    // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è
    if (profile?.is_test_account) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è')
      return {
        canProceed: true,
        isTestAccount: true,
        currentBalance: 0,
        requiredCredits,
        message: 'Test account - no credits required'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ RPC...')
    const { data: canDeduct, error } = await supabaseClient
      .rpc('can_deduct_credits', {
        user_uuid: userId,
        amount: requiredCredits
      })

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç RPC can_deduct_credits:', { canDeduct, error })

    if (error) {
      console.error('‚ùå Error checking credits:', error)
      return {
        canProceed: false,
        isTestAccount: false,
        currentBalance: 0,
        requiredCredits,
        message: 'Failed to check credits'
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å...')
    const { data: balance, error: balanceError } = await supabaseClient
      .from('user_balances')
      .select('balance')
      .eq('user_id', userId)
      .single()

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞:', { balance, balanceError })

    const result = {
      canProceed: canDeduct,
      isTestAccount: false,
      currentBalance: balance?.balance || 0,
      requiredCredits,
      message: canDeduct ? 'Credits available' : 'Insufficient credits'
    }

    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç checkCreditsForAudit:', result)
    return result

  } catch (error) {
    console.error('‚ùå Error in checkCreditsForAudit:', error)
    return {
      canProceed: false,
      isTestAccount: false,
      currentBalance: 0,
      requiredCredits: 0,
      message: 'Internal error'
    }
  }
}

/**
 * –°–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –∞—É–¥–∏—Ç
 */
export async function deductCreditsForAudit(
  userId: string,
  auditType: 'research' | 'ab_test' | 'business' | 'hypotheses',
  auditId: string,
  description: string,
  customCredits?: number // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
): Promise<CreditsDeductResult> {
  try {
    let requiredCredits: number

    if (customCredits !== undefined) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
      requiredCredits = customCredits
      console.log('üîç –°–ø–∏—Å—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:', requiredCredits)
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—É–¥–∏—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const { data: auditCost, error: costError } = await supabaseClient
        .from('audit_credits')
        .select('credits_cost')
        .eq('audit_type', auditType)
        .eq('is_active', true)
        .single()

      if (costError || !auditCost) {
        console.error('Error fetching audit cost:', costError)
        return {
          success: false,
          deducted: false,
          isTestAccount: false,
          message: 'Failed to get audit cost'
        }
      }

      requiredCredits = auditCost.credits_cost
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–º
    const { data: profile } = await supabaseClient
      .from('profiles')
      .select('is_test_account')
      .eq('id', userId)
      .single()

    // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å "zero-cost test"
    if (profile?.is_test_account) {
      const { data: transaction, error: transactionError } = await supabaseClient
        .from('transactions')
        .insert({
          user_id: userId,
          type: 'debit',
          amount: -requiredCredits,
          balance_after: 0,
          source: 'trial',
          description: `Test account: ${description}`,
          related_audit_id: auditId,
          metadata: { is_test_transaction: true, audit_type: auditType }
        })
        .select()
        .single()

      if (transactionError) {
        console.error('Error creating test transaction:', transactionError)
        return {
          success: false,
          deducted: false,
          isTestAccount: true,
          message: 'Failed to create test transaction'
        }
      }

      return {
        success: true,
        deducted: true,
        isTestAccount: true,
        transactionId: transaction.id,
        newBalance: 0,
        message: 'Test account - no credits deducted'
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
    console.log('üîç –í—ã–∑—ã–≤–∞–µ–º RPC deduct_credits —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      user_uuid: userId,
      amount: requiredCredits,
      source: 'audit',
      description: description,
      related_audit_id: auditId
    })

    const { data: deducted, error } = await supabaseClient
      .rpc('deduct_credits', {
        user_uuid: userId,
        amount: requiredCredits,
        source: 'audit',
        description: description,
        related_audit_id: auditId
      })

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç RPC deduct_credits:', { deducted, error })

    if (error) {
      console.error('‚ùå Error deducting credits:', error)
      return {
        success: false,
        deducted: false,
        isTestAccount: false,
        message: `Failed to deduct credits: ${error.message || 'Unknown error'}`
      }
    }

    if (!deducted) {
      console.error('‚ùå RPC deduct_credits –≤–µ—Ä–Ω—É–ª–∞ false (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤)')
      return {
        success: false,
        deducted: false,
        isTestAccount: false,
        message: 'Insufficient credits (RPC returned false)'
      }
    }

    console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ RPC')

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const { data: balance } = await supabaseClient
      .from('user_balances')
      .select('balance')
      .eq('user_id', userId)
      .single()

    return {
      success: true,
      deducted: true,
      isTestAccount: false,
      newBalance: balance?.balance || 0,
      message: 'Credits deducted successfully'
    }

  } catch (error) {
    console.error('Error in deductCreditsForAudit:', error)
    return {
      success: false,
      deducted: false,
      isTestAccount: false,
      message: 'Internal error'
    }
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ credits_deducted
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
 */
export async function safeDeductCreditsForAudit(
  userId: string,
  auditType: 'research' | 'ab_test' | 'business' | 'hypotheses',
  auditId: string,
  description: string,
  customCredits?: number
): Promise<CreditsDeductResult> {
  try {
    console.log('üîí safeDeductCreditsForAudit: –Ω–∞—á–∞–ª–æ', { userId, auditId, auditType })

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–∞ –∏ —Ñ–ª–∞–≥ credits_deducted
    const { data: audit, error: auditError } = await supabaseClient
      .from('audits')
      .select('id, status, credits_deducted, credits_amount')
      .eq('id', auditId)
      .eq('user_id', userId)
      .single()

    if (auditError || !audit) {
      console.error('‚ùå –ê—É–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', auditError)
      return {
        success: false,
        deducted: false,
        isTestAccount: false,
        message: 'Audit not found or access denied'
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã
    if (audit.credits_deducted) {
      console.log('‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏—Ç–∞')
      return {
        success: true,
        deducted: false,
        isTestAccount: false,
        message: 'Credits already deducted for this audit',
        newBalance: await getUserBalance(userId)
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–¥–∏—Ç–∞ (—Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ completed)
    if (audit.status !== 'completed') {
      console.log('‚ùå –ê—É–¥–∏—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç—É—Å:', audit.status)
      return {
        success: false,
        deducted: false,
        isTestAccount: false,
        message: `Cannot deduct credits for audit with status: ${audit.status}`
      }
    }

    console.log('‚úÖ –ê—É–¥–∏—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã...')

    // 4. –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const deductResult = await deductCreditsForAudit(
      userId,
      auditType,
      auditId,
      description,
      customCredits
    )

    if (!deductResult.success) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã:', deductResult.message)
      return deductResult
    }

    console.log('‚úÖ –ö—Ä–µ–¥–∏—Ç—ã —Å–ø–∏—Å–∞–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ audits...')

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ credits_deducted –≤ —Ç–∞–±–ª–∏—Ü–µ audits
    const creditsAmount = customCredits || deductResult.newBalance || 2
    const { error: updateError } = await supabaseClient
      .from('audits')
      .update({
        credits_deducted: true,
        credits_amount: creditsAmount,
        credits_deducted_at: new Date().toISOString()
      })
      .eq('id', auditId)

    if (updateError) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ credits_deducted:', updateError)
      // –ö—Ä–µ–¥–∏—Ç—ã —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success=true
      // –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
    } else {
      console.log('‚úÖ –§–ª–∞–≥ credits_deducted –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    }

    return {
      ...deductResult,
      success: true,
      deducted: true
    }

  } catch (error) {
    console.error('‚ùå Error in safeDeductCreditsForAudit:', error)
    return {
      success: false,
      deducted: false,
      isTestAccount: false,
      message: 'Internal error during credits deduction'
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserBalance(userId: string): Promise<number> {
  try {
    const { data: balance, error } = await supabaseClient
      .from('user_balances')
      .select('balance')
      .eq('user_id', userId)
      .single()

    if (error && error.code !== 'PGRST116') {
      console.error('Error fetching balance:', error)
      return 0
    }

    return balance?.balance || 0
  } catch (error) {
    console.error('Error in getUserBalance:', error)
    return 0
  }
}
