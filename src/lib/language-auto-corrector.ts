/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
 */

import { LanguageContext } from './language-manager'
import { ResponseQualityAnalyzer, QualityMetrics } from './quality-metrics'

export interface CorrectionResult {
  originalText: string
  correctedText: string
  corrections: Correction[]
  qualityImprovement: number
  success: boolean
}

export interface Correction {
  type: 'language_enforcement' | 'completeness_fix' | 'structure_improvement' | 'token_optimization'
  description: string
  applied: boolean
  impact: 'low' | 'medium' | 'high'
}

export class LanguageAutoCorrector {
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
   */
  static async correctPrompt(
    originalPrompt: string,
    languageContext: LanguageContext,
    qualityIssues: string[]
  ): Promise<CorrectionResult> {
    console.log('üîß Starting automatic prompt correction...')
    
    let correctedPrompt = originalPrompt
    const corrections: Correction[] = []
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (this.hasLanguageIssues(qualityIssues)) {
      const languageCorrection = this.applyLanguageEnforcement(correctedPrompt, languageContext.responseLanguage)
      correctedPrompt = languageCorrection.text
      corrections.push({
        type: 'language_enforcement',
        description: `Added strict ${languageContext.responseLanguage} language enforcement`,
        applied: languageCorrection.applied,
        impact: 'high'
      })
    }

    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–Ω–æ—Ç–æ–π
    if (this.hasCompletenessIssues(qualityIssues)) {
      const completenessCorrection = this.applyCompletenessEnforcement(correctedPrompt, languageContext.responseLanguage)
      correctedPrompt = completenessCorrection.text
      corrections.push({
        type: 'completeness_fix',
        description: 'Added completeness and anti-truncation instructions',
        applied: completenessCorrection.applied,
        impact: 'high'
      })
    }

    // 3. –£–ª—É—á—à–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (this.hasStructureIssues(qualityIssues)) {
      const structureCorrection = this.applyStructureImprovement(correctedPrompt, languageContext.responseLanguage)
      correctedPrompt = structureCorrection.text
      corrections.push({
        type: 'structure_improvement',
        description: 'Enhanced response structure requirements',
        applied: structureCorrection.applied,
        impact: 'medium'
      })
    }

    // 4. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokenCorrection = this.optimizeTokenUsage(correctedPrompt)
    correctedPrompt = tokenCorrection.text
    if (tokenCorrection.applied) {
      corrections.push({
        type: 'token_optimization',
        description: 'Optimized prompt for better token efficiency',
        applied: true,
        impact: 'low'
      })
    }

    // –ò–∑–º–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    const originalQuality = ResponseQualityAnalyzer.measureQuality(originalPrompt, languageContext.responseLanguage as 'ru' | 'en')
    const correctedQuality = ResponseQualityAnalyzer.measureQuality(correctedPrompt, languageContext.responseLanguage as 'ru' | 'en')
    const qualityImprovement = correctedQuality.qualityScore - originalQuality.qualityScore

    const result: CorrectionResult = {
      originalText: originalPrompt,
      correctedText: correctedPrompt,
      corrections: corrections.filter(c => c.applied),
      qualityImprovement,
      success: corrections.some(c => c.applied)
    }

    console.log(`üîß Correction completed. Applied ${result.corrections.length} corrections, quality improvement: ${qualityImprovement}`)
    
    return result
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —è–∑—ã–∫–∞
   */
  private static applyLanguageEnforcement(
    prompt: string, 
    language: string
  ): { text: string; applied: boolean } {
    const enforcementInstructions = {
      'ru': `

**üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –Ø–ó–´–ö–û–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:**
- –û—Ç–≤–µ—á–∞–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –í–°–ï —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (–∫—Ä–æ–º–µ UX, UI, API)
- –ù–ï —Å–º–µ—à–∏–≤–∞–π —è–∑—ã–∫–∏ –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ - –ò–°–ü–†–ê–í–¨ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
- –ü—Ä–æ–≤–µ—Ä—å –ö–ê–ñ–î–û–ï —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞`,

      'en': `

**üö® CRITICALLY IMPORTANT - LANGUAGE REQUIREMENTS:**
- Respond EXCLUSIVELY in English language
- ALL analysis sections must be in English
- DO NOT use Russian words or phrases
- DO NOT mix languages in the response
- If you see Russian text in your response - FIX it to English
- Check EVERY word before sending the response`
    }

    const instruction = enforcementInstructions[language as keyof typeof enforcementInstructions]
    if (!instruction) return { text: prompt, applied: false }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (prompt.includes('–Ø–ó–´–ö–û–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø') || prompt.includes('LANGUAGE REQUIREMENTS')) {
      return { text: prompt, applied: false }
    }

    return {
      text: prompt + instruction,
      applied: true
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–ª–Ω–æ—Ç–µ –æ—Ç–≤–µ—Ç–∞
   */
  private static applyCompletenessEnforcement(
    prompt: string,
    language: string
  ): { text: string; applied: boolean } {
    const completenessInstructions = {
      'ru': `

**üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–û–õ–ù–û–¢–ï –û–¢–í–ï–¢–ê:**
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ü–û–õ–ù–´–ô –∏ –î–ï–¢–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ (–º–∏–Ω–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)
- –ù–ï —Å–æ–∫—Ä–∞—â–∞–π —Ä–∞–∑–¥–µ–ª—ã –∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "..." –∏–ª–∏ "–∏ —Ç.–¥."
- –í–∫–ª—é—á–∏ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
- –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
- –ù–ï –æ–±—Ä—ã–≤–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ - –¥–æ–≤–µ–¥–∏ –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞
- –ï—Å–ª–∏ –º–µ—Å—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - —Å–æ–∫—Ä–∞—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã, –Ω–æ –ù–ï –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑`,

      'en': `

**üìã RESPONSE COMPLETENESS REQUIREMENTS:**
- Provide COMPLETE and DETAILED analysis (minimum 2000 characters)
- DO NOT truncate sections or use "..." or "etc."
- Include ALL required sections completely
- End each section with complete sentences
- DO NOT cut off response mid-sentence - finish logically
- If space is limited - reduce examples, but NOT main analysis`
    }

    const instruction = completenessInstructions[language as keyof typeof completenessInstructions]
    if (!instruction) return { text: prompt, applied: false }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (prompt.includes('–ü–û–õ–ù–û–¢–ï –û–¢–í–ï–¢–ê') || prompt.includes('COMPLETENESS REQUIREMENTS')) {
      return { text: prompt, applied: false }
    }

    return {
      text: prompt + instruction,
      applied: true
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
   */
  private static applyStructureImprovement(
    prompt: string,
    language: string
  ): { text: string; applied: boolean } {
    const structureInstructions = {
      'ru': `

**üèóÔ∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¢–†–£–ö–¢–£–†–ï:**
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
- –ü—Ä–∏–º–µ–Ω—è–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ`,

      'en': `

**üèóÔ∏è STRUCTURE REQUIREMENTS:**
- Use clear headings for each section
- Apply numbered lists for recommendations
- Highlight key points with bold formatting
- Structure information logically and sequentially`
    }

    const instruction = structureInstructions[language as keyof typeof structureInstructions]
    if (!instruction) return { text: prompt, applied: false }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (prompt.includes('–°–¢–†–£–ö–¢–£–†–ï') || prompt.includes('STRUCTURE REQUIREMENTS')) {
      return { text: prompt, applied: false }
    }

    return {
      text: prompt + instruction,
      applied: true
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private static optimizeTokenUsage(prompt: string): { text: string; applied: boolean } {
    let optimizedPrompt = prompt
    let applied = false

    // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    const cleanedPrompt = prompt.replace(/\n{3,}/g, '\n\n').replace(/\s{2,}/g, ' ').trim()
    if (cleanedPrompt !== prompt) {
      optimizedPrompt = cleanedPrompt
      applied = true
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const lines = optimizedPrompt.split('\n')
    const uniqueLines = lines.filter((line, index) => {
      const trimmedLine = line.trim()
      if (trimmedLine === '') return true
      return lines.findIndex(l => l.trim() === trimmedLine) === index
    })

    if (uniqueLines.length !== lines.length) {
      optimizedPrompt = uniqueLines.join('\n')
      applied = true
    }

    return { text: optimizedPrompt, applied }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
   */
  private static hasLanguageIssues(issues: string[]): boolean {
    return issues.some(issue => 
      issue.toLowerCase().includes('language') ||
      issue.toLowerCase().includes('—è–∑—ã–∫') ||
      issue.toLowerCase().includes('mismatch')
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª–Ω–æ—Ç–æ–π
   */
  private static hasCompletenessIssues(issues: string[]): boolean {
    return issues.some(issue => 
      issue.toLowerCase().includes('truncated') ||
      issue.toLowerCase().includes('–æ–±—Ä–µ–∑–∞–Ω') ||
      issue.toLowerCase().includes('incomplete') ||
      issue.toLowerCase().includes('short')
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   */
  private static hasStructureIssues(issues: string[]): boolean {
    return issues.some(issue => 
      issue.toLowerCase().includes('structure') ||
      issue.toLowerCase().includes('—Å—Ç—Ä—É–∫—Ç—É—Ä') ||
      issue.toLowerCase().includes('format')
    )
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
   */
  static generateCorrectionReport(result: CorrectionResult): string {
    const lines = [
      'Prompt Correction Report',
      '='.repeat(30),
      `Success: ${result.success ? '‚úÖ' : '‚ùå'}`,
      `Quality Improvement: ${result.qualityImprovement > 0 ? '+' : ''}${result.qualityImprovement}`,
      `Corrections Applied: ${result.corrections.length}`,
      ''
    ]

    if (result.corrections.length > 0) {
      lines.push('Applied Corrections:')
      result.corrections.forEach((correction, index) => {
        const impact = correction.impact === 'high' ? 'üî¥' : correction.impact === 'medium' ? 'üü°' : 'üü¢'
        lines.push(`  ${index + 1}. ${impact} ${correction.description}`)
      })
      lines.push('')
    }

    lines.push(`Original Length: ${result.originalText.length} chars`)
    lines.push(`Corrected Length: ${result.correctedText.length} chars`)
    lines.push(`Length Change: ${result.correctedText.length - result.originalText.length} chars`)

    return lines.join('\n')
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
   */
  static applyEmergencyCorrection(
    prompt: string,
    language: string,
    criticalIssues: string[]
  ): string {
    let correctedPrompt = prompt

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
    if (criticalIssues.some(issue => issue.includes('language'))) {
      const emergencyLanguageInstruction = language === 'ru' 
        ? '\n\nüö® –≠–ö–°–¢–†–ï–ù–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –ü—Ä–æ–≤–µ—Ä—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ!'
        : '\n\nüö® EMERGENCY: Respond ONLY in English! Check every word!'
      
      correctedPrompt += emergencyLanguageInstruction
    }

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
    if (criticalIssues.some(issue => issue.includes('truncated'))) {
      const emergencyCompletenessInstruction = language === 'ru'
        ? '\n\nüö® –≠–ö–°–¢–†–ï–ù–ù–û: –ù–ï –æ–±—Ä—ã–≤–∞–π –æ—Ç–≤–µ—Ç! –î–æ–≤–µ–¥–∏ –¥–æ –∫–æ–Ω—Ü–∞!'
        : '\n\nüö® EMERGENCY: DO NOT truncate response! Complete it fully!'
      
      correctedPrompt += emergencyCompletenessInstruction
    }

    return correctedPrompt
  }
}