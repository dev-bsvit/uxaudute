/**
 * AI Provider Selection with Fallback System
 * –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:
 * - OpenAI (–æ—Å–Ω–æ–≤–Ω–æ–π)
 * - OpenRouter (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 * 1. –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
 * 2. –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
 * 3. –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å fallback –Ω–∞ OpenAI
 */

import { openai } from './openai'
import { createOpenRouterClient, getOpenRouterModel, isOpenRouterAvailable } from './openrouter'

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
export type AIProvider = 'openai' | 'openrouter'
export type OpenRouterModel = 'claude' | 'sonoma' | 'gpt4' | 'deepseek' | 'default'

export interface AIProviderConfig {
  provider: AIProvider
  model: string
  client: any
}

export interface AIRequestOptions {
  temperature?: number
  max_tokens?: number
  stream?: boolean
  provider?: AIProvider
  openrouterModel?: OpenRouterModel
}

export interface AIResponse {
  success: boolean
  content: string
  provider: AIProvider
  model: string
  error?: string
  usage?: {
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getProviderPriority = (): AIProvider[] => {
  const priority = process.env.AI_PROVIDER_PRIORITY || 'openai,openrouter'
  return priority.split(',').map(p => p.trim()) as AIProvider[]
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const createProviderConfig = (provider: AIProvider, openrouterModel: OpenRouterModel = 'default'): AIProviderConfig | null => {
  switch (provider) {
    case 'openai':
      return {
        provider: 'openai',
        model: 'gpt-4o',
        client: openai
      }
    
    case 'openrouter':
      if (!isOpenRouterAvailable()) {
        console.log('OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
        return null
      }
      const openrouterClient = createOpenRouterClient()
      if (!openrouterClient) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å OpenRouter –∫–ª–∏–µ–Ω—Ç')
        return null
      }
      return {
        provider: 'openrouter',
        model: getOpenRouterModel(openrouterModel),
        client: openrouterClient
      }
    
    default:
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`)
      return null
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å fallback
export const executeAIRequest = async (
  messages: Array<{ role: string; content: string | any[] }>,
  options: AIRequestOptions = {}
): Promise<AIResponse> => {
  const { 
    temperature = 0.7, 
    max_tokens = 8000, 
    stream = false,
    provider,
    openrouterModel = 'default'
  } = options

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (provider) {
    console.log(`üéØ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${provider}, –º–æ–¥–µ–ª—å: ${openrouterModel}`)
    const config = createProviderConfig(provider, openrouterModel)
    
    console.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:`, config)
    
    if (!config) {
      console.error(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`)
      return {
        success: false,
        content: '',
        provider: provider,
        model: 'unknown',
        error: `–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`
      }
    }

    try {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider} (–º–æ–¥–µ–ª—å: ${config.model})`)
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è:`, JSON.stringify(messages, null, 2))
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Sonoma Sky Alpha
      const isSonoma = config.model.includes('sonoma-sky-alpha')
      console.log(`üéØ –≠—Ç–æ Sonoma Sky Alpha: ${isSonoma}`)
      
      const requestParams = {
        model: config.model,
        messages: messages as any,
        temperature: isSonoma ? 0.8 : temperature,
        max_tokens: isSonoma ? Math.max(max_tokens, 200) : max_tokens,
        stream,
        response_format: { type: "json_object" } // –í–∫–ª—é—á–∞–µ–º JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
      }
      
      console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(requestParams, null, 2))
      
      const completion = await config.client.chat.completions.create(requestParams)
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${provider}:`, JSON.stringify(completion, null, 2))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (completion.error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç ${provider}:`, completion.error)
        return {
          success: false,
          content: '',
          provider: config.provider,
          model: config.model,
          error: `–û—à–∏–±–∫–∞ API: ${completion.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        }
      }

      const content = completion.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`)
      
      return {
        success: true,
        content,
        provider: config.provider,
        model: config.model,
        usage: completion.usage
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}:`, error)
      return {
        success: false,
        content: '',
        provider: config.provider,
        model: config.model,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–∏—Å—Ç–µ–º—É
  const providers = getProviderPriority()

  // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  for (const providerName of providers) {
    const config = createProviderConfig(providerName, openrouterModel)
    
    if (!config) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName}: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`)
      continue
    }

    try {
      console.log(`–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${providerName} (–º–æ–¥–µ–ª—å: ${config.model})`)
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Sonoma Sky Alpha
      const isSonoma = config.model.includes('sonoma-sky-alpha')
      
      const completion = await config.client.chat.completions.create({
        model: config.model,
        messages: messages as any,
        temperature: isSonoma ? 0.8 : temperature,
        max_tokens: isSonoma ? Math.max(max_tokens, 200) : max_tokens,
        stream,
        response_format: { type: "json_object" } // –í–∫–ª—é—á–∞–µ–º JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
      })

      const content = completion.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${providerName}`)
      
      return {
        success: true,
        content,
        provider: config.provider,
        model: config.model,
        usage: completion.usage
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${providerName}:`, error)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (providerName === providers[providers.length - 1]) {
        return {
          success: false,
          content: '',
          provider: config.provider,
          model: config.model,
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      }
      
      // –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä...`)
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  return {
    success: false,
    content: '',
    provider: 'openai',
    model: 'gpt-4o',
    error: '–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
  }
}

// –¢–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
export const testAllProviders = async (): Promise<{
  [key in AIProvider]: {
    available: boolean
    working: boolean
    message: string
    model?: string
  }
}> => {
  const results = {
    openai: {
      available: true,
      working: false,
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...',
      model: 'gpt-4o'
    },
    openrouter: {
      available: isOpenRouterAvailable(),
      working: false,
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...',
      model: getOpenRouterModel()
    }
  }

  // –¢–µ—Å—Ç OpenAI
  try {
    const openaiTest = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: '–¢–µ—Å—Ç OpenAI' }],
      max_tokens: 10
    })
    results.openai.working = true
    results.openai.message = 'OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç'
  } catch (error) {
    results.openai.working = false
    results.openai.message = `OpenAI –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown'}`
  }

  // –¢–µ—Å—Ç OpenRouter
  if (results.openrouter.available) {
    try {
      const openrouterClient = createOpenRouterClient()
      if (openrouterClient) {
        const openrouterTest = await openrouterClient.chat.completions.create({
          model: getOpenRouterModel(),
          messages: [{ role: 'user', content: '–¢–µ—Å—Ç OpenRouter' }],
          max_tokens: 10
        })
        results.openrouter.working = true
        results.openrouter.message = 'OpenRouter —Ä–∞–±–æ—Ç–∞–µ—Ç'
      } else {
        results.openrouter.message = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
      }
    } catch (error) {
      results.openrouter.working = false
      results.openrouter.message = `OpenRouter –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : 'Unknown'}`
    }
  } else {
    results.openrouter.message = 'OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
  }

  return results
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
export const getProvidersInfo = () => {
  return {
    priority: getProviderPriority(),
    openai: {
      available: true,
      model: 'gpt-4o'
    },
    openrouter: {
      available: isOpenRouterAvailable(),
      model: getOpenRouterModel()
    }
  }
}
