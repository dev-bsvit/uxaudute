/**
 * Middleware –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–æ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–∞—Ö
 */

import { NextRequest, NextResponse } from 'next/server'
import { LanguageManager, LanguageContext } from './language-manager'
import { ResponseQualityAnalyzer } from './quality-metrics'

export interface LanguageConsistencyConfig {
  enforceLanguage: boolean
  logInconsistencies: boolean
  rejectInconsistentResponses: boolean
  minQualityScore: number
}

export interface LanguageConsistencyResult {
  isConsistent: boolean
  languageContext: LanguageContext
  qualityScore: number
  issues: string[]
  correctionApplied: boolean
}

export class LanguageConsistencyMiddleware {
  private static readonly DEFAULT_CONFIG: LanguageConsistencyConfig = {
    enforceLanguage: true,
    logInconsistencies: true,
    rejectInconsistentResponses: false, // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º, –∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
    minQualityScore: 70
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  static async processRequest(
    request: NextRequest,
    config: Partial<LanguageConsistencyConfig> = {}
  ): Promise<{
    languageContext: LanguageContext
    enhancedRequest: NextRequest
  }> {
    const finalConfig = { ...this.DEFAULT_CONFIG, ...config }
    
    console.log('üåê Processing request for language consistency...')
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const languageContext = await LanguageManager.determineAnalysisLanguage(request)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (finalConfig.logInconsistencies) {
      LanguageManager.logLanguageContext(languageContext, 'Request Processing')
    }

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const enhancedRequest = this.enhanceRequestWithLanguage(request, languageContext)

    return {
      languageContext,
      enhancedRequest
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —è–∑—ã–∫–æ–≤—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
   */
  static async validateResponse(
    response: string,
    languageContext: LanguageContext,
    config: Partial<LanguageConsistencyConfig> = {}
  ): Promise<LanguageConsistencyResult> {
    const finalConfig = { ...this.DEFAULT_CONFIG, ...config }
    
    console.log('üîç Validating response language consistency...')
    
    // –ò–∑–º–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    const qualityMetrics = ResponseQualityAnalyzer.measureQuality(
      response,
      languageContext.responseLanguage as 'ru' | 'en'
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const languageValidation = LanguageManager.validateLanguageConsistency(
      '',
      response,
      languageContext.responseLanguage
    )

    const issues: string[] = []
    let correctionApplied = false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    if (qualityMetrics.qualityScore < finalConfig.minQualityScore) {
      issues.push(`Quality score ${qualityMetrics.qualityScore} below minimum ${finalConfig.minQualityScore}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if (!languageValidation.isConsistent) {
      issues.push(...languageValidation.issues)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
    if (qualityMetrics.isTruncated) {
      issues.push('Response appears to be truncated')
    }

    const result: LanguageConsistencyResult = {
      isConsistent: issues.length === 0,
      languageContext,
      qualityScore: qualityMetrics.qualityScore,
      issues,
      correctionApplied
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    if (finalConfig.logInconsistencies && issues.length > 0) {
      console.warn('‚ö†Ô∏è Language consistency issues detected:', issues)
      this.logInconsistency(result)
    }

    return result
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ø—Ä–æ–º–ø—Ç–µ
   */
  static correctPromptLanguage(
    prompt: string,
    targetLanguage: string,
    issues: string[]
  ): { correctedPrompt: string; correctionApplied: boolean } {
    let correctedPrompt = prompt
    let correctionApplied = false

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —è–∑—ã–∫–æ–º
    if (issues.some(issue => issue.includes('language') || issue.includes('—è–∑—ã–∫'))) {
      const languageEnforcement = this.getLanguageEnforcementInstruction(targetLanguage)
      correctedPrompt = `${prompt}\n\n${languageEnforcement}`
      correctionApplied = true
      
      console.log('üîß Applied language enforcement to prompt')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ –æ–±—Ä–µ–∑–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–Ω–æ—Ç–æ–π
    if (issues.some(issue => issue.includes('truncated') || issue.includes('–æ–±—Ä–µ–∑–∞–Ω'))) {
      const completenessInstruction = this.getCompletenessInstruction(targetLanguage)
      correctedPrompt = `${correctedPrompt}\n\n${completenessInstruction}`
      correctionApplied = true
      
      console.log('üîß Applied completeness instruction to prompt')
    }

    return { correctedPrompt, correctionApplied }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  static generateConsistencyReport(
    results: LanguageConsistencyResult[],
    timeframe: string = '24h'
  ): string {
    const totalRequests = results.length
    const consistentRequests = results.filter(r => r.isConsistent).length
    const averageQuality = results.reduce((sum, r) => sum + r.qualityScore, 0) / totalRequests
    const commonIssues = this.analyzeCommonIssues(results)

    const lines = [
      `Language Consistency Report (${timeframe})`,
      '='.repeat(50),
      `Total Requests: ${totalRequests}`,
      `Consistent Requests: ${consistentRequests} (${Math.round(consistentRequests / totalRequests * 100)}%)`,
      `Average Quality Score: ${Math.round(averageQuality)}`,
      '',
      'Common Issues:',
      ...commonIssues.map(issue => `  - ${issue.issue}: ${issue.count} times`),
      '',
      'Language Distribution:',
      ...this.getLanguageDistribution(results).map(lang => `  - ${lang.language}: ${lang.count} requests`),
      ''
    ]

    return lines.join('\n')
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É
   */
  private static enhanceRequestWithLanguage(
    request: NextRequest,
    languageContext: LanguageContext
  ): NextRequest {
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = new Headers(request.headers)
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers.set('X-Analysis-Language', languageContext.promptLanguage)
    headers.set('X-Response-Language', languageContext.responseLanguage)
    headers.set('X-Language-Source', languageContext.source)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    return new NextRequest(request.url, {
      method: request.method,
      headers,
      body: request.body
    })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —è–∑—ã–∫–∞
   */
  private static getLanguageEnforcementInstruction(language: string): string {
    const instructions = {
      'ru': `**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –Ø–ó–´–ö–û–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:**
- –û—Ç–≤–µ—á–∞–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –ù–ï —Å–º–µ—à–∏–≤–∞–π —è–∑—ã–∫–∏ –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
- –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π`,

      'en': `**CRITICALLY IMPORTANT - LANGUAGE REQUIREMENTS:**
- Respond EXCLUSIVELY in English
- All analysis sections must be in English
- DO NOT use Russian words or phrases
- DO NOT mix languages in the response
- Verify all text is in English before sending`
    }

    return instructions[language as keyof typeof instructions] || instructions['en']
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç–≤–µ—Ç–∞
   */
  private static getCompletenessInstruction(language: string): string {
    const instructions = {
      'ru': `**–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–û–õ–ù–û–¢–ï –û–¢–í–ï–¢–ê:**
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ü–û–õ–ù–´–ô –∏ –î–ï–¢–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑
- –ù–ï —Å–æ–∫—Ä–∞—â–∞–π —Ä–∞–∑–¥–µ–ª—ã –∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "..."
- –í–∫–ª—é—á–∏ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
- –ó–∞–≤–µ—Ä—à–∞–π –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–ª–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 1500 —Å–∏–º–≤–æ–ª–æ–≤`,

      'en': `**RESPONSE COMPLETENESS REQUIREMENTS:**
- Provide COMPLETE and DETAILED analysis
- DO NOT truncate sections or use "..."
- Include ALL required sections
- End each section with complete sentences
- Minimum response length: 1500 characters`
    }

    return instructions[language as keyof typeof instructions] || instructions['en']
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π —è–∑—ã–∫–æ–≤–æ–π –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
   */
  private static logInconsistency(result: LanguageConsistencyResult): void {
    const logData = {
      timestamp: new Date().toISOString(),
      isConsistent: result.isConsistent,
      qualityScore: result.qualityScore,
      issues: result.issues,
      languageContext: result.languageContext,
      correctionApplied: result.correctionApplied
    }

    console.warn('‚ö†Ô∏è Language Inconsistency Log:', JSON.stringify(logData, null, 2))
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  private static analyzeCommonIssues(results: LanguageConsistencyResult[]): Array<{issue: string, count: number}> {
    const issueCount: Record<string, number> = {}

    results.forEach(result => {
      result.issues.forEach(issue => {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        const normalizedIssue = this.normalizeIssue(issue)
        issueCount[normalizedIssue] = (issueCount[normalizedIssue] || 0) + 1
      })
    })

    return Object.entries(issueCount)
      .map(([issue, count]) => ({ issue, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5) // –¢–æ–ø 5 –ø—Ä–æ–±–ª–µ–º
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  private static normalizeIssue(issue: string): string {
    if (issue.includes('language') || issue.includes('—è–∑—ã–∫')) {
      return 'Language mismatch'
    }
    if (issue.includes('truncated') || issue.includes('–æ–±—Ä–µ–∑–∞–Ω')) {
      return 'Response truncated'
    }
    if (issue.includes('quality') || issue.includes('–∫–∞—á–µ—Å—Ç–≤–æ')) {
      return 'Low quality score'
    }
    if (issue.includes('short') || issue.includes('–∫–æ—Ä–æ—Ç–∫–∏–π')) {
      return 'Response too short'
    }
    return issue
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º
   */
  private static getLanguageDistribution(results: LanguageConsistencyResult[]): Array<{language: string, count: number}> {
    const langCount: Record<string, number> = {}

    results.forEach(result => {
      const lang = result.languageContext.responseLanguage
      langCount[lang] = (langCount[lang] || 0) + 1
    })

    return Object.entries(langCount)
      .map(([language, count]) => ({ language, count }))
      .sort((a, b) => b.count - a.count)
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç middleware —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Next.js
   */
  static createMiddleware(config: Partial<LanguageConsistencyConfig> = {}) {
    return async (request: NextRequest) => {
      const { languageContext, enhancedRequest } = await this.processRequest(request, config)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API routes
      enhancedRequest.headers.set('X-Language-Context', JSON.stringify(languageContext))
      
      return enhancedRequest
    }
  }
}