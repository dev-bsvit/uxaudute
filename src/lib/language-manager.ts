/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞ –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ
 */

import { languageDetector } from './i18n/language-detector'
import { promptService } from './i18n/prompt-service'
import { PromptType } from './i18n/types'

export interface LanguageContext {
  requestLanguage: string
  detectedLanguage: string
  promptLanguage: string
  responseLanguage: string
  isConsistent: boolean
  source: 'user-preference' | 'browser' | 'default' | 'request-header'
}

export class LanguageManager {
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  static async determineAnalysisLanguage(request: Request): Promise<LanguageContext> {
    console.log('üåê Determining analysis language...')

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Accept-Language
    const acceptLanguage = request.headers.get('accept-language')
    console.log('üîç Accept-Language header:', acceptLanguage)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Language
    const contentLanguage = request.headers.get('content-language')
    console.log('üîç Content-Language header:', contentLanguage)

    // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    const detectionResult = await languageDetector.detectLanguage()
    console.log('üîç Language detector result:', detectionResult)

    // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫
    let finalLanguage = detectionResult.language
    let source = detectionResult.source

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∑–∞–ø—Ä–æ—Å–∞
    if (contentLanguage && this.isSupportedLanguage(contentLanguage)) {
      finalLanguage = contentLanguage
      source = 'request-header'
      console.log('‚úÖ Using Content-Language header:', finalLanguage)
    } else if (acceptLanguage) {
      const parsedLanguage = this.parseAcceptLanguage(acceptLanguage)
      if (parsedLanguage && this.isSupportedLanguage(parsedLanguage)) {
        finalLanguage = parsedLanguage
        source = 'request-header'
        console.log('‚úÖ Using Accept-Language header:', finalLanguage)
      }
    }

    const context: LanguageContext = {
      requestLanguage: contentLanguage || acceptLanguage || 'auto',
      detectedLanguage: detectionResult.language,
      promptLanguage: finalLanguage,
      responseLanguage: finalLanguage,
      isConsistent: true,
      source
    }

    console.log('üåê Final language context:', context)
    return context
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  static async loadPromptForLanguage(
    promptType: PromptType,
    languageContext: LanguageContext
  ): Promise<string> {
    console.log(`üîç Loading prompt ${promptType} for language: ${languageContext.promptLanguage}`)

    try {
      const prompt = await promptService.loadPrompt(promptType, languageContext.promptLanguage)
      console.log(`‚úÖ Prompt loaded successfully (${prompt.length} chars)`)
      return prompt
    } catch (error) {
      console.error(`‚ùå Failed to load prompt ${promptType} for ${languageContext.promptLanguage}:`, error)
      
      // Fallback –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –µ—Å–ª–∏ –Ω–µ —Ä—É—Å—Å–∫–∏–π
      if (languageContext.promptLanguage !== 'en') {
        console.log('üîÑ Trying fallback to English...')
        try {
          const fallbackPrompt = await promptService.loadPrompt(promptType, 'en')
          console.log('‚úÖ Fallback prompt loaded')
          return fallbackPrompt
        } catch (fallbackError) {
          console.error('‚ùå Fallback also failed:', fallbackError)
        }
      }

      throw error
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ
   */
  static validateLanguageConsistency(
    input: string,
    output: string,
    expectedLanguage: string
  ): { isConsistent: boolean; issues: string[] } {
    const issues: string[] = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    const outputLanguage = this.detectTextLanguage(output)
    if (outputLanguage !== expectedLanguage && outputLanguage !== 'unknown') {
      issues.push(`Response language (${outputLanguage}) doesn't match expected (${expectedLanguage})`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä–µ–∑–∞–Ω
    if (this.isResponseTruncated(output)) {
      issues.push('Response appears to be truncated')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if (output.length < 500) {
      issues.push('Response is too short, may be incomplete')
    }

    return {
      isConsistent: issues.length === 0,
      issues
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  static enforceResponseLanguage(prompt: string, language: string): string {
    const languageInstructions = {
      'ru': '\n\n**–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–µ—Å—å –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º.**',
      'en': '\n\n**IMPORTANT: Respond ONLY in English. All analysis must be in English.**'
    }

    const instruction = languageInstructions[language as keyof typeof languageInstructions]
    if (!instruction) {
      console.warn(`No language instruction for: ${language}`)
      return prompt
    }

    return prompt + instruction
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
   */
  static createLanguageContextFromParams(params: {
    language?: string
    acceptLanguage?: string
    contentLanguage?: string
  }): LanguageContext {
    const language = params.language || 
                    params.contentLanguage || 
                    this.parseAcceptLanguage(params.acceptLanguage || '') ||
                    'ru'

    return {
      requestLanguage: params.language || 'auto',
      detectedLanguage: language,
      promptLanguage: language,
      responseLanguage: language,
      isConsistent: true,
      source: params.language ? 'user-preference' : 'default'
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Accept-Language
   */
  private static parseAcceptLanguage(acceptLanguage: string): string | null {
    if (!acceptLanguage) return null

    // –ü–∞—Ä—Å–∏–º "ru-RU,ru;q=0.9,en;q=0.8" -> ["ru", "en"]
    const languages = acceptLanguage
      .split(',')
      .map(lang => lang.split(';')[0].trim())
      .map(lang => lang.split('-')[0].toLowerCase())

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
    for (const lang of languages) {
      if (this.isSupportedLanguage(lang)) {
        return lang
      }
    }

    return null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
   */
  private static isSupportedLanguage(language: string): boolean {
    return ['ru', 'en'].includes(language.toLowerCase())
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
   */
  private static detectTextLanguage(text: string): 'ru' | 'en' | 'unknown' {
    if (!text || text.length < 10) return 'unknown'

    const russianChars = (text.match(/[–∞-—è—ë]/gi) || []).length
    const englishChars = (text.match(/[a-z]/gi) || []).length
    const totalChars = russianChars + englishChars

    if (totalChars === 0) return 'unknown'

    const russianRatio = russianChars / totalChars

    if (russianRatio > 0.6) return 'ru'
    if (russianRatio < 0.4) return 'en'
    return 'unknown'
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
   */
  private static isResponseTruncated(response: string): boolean {
    if (!response) return true

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const endsCorrectly = /[.!?]\s*$/.test(response.trim())
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—Ä–µ–∑–∞–Ω–∏—è
    const hasTruncationMarkers = response.includes('...') || 
                                response.includes('‚Ä¶') ||
                                response.endsWith('..') ||
                                /[–∞-—èa-z]\s*$/i.test(response.trim())

    return !endsCorrectly || hasTruncationMarkers
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static logLanguageContext(context: LanguageContext, stage: string): void {
    console.log(`üåê Language Context [${stage}]:`, {
      requestLanguage: context.requestLanguage,
      detectedLanguage: context.detectedLanguage,
      promptLanguage: context.promptLanguage,
      responseLanguage: context.responseLanguage,
      isConsistent: context.isConsistent,
      source: context.source
    })
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
   */
  static generateLanguageReport(context: LanguageContext, response?: string): string {
    const lines = [
      'Language Analysis Report',
      '========================',
      `Request Language: ${context.requestLanguage}`,
      `Detected Language: ${context.detectedLanguage}`,
      `Prompt Language: ${context.promptLanguage}`,
      `Response Language: ${context.responseLanguage}`,
      `Is Consistent: ${context.isConsistent ? '‚úÖ' : '‚ùå'}`,
      `Source: ${context.source}`,
      ''
    ]

    if (response) {
      const validation = this.validateLanguageConsistency(
        '', 
        response, 
        context.responseLanguage
      )

      lines.push('Response Validation:')
      lines.push(`Consistent: ${validation.isConsistent ? '‚úÖ' : '‚ùå'}`)
      
      if (validation.issues.length > 0) {
        lines.push('Issues:')
        validation.issues.forEach(issue => {
          lines.push(`  - ${issue}`)
        })
      }
    }

    return lines.join('\n')
  }
}