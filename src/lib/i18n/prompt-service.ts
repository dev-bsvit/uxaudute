import { PromptType, FALLBACK_LANGUAGE } from './types'
import { errorHandler, ErrorType } from './error-handler'

class PromptService {
  private prompts: Record<string, Record<PromptType, string>> = {}
  private loadingPromises: Record<string, Promise<void> | undefined> = {}

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —è–∑—ã–∫–∞
   */
  async loadPrompt(promptType: PromptType, language: string): Promise<string> {
    try {
      console.log(`üîç Loading prompt: ${promptType} for language: ${language}`)

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —è–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      await this.ensurePromptsLoaded(language)

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –Ω–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º —è–∑—ã–∫–µ
      const prompt = this.prompts[language]?.[promptType]
      if (prompt) {
        return prompt
      }

      // Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫
      if (language !== FALLBACK_LANGUAGE) {
        console.warn(`Prompt ${promptType} not found for ${language}, trying fallback`)
        await this.ensurePromptsLoaded(FALLBACK_LANGUAGE)
        const fallbackPrompt = this.prompts[FALLBACK_LANGUAGE]?.[promptType]
        if (fallbackPrompt) {
          errorHandler.createError(
            ErrorType.PROMPT_NOT_FOUND,
            { promptType, language }
          )
          return fallbackPrompt
        }
      }

      throw new Error(`Prompt ${promptType} not found for any language`)
    } catch (error) {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      console.warn(`Using basic prompt for ${promptType} due to error:`, error)
      errorHandler.createError(
        ErrorType.PROMPT_LOADING_FAILED,
        { promptType, language },
        error as Error
      )
      return this.getBasicPrompt(promptType)
    }
  }

  /**
   * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —è–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
   */
  private async ensurePromptsLoaded(language: string): Promise<void> {
    // –í—Ä–µ–º–µ–Ω–Ω–æ: –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (language === 'ru') {
      console.log('üîÑ Force reloading Russian prompts for debugging')
      delete this.prompts[language]
      delete this.loadingPromises[language]
    }

    if (this.prompts[language]) {
      console.log(`‚úÖ Prompts already loaded for ${language}`)
      return
    }

    const existingPromise = this.loadingPromises[language]
    if (existingPromise) {
      await existingPromise
      return
    }

    this.loadingPromises[language] = this.loadPromptsForLanguage(language)
    await this.loadingPromises[language]
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —è–∑—ã–∫–∞
   */
  private async loadPromptsForLanguage(language: string): Promise<void> {
    const promptTypes = Object.values(PromptType)
    const prompts: Record<PromptType, string> = {} as Record<PromptType, string>

    for (const promptType of promptTypes) {
      const prompt = await errorHandler.handleErrorWithFallback(
        async () => {
          return await this.fetchPromptFile(promptType, language)
        },
        () => {
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
          console.warn(`Using basic prompt for ${promptType} in ${language}`)
          return this.getBasicPrompt(promptType)
        },
        ErrorType.PROMPT_LOADING_FAILED,
        { promptType, language }
      )

      prompts[promptType] = prompt
    }

    this.prompts[language] = prompts
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Å–µ—Ä–≤–µ—Ä, –∏ –∫–ª–∏–µ–Ω—Ç)
   */
  private async fetchPromptFile(promptType: PromptType, language: string): Promise<string> {
    const fileName = this.getPromptFileName(promptType)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (typeof window === 'undefined') {
      // –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fs.readFileSync
      const filePath = this.getPromptFilePath(fileName, language)
      console.log(`üìù Loading prompt file (server): ${filePath}`)

      try {
        const { readFileSync } = await import('fs')
        const content = readFileSync(filePath, 'utf-8')

        console.log(`‚úÖ Prompt loaded successfully: ${filePath} (${content.length} chars)`)
        console.log(`üìÑ Prompt preview: ${content.substring(0, 200)}...`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (promptType === PromptType.JSON_STRUCTURED && content.includes('screenDescription')) {
          console.log(`‚úÖ Detailed JSON prompt loaded with screenDescription structure`)
        } else if (promptType === PromptType.JSON_STRUCTURED) {
          console.warn(`‚ö†Ô∏è JSON prompt loaded but doesn't contain screenDescription - might be wrong file`)
        }

        return content
      } catch (error) {
        console.error(`‚ùå Failed to load prompt file: ${filePath}`)
        console.error(`‚ùå Error:`, error)
        throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è fallback
      }
    } else {
      // –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch
      const url = `/prompts/${language}/${fileName}`
      console.log(`üìù Loading prompt file (client): ${url}`)

      const response = await fetch(url)

      if (!response.ok) {
        console.error(`‚ùå Failed to load prompt: ${url} - ${response.status}: ${response.statusText}`)
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const content = await response.text()
      console.log(`‚úÖ Prompt loaded successfully: ${url} (${content.length} chars)`)
      console.log(`üìÑ Prompt preview: ${content.substring(0, 200)}...`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (promptType === PromptType.JSON_STRUCTURED && content.includes('screenDescription')) {
        console.log(`‚úÖ Detailed JSON prompt loaded with screenDescription structure`)
      } else if (promptType === PromptType.JSON_STRUCTURED) {
        console.warn(`‚ö†Ô∏è JSON prompt loaded but doesn't contain screenDescription - might be wrong file`)
      }

      return content
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–º–ø—Ç–∞
   */
  private getPromptFilePath(fileName: string, language: string): string {
    const { join } = require('path')
    const filePath = join(process.cwd(), 'public', 'prompts', language, fileName)
    console.log(`üîç Building file path: cwd=${process.cwd()}, language=${language}, fileName=${fileName}`)
    console.log(`üîç Final path: ${filePath}`)
    return filePath
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞
   */
  private getPromptFileName(promptType: PromptType): string {
    const fileNames: Record<PromptType, string> = {
      [PromptType.MAIN]: 'json-structured-prompt.md', // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
      [PromptType.JSON_STRUCTURED]: 'json-structured-prompt.md',
      [PromptType.SONOMA_STRUCTURED]: 'sonoma-structured-prompt.md',
      [PromptType.AB_TEST]: 'ab-test-prompt.md',
      [PromptType.BUSINESS_ANALYTICS]: 'business-analytics-prompt.md',
      [PromptType.HYPOTHESES]: 'hypotheses-prompt.md'
    }

    return fileNames[promptType]
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞
   */
  private getBasicPrompt(promptType: PromptType): string {
    const basicPrompts: Record<PromptType, string> = {
      [PromptType.MAIN]: `You are an experienced UX designer-researcher with 20 years of experience. Analyze the interface based on proven UX methodologies: Nielsen's heuristics, WCAG 2.2, Fitts' Law, Hick-Hyman, ISO 9241, etc.

Input: static screenshot (required) + context and target audience if available.

Output:
1. Screen description
2. UX survey with 5 questions
3. Problems and recommendations
4. Self-check & confidence

Respond in the selected language.`,

      [PromptType.JSON_STRUCTURED]: `You are an experienced UX designer-researcher. Analyze the interface and return the result in JSON format.

**CRITICALLY IMPORTANT: 
1. Respond ONLY in JSON format
2. Do NOT add any text before or after JSON
3. Do NOT wrap JSON in markdown blocks
4. Start response with { and end with }
5. Use this structure: {"screenDescription": {"screenType": "...", "userGoal": "...", "keyElements": [], "confidence": 85, "confidenceReason": "..."}, "uxSurvey": {"questions": [], "overallConfidence": 85}, "audience": {"targetAudience": "...", "mainPain": "...", "fears": []}, "behavior": {"userScenarios": {"idealPath": "...", "typicalError": "...", "alternativeWorkaround": "..."}, "behavioralPatterns": "...", "frictionPoints": [], "actionMotivation": "..."}, "problemsAndSolutions": [], "selfCheck": {"checklist": {}, "confidence": {}}, "metadata": {}}
6. ALL TEXT IN JSON MUST BE IN RUSSIAN LANGUAGE**

Respond in the selected language.`,

      [PromptType.SONOMA_STRUCTURED]: `You are an experienced UX designer-researcher. Analyze the interface and return structured results.

Respond ONLY in JSON format in the selected language.`,

      [PromptType.AB_TEST]: `Analyze the interface for A/B testing opportunities. Focus on elements that could impact conversion rates.

Respond in the selected language.`,

      [PromptType.BUSINESS_ANALYTICS]: `Analyze the interface from a business analytics perspective. Focus on metrics and KPIs.

Respond in the selected language.`,

      [PromptType.HYPOTHESES]: `Generate hypotheses for interface improvements based on UX principles.

Respond in the selected language.`
    }

    return basicPrompts[promptType]
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —è–∑—ã–∫–∞
   */
  async getAvailablePrompts(language: string): Promise<PromptType[]> {
    await this.ensurePromptsLoaded(language)
    const prompts = this.prompts[language]

    if (!prompts) return []

    return Object.keys(prompts).filter(key => prompts[key as PromptType]) as PromptType[]
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  combineWithContext(prompt: string, context?: string, language: string = 'ru'): string {
    if (!context || context.trim() === '') {
      return prompt
    }

    const contextLabels: Record<string, string> = {
      'ru': '## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç',
      'en': '## Additional Context'
    }

    const contextInstructions: Record<string, string> = {
      'ru': '–£—á—Ç–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±–∏–∑–Ω–µ—Å–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.',
      'en': 'Consider this context in your analysis and adapt questions to the business specifics and audience.'
    }

    const contextLabel = contextLabels[language] || contextLabels['en']
    const contextInstruction = contextInstructions[language] || contextInstructions['en']

    return `${prompt}

${contextLabel}
${context}

${contextInstruction}`
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  clearCache(): void {
    console.log('üóëÔ∏è Clearing prompts cache')
    this.prompts = {}
    this.loadingPromises = {}
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à)
   */
  async forceReloadPrompt(promptType: PromptType, language: string): Promise<string> {
    console.log(`üîÑ Force reloading prompt: ${promptType} for language: ${language}`)

    // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞
    delete this.prompts[language]
    delete this.loadingPromises[language]

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    return this.loadPrompt(promptType, language)
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —è–∑—ã–∫–∞
   */
  async preloadPrompts(language: string): Promise<void> {
    try {
      await this.ensurePromptsLoaded(language)
    } catch (error) {
      console.error(`Failed to preload prompts for ${language}:`, error)
    }
  }
}

export const promptService = new PromptService()