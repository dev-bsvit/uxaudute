/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, isSupportedLanguage } from './types'
import { errorHandler, ErrorType } from './error-handler'

export interface LanguageDetectionResult {
  language: string
  source: 'user-preference' | 'browser' | 'default'
  confidence: number
}

export class LanguageDetector {
  private static instance: LanguageDetector

  static getInstance(): LanguageDetector {
    if (!LanguageDetector.instance) {
      LanguageDetector.instance = new LanguageDetector()
    }
    return LanguageDetector.instance
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async detectLanguage(): Promise<LanguageDetectionResult> {
    try {
      console.log('üîç Starting language detection...')

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
      const userPreference = await this.getUserPreference()
      if (userPreference) {
        console.log('‚úÖ Found user preference in database:', userPreference)
        return {
          language: userPreference,
          source: 'user-preference',
          confidence: 1.0
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const localStorageLanguage = this.getLocalStorageLanguage()
      if (localStorageLanguage) {
        console.log('‚úÖ Found language in localStorage:', localStorageLanguage)
        return {
          language: localStorageLanguage,
          source: 'user-preference',
          confidence: 0.9
        }
      }

      // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±—Ä–∞—É–∑–µ—Ä–∞
      const browserLanguage = this.getBrowserLanguage()
      if (browserLanguage) {
        console.log('‚úÖ Detected browser language:', browserLanguage)
        return {
          language: browserLanguage,
          source: 'browser',
          confidence: 0.7
        }
      }

      // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      console.log('‚ö†Ô∏è Using default language:', DEFAULT_LANGUAGE)
      return {
        language: DEFAULT_LANGUAGE,
        source: 'default',
        confidence: 0.5
      }
    } catch (error) {
      console.error('‚ùå Language detection failed:', error)
      errorHandler.createError(
        ErrorType.LANGUAGE_DETECTION_FAILED,
        {},
        error as Error
      )

      return {
        language: DEFAULT_LANGUAGE,
        source: 'default',
        confidence: 0.0
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async getUserPreference(): Promise<string | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (typeof window === 'undefined') return null

      const { supabase } = await import('@/lib/supabase')
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) return null

      const { data: profile } = await supabase
        .from('profiles')
        .select('preferred_language')
        .eq('id', user.id)
        .single()

      const language = profile?.preferred_language
      
      if (language && isSupportedLanguage(language)) {
        return language
      }

      return null
    } catch (error) {
      console.warn('Failed to get user language preference:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–∑ localStorage
   */
  private getLocalStorageLanguage(): string | null {
    try {
      if (typeof window === 'undefined') return null

      const language = localStorage.getItem('preferred_language')
      
      if (language && isSupportedLanguage(language)) {
        return language
      }

      return null
    } catch (error) {
      console.warn('Failed to get language from localStorage:', error)
      return null
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±—Ä–∞—É–∑–µ—Ä–∞
   */
  private getBrowserLanguage(): string | null {
    try {
      if (typeof window === 'undefined') return null

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      const browserLanguages = this.getBrowserLanguages()
      console.log('üåê Browser languages detected:', browserLanguages)
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
      for (const browserLang of browserLanguages) {
        const normalizedLang = this.normalizeLanguageCode(browserLang)
        console.log(`üîç Checking browser language: ${browserLang} -> ${normalizedLang}`)
        
        if (isSupportedLanguage(normalizedLang)) {
          console.log(`‚úÖ Found supported browser language: ${normalizedLang}`)
          return normalizedLang
        }
      }

      console.log('‚ö†Ô∏è No supported browser languages found')
      return null
    } catch (error) {
      console.warn('Failed to detect browser language:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  private getBrowserLanguages(): string[] {
    if (typeof window === 'undefined') return []

    const languages: string[] = []

    // navigator.languages (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã)
    if (navigator.languages && navigator.languages.length > 0) {
      languages.push(...navigator.languages)
    }

    // navigator.language (–æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫)
    if (navigator.language) {
      languages.push(navigator.language)
    }

    // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const legacyLanguage = (navigator as any).userLanguage || 
                          (navigator as any).browserLanguage ||
                          (navigator as any).systemLanguage

    if (legacyLanguage) {
      languages.push(legacyLanguage)
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(languages)]
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en-US" -> "en")
   */
  private normalizeLanguageCode(languageCode: string): string {
    return languageCode.split('-')[0].toLowerCase()
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–∞—Ö
   */
  getSupportedLanguages() {
    return SUPPORTED_LANGUAGES.map(lang => ({
      code: lang.code,
      name: lang.name,
      nativeName: lang.nativeName,
      flag: lang.flag
    }))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
   */
  isLanguageSupported(language: string): boolean {
    return isSupportedLanguage(language)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getDefaultLanguage(): string {
    return DEFAULT_LANGUAGE
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
   */
  getBestMatchLanguage(requestedLanguages: string[]): string {
    for (const lang of requestedLanguages) {
      const normalized = this.normalizeLanguageCode(lang)
      if (isSupportedLanguage(normalized)) {
        return normalized
      }
    }
    return DEFAULT_LANGUAGE
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  async generateDetectionReport(): Promise<string> {
    const result = await this.detectLanguage()
    const browserLanguages = this.getBrowserLanguages()
    const supportedLanguages = this.getSupportedLanguages()

    return JSON.stringify({
      detectedLanguage: result,
      browserLanguages,
      supportedLanguages,
      defaultLanguage: DEFAULT_LANGUAGE,
      timestamp: new Date().toISOString()
    }, null, 2)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const languageDetector = LanguageDetector.getInstance()