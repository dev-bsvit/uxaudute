/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import { languageDetector, LanguageDetectionResult } from './language-detector'
import { translationService } from './translation-service'
import { promptService } from './prompt-service'
import { userSettingsService } from './user-settings'
import { errorHandler, ErrorType } from './error-handler'
import { DEFAULT_LANGUAGE, FALLBACK_LANGUAGE } from './types'

export interface InitializationResult {
  language: string
  detectionResult: LanguageDetectionResult
  translationsLoaded: boolean
  promptsLoaded: boolean
  userPreferenceSynced: boolean
  initializationTime: number
  errors: string[]
}

export class LanguageInitializer {
  private static instance: LanguageInitializer
  private isInitialized = false
  private initializationPromise: Promise<InitializationResult> | null = null

  static getInstance(): LanguageInitializer {
    if (!LanguageInitializer.instance) {
      LanguageInitializer.instance = new LanguageInitializer()
    }
    return LanguageInitializer.instance
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —è–∑—ã–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  async initialize(): Promise<InitializationResult> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–∏—Å
    if (this.initializationPromise) {
      return this.initializationPromise
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (this.isInitialized) {
      return this.getCachedResult()
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    this.initializationPromise = this.performInitialization()
    
    try {
      const result = await this.initializationPromise
      this.isInitialized = true
      return result
    } catch (error) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
      this.initializationPromise = null
      throw error
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
   */
  private async performInitialization(): Promise<InitializationResult> {
    const startTime = Date.now()
    const errors: string[] = []

    try {
      console.log('üåê Starting language system initialization...')

      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫
      const detectionResult = await languageDetector.detectLanguage()
      console.log('üîç Language detected:', detectionResult)

      // 2. –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      let translationsLoaded = false
      try {
        await translationService.preloadTranslations(detectionResult.language)
        translationsLoaded = true
        console.log('üìö Translations loaded for:', detectionResult.language)
      } catch (error) {
        errors.push(`Failed to load translations: ${error}`)
        console.warn('‚ö†Ô∏è Failed to load translations for:', detectionResult.language)
      }

      // 3. –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º fallback –ø–µ—Ä–µ–≤–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (detectionResult.language !== FALLBACK_LANGUAGE) {
        try {
          await translationService.preloadTranslations(FALLBACK_LANGUAGE)
          console.log('üìö Fallback translations loaded for:', FALLBACK_LANGUAGE)
        } catch (error) {
          errors.push(`Failed to load fallback translations: ${error}`)
          console.warn('‚ö†Ô∏è Failed to load fallback translations')
        }
      }

      // 4. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ (–æ–Ω–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
      // –≠—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ª–µ–Ω–¥–∏–Ω–≥–∞ –Ω–∞ 10+ —Å–µ–∫—É–Ω–¥
      let promptsLoaded = false
      console.log('‚è© Skipping prompts preload for faster landing page')

      // 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userPreferenceSynced = false
      try {
        await userSettingsService.syncLanguageSettings()
        userPreferenceSynced = true
        console.log('üë§ User preferences synced')
      } catch (error) {
        errors.push(`Failed to sync user preferences: ${error}`)
        console.warn('‚ö†Ô∏è Failed to sync user preferences:', error)
      }

      // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      try {
        userSettingsService.saveToLocalStorage(detectionResult.language)
      } catch (error) {
        errors.push(`Failed to save to localStorage: ${error}`)
        console.warn('‚ö†Ô∏è Failed to save language to localStorage:', error)
      }

      const initializationTime = Date.now() - startTime
      
      const result: InitializationResult = {
        language: detectionResult.language,
        detectionResult,
        translationsLoaded,
        promptsLoaded,
        userPreferenceSynced,
        initializationTime,
        errors
      }

      console.log('‚úÖ Language system initialized successfully:', result)
      return result

    } catch (error) {
      const initializationTime = Date.now() - startTime
      
      errorHandler.createError(
        ErrorType.GENERAL_UNKNOWN_ERROR,
        { context: 'language_initialization' },
        error as Error
      )

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π, –Ω–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const fallbackResult: InitializationResult = {
        language: DEFAULT_LANGUAGE,
        detectionResult: {
          language: DEFAULT_LANGUAGE,
          source: 'default',
          confidence: 0.0
        },
        translationsLoaded: false,
        promptsLoaded: false,
        userPreferenceSynced: false,
        initializationTime,
        errors: [...errors, `Critical initialization error: ${error}`]
      }

      console.error('‚ùå Language system initialization failed:', fallbackResult)
      return fallbackResult
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private getCachedResult(): InitializationResult {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      language: DEFAULT_LANGUAGE,
      detectionResult: {
        language: DEFAULT_LANGUAGE,
        source: 'default',
        confidence: 1.0
      },
      translationsLoaded: true,
      promptsLoaded: true,
      userPreferenceSynced: true,
      initializationTime: 0,
      errors: []
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞
   */
  isSystemInitialized(): boolean {
    return this.isInitialized
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
   */
  reset(): void {
    this.isInitialized = false
    this.initializationPromise = null
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
   */
  async quickInitialize(language?: string): Promise<InitializationResult> {
    const startTime = Date.now()
    const errors: string[] = []

    try {
      const targetLanguage = language || DEFAULT_LANGUAGE

      // –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      let translationsLoaded = false
      try {
        await translationService.loadTranslations(targetLanguage)
        translationsLoaded = true
      } catch (error) {
        errors.push(`Quick init: Failed to load translations: ${error}`)
      }

      const initializationTime = Date.now() - startTime

      return {
        language: targetLanguage,
        detectionResult: {
          language: targetLanguage,
          source: language ? 'user-preference' : 'default',
          confidence: language ? 1.0 : 0.5
        },
        translationsLoaded,
        promptsLoaded: false, // –ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        userPreferenceSynced: false, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
        initializationTime,
        errors
      }
    } catch (error) {
      const initializationTime = Date.now() - startTime
      
      return {
        language: DEFAULT_LANGUAGE,
        detectionResult: {
          language: DEFAULT_LANGUAGE,
          source: 'default',
          confidence: 0.0
        },
        translationsLoaded: false,
        promptsLoaded: false,
        userPreferenceSynced: false,
        initializationTime,
        errors: [...errors, `Quick init failed: ${error}`]
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async generateInitializationReport(): Promise<string> {
    const detectionReport = await languageDetector.generateDetectionReport()
    const errorReport = errorHandler.generateErrorReport()

    return JSON.stringify({
      initialized: this.isInitialized,
      detectionReport: JSON.parse(detectionReport),
      errorReport: JSON.parse(errorReport),
      timestamp: new Date().toISOString()
    }, null, 2)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const languageInitializer = LanguageInitializer.getInstance()