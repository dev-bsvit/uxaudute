import { supabase } from '@/lib/supabase'
import { DEFAULT_LANGUAGE, isSupportedLanguage } from './types'

export class UserSettingsService {
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveLanguagePreference(userId: string, language: string): Promise<void> {
    console.log('üíæ UserSettingsService: Saving language preference:', { userId, language })
    
    if (!isSupportedLanguage(language)) {
      throw new Error(`Unsupported language: ${language}`)
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è email
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user || user.id !== userId) {
        throw new Error('User not authenticated or ID mismatch')
      }

      console.log('üíæ Executing upsert to profiles table...')
      const { error } = await supabase
        .from('profiles')
        .upsert({
          id: userId,
          email: user.email,
          preferred_language: language,
          updated_at: new Date().toISOString()
        })

      if (error) {
        console.error('üíæ Database upsert error:', error)
        throw new Error(`Failed to save language preference: ${error.message}`)
      }

      console.log(`‚úÖ Language preference saved for user ${userId}: ${language}`)
    } catch (error) {
      console.error('‚ùå Error saving language preference:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getLanguagePreference(userId: string): Promise<string | null> {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('preferred_language')
        .eq('id', userId)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          return null
        }
        throw new Error(`Failed to get language preference: ${error.message}`)
      }

      const language = data?.preferred_language
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      if (language && isSupportedLanguage(language)) {
        return language
      }

      return null
    } catch (error) {
      console.error('Error getting language preference:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentUserLanguagePreference(): Promise<string | null> {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        return null
      }

      return await this.getLanguagePreference(user.id)
    } catch (error) {
      console.error('Error getting current user language preference:', error)
      return null
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –≤ localStorage
   */
  saveToLocalStorage(language: string): void {
    if (typeof window === 'undefined') return

    try {
      localStorage.setItem('preferred_language', language)
    } catch (error) {
      console.error('Failed to save language to localStorage:', error)
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–∑ localStorage
   */
  getFromLocalStorage(): string | null {
    if (typeof window === 'undefined') return null

    try {
      const language = localStorage.getItem('preferred_language')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      if (language && isSupportedLanguage(language)) {
        return language
      }

      return null
    } catch (error) {
      console.error('Failed to get language from localStorage:', error)
      return null
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -> localStorage -> –±—Ä–∞—É–∑–µ—Ä -> –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  async determinePreferredLanguage(): Promise<string> {
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const dbLanguage = await this.getCurrentUserLanguagePreference()
      if (dbLanguage) {
        return dbLanguage
      }

      // 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
      const localLanguage = this.getFromLocalStorage()
      if (localLanguage) {
        return localLanguage
      }

      // 3. –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –±—Ä–∞—É–∑–µ—Ä—É
      if (typeof window !== 'undefined') {
        const browserLang = navigator.language.split('-')[0]
        if (isSupportedLanguage(browserLang)) {
          return browserLang
        }
      }

      // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return DEFAULT_LANGUAGE
    } catch (error) {
      console.error('Error determining preferred language:', error)
      return DEFAULT_LANGUAGE
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–∂–¥—É localStorage –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async syncLanguageSettings(): Promise<void> {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        return
      }

      const dbLanguage = await this.getLanguagePreference(user.id)
      const localLanguage = this.getFromLocalStorage()

      if (dbLanguage && localLanguage && dbLanguage !== localLanguage) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        this.saveToLocalStorage(dbLanguage)
        console.log(`Language synced from database: ${dbLanguage}`)
      } else if (!dbLanguage && localLanguage) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.saveLanguagePreference(user.id, localLanguage)
        console.log(`Language synced to database: ${localLanguage}`)
      }
    } catch (error) {
      console.error('Error syncing language settings:', error)
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  clearLanguageSettings(): void {
    if (typeof window === 'undefined') return

    try {
      localStorage.removeItem('preferred_language')
    } catch (error) {
      console.error('Failed to clear language settings:', error)
    }
  }
}

export const userSettingsService = new UserSettingsService()