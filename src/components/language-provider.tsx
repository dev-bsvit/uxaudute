'use client'

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { 
  LanguageContextType, 
  Language, 
  SUPPORTED_LANGUAGES, 
  DEFAULT_LANGUAGE,
  translationService,
  isSupportedLanguage
} from '@/lib/i18n'
import { languageInitializer } from '@/lib/i18n/language-initializer'
import { TranslationPreloader } from './translation-preloader'

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

interface LanguageProviderProps {
  children: ReactNode
}

export function LanguageProvider({ children }: LanguageProviderProps) {
  const [currentLanguage, setCurrentLanguage] = useState<string>(DEFAULT_LANGUAGE)
  const [isLoading, setIsLoading] = useState(true)
  const [availableLanguages] = useState<Language[]>(SUPPORTED_LANGUAGES)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    initializeLanguage()
  }, [])

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —è–∑—ã–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
   */
  const initializeLanguage = async () => {
    try {
      setIsLoading(true)
      console.log('üöÄ Starting language provider initialization...')
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –≤ localStorage
      const savedLanguage = getSavedLanguage()
      if (savedLanguage && isSupportedLanguage(savedLanguage)) {
        console.log('üì± Found saved language in localStorage:', savedLanguage)
        setCurrentLanguage(savedLanguage)
        
        // –ë—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        try {
          await translationService.loadTranslations(savedLanguage)
          console.log('‚úÖ Translations loaded for saved language:', savedLanguage)
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to load translations for saved language:', error)
        }
        
        setIsLoading(false)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        languageInitializer.initialize().then(fullResult => {
          console.log('üéØ Background initialization completed:', fullResult)
          // –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º
          if (fullResult.language !== savedLanguage) {
            console.log('üîÑ Updating language from background detection:', fullResult.language)
            setCurrentLanguage(fullResult.language)
            saveLanguageToStorage(fullResult.language)
          }
        }).catch(error => {
          console.warn('‚ö†Ô∏è Background initialization failed:', error)
        })
        
        return
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
      const result = await languageInitializer.quickInitialize()
      
      console.log('üìã Language initialization result:', result)
      setCurrentLanguage(result.language)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ localStorage
      saveLanguageToStorage(result.language)
      
      console.log('‚úÖ Language provider initialized with language:', result.language)
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      languageInitializer.initialize().then(fullResult => {
        console.log('üéØ Full language initialization completed:', fullResult)
      }).catch(error => {
        console.warn('‚ö†Ô∏è Background initialization failed:', error)
      })
      
    } catch (error) {
      console.error('‚ùå Failed to initialize language provider:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setCurrentLanguage(DEFAULT_LANGUAGE)
      saveLanguageToStorage(DEFAULT_LANGUAGE)
    } finally {
      setIsLoading(false)
    }
  }

  /**
   * –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
   */
  const setLanguage = async (language: string): Promise<void> => {
    if (!isSupportedLanguage(language)) {
      console.error(`Unsupported language: ${language}`)
      return
    }

    if (language === currentLanguage) {
      return
    }

    try {
      setIsLoading(true)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
      await translationService.loadTranslations(language)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCurrentLanguage(language)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      saveLanguageToStorage(language)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await saveLanguageToDatabase(language)
      
      console.log(`Language changed to: ${language}`)
      
    } catch (error) {
      console.error('Failed to change language:', error)
      throw error
    } finally {
      setIsLoading(false)
    }
  }

  /**
   * –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
   */
  const t = (key: string, params?: Record<string, string>): string => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –∫–ª—é—á–∞
    if (isLoading) {
      return ''
    }
    return translationService.getTranslation(key, currentLanguage, params)
  }



  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ localStorage
   */
  const getSavedLanguage = (): string | null => {
    if (typeof window === 'undefined') return null
    
    try {
      return localStorage.getItem('preferred_language')
    } catch (error) {
      console.error('Failed to get language from localStorage:', error)
      return null
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –≤ localStorage
   */
  const saveLanguageToStorage = (language: string): void => {
    if (typeof window === 'undefined') return
    
    try {
      localStorage.setItem('preferred_language', language)
      console.log('üíæ Language saved to localStorage:', language)
    } catch (error) {
      console.error('Failed to save language to localStorage:', error)
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  const saveLanguageToDatabase = async (language: string): Promise<void> => {
    try {
      const { userSettingsService } = await import('@/lib/i18n/user-settings')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { supabase } = await import('@/lib/supabase')
      const { data: { user } } = await supabase.auth.getUser()
      
      if (!user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage
        return
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      await userSettingsService.saveLanguagePreference(user.id, language)
      
    } catch (error) {
      console.error('Error saving language to database:', error)
    }
  }

  const contextValue: LanguageContextType = {
    currentLanguage,
    availableLanguages,
    setLanguage,
    t,
    isLoading
  }

  return (
    <LanguageContext.Provider value={contextValue}>
      <TranslationPreloader language={currentLanguage}>
        {children}
      </TranslationPreloader>
    </LanguageContext.Provider>
  )
}

/**
 * Hook –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export function useLanguage(): LanguageContextType {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider')
  }
  return context
}

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
 */
export function useTranslation() {
  const { t, currentLanguage, isLoading } = useLanguage()
  return { t, currentLanguage, isLoading }
}