'use client'

import { useRouter, usePathname } from 'next/navigation'
import { useLocale } from 'next-intl'
import { ChevronDown, Globe } from 'lucide-react'
import { useState, useEffect, useRef } from 'react'

const languages = [
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'ua', name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' }
]

export function LanguageSelect() {
  const router = useRouter()
  const pathname = usePathname()
  const locale = useLocale()
  const [isOpen, setIsOpen] = useState(false)
  const [forceUpdate, setForceUpdate] = useState(0)
  const dropdownRef = useRef<HTMLDivElement>(null)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –∏–∑ URL, –µ—Å–ª–∏ useLocale() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const urlLocale = pathname.split('/')[1] as 'ru' | 'ua' | undefined
  const actualLocale = urlLocale && ['ru', 'ua'].includes(urlLocale) ? urlLocale : locale

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('LanguageSelect render:', {
    locale,
    pathname,
    urlLocale,
    actualLocale,
    currentLanguage: languages.find(lang => lang.code === actualLocale)
  })

  const currentLanguage = languages.find(lang => lang.code === actualLocale) || languages[0]

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside)
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [isOpen])

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª–∏ –∏–ª–∏ pathname
  useEffect(() => {
    console.log('Locale or pathname changed:', { locale, pathname, actualLocale })
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    setIsOpen(false)
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    setForceUpdate(prev => prev + 1)
  }, [locale, pathname, actualLocale])

  const switchLanguage = (newLocale: string) => {
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –±–µ–∑ –ª–æ–∫–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è actualLocale
    let pathWithoutLocale = pathname.replace(`/${actualLocale}`, '') || '/'
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–µ—à–∏
    pathWithoutLocale = pathWithoutLocale.replace(/\/+/g, '/')
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–ª–µ—à, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º
    if (pathWithoutLocale === '/' || pathWithoutLocale === '') {
      pathWithoutLocale = ''
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª—å—é
    const newPath = `/${newLocale}${pathWithoutLocale}`
    
    console.log('Switching language:', {
      currentLocale: actualLocale,
      newLocale,
      currentPath: pathname,
      pathWithoutLocale,
      newPath
    })
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.href = newPath
  }

  return (
    <div className="relative" ref={dropdownRef} key={`${actualLocale}-${forceUpdate}`}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 rounded-md transition-colors border border-gray-200 hover:border-gray-300"
        aria-expanded={isOpen}
        aria-haspopup="true"
      >
        <Globe className="w-4 h-4" />
        <span className="hidden sm:inline">{currentLanguage.flag}</span>
        <span className="hidden md:inline">{currentLanguage.name}</span>
        <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50 animate-in slide-in-from-top-2 duration-200">
          {languages.map((lang) => (
            <button
              key={lang.code}
              onClick={() => {
                switchLanguage(lang.code)
                setIsOpen(false)
              }}
              className={`flex items-center gap-3 w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors first:rounded-t-lg last:rounded-b-lg ${
                actualLocale === lang.code ? 'bg-blue-50 text-blue-700 font-medium' : ''
              }`}
            >
              <span className="text-lg">{lang.flag}</span>
              <span className="flex-1 text-left">{lang.name}</span>
              {actualLocale === lang.code && (
                <span className="text-blue-600 font-bold">‚úì</span>
              )}
            </button>
          ))}
        </div>
      )}
    </div>
  )
}
