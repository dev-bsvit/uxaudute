'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  Play, 
  CheckCircle, 
  XCircle, 
  Loader2,
  RefreshCw,
  FileText,
  Globe
} from 'lucide-react'
import { useLanguageInitialization } from '@/hooks/use-language-initialization'
import { useBrowserLanguageDetection } from '@/hooks/use-browser-language-detection'
import { useLanguageReadiness } from '@/hooks/use-language-readiness'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
export function LanguageInitializationTest() {
  const initialization = useLanguageInitialization()
  const detection = useBrowserLanguageDetection()
  const readiness = useLanguageReadiness()
  const [testResults, setTestResults] = useState<string[]>([])

  // –°–∫—Ä—ã–≤–∞–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  if (process.env.NODE_ENV !== 'development') {
    return null
  }

  const addTestResult = (result: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${result}`])
  }

  const runFullTest = async () => {
    setTestResults([])
    addTestResult('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–∞')

    try {
      // 1. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
      addTestResult('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞...')
      const detectionResult = await detection.detectLanguage()
      addTestResult(`‚úÖ –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${detectionResult.language} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${detectionResult.source}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(detectionResult.confidence * 100).toFixed(0)}%)`)

      // 2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      addTestResult('‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...')
      const quickInitResult = await initialization.quickInitialize()
      addTestResult(`‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${quickInitResult.initializationTime}ms`)

      // 3. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      addTestResult('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...')
      const fullInitResult = await initialization.initialize()
      addTestResult(`‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${fullInitResult.initializationTime}ms`)

      // 4. –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      addTestResult('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...')
      const readinessResult = await readiness.checkReadiness()
      addTestResult(`${readinessResult.isReady ? '‚úÖ' : '‚ùå'} –°–∏—Å—Ç–µ–º–∞ ${readinessResult.isReady ? '–≥–æ—Ç–æ–≤–∞' : '–Ω–µ –≥–æ—Ç–æ–≤–∞'}`)

      if (readinessResult.errors.length > 0) {
        addTestResult(`‚ö†Ô∏è –û—à–∏–±–∫–∏: ${readinessResult.errors.join(', ')}`)
      }

      if (readinessResult.warnings.length > 0) {
        addTestResult(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${readinessResult.warnings.join(', ')}`)
      }

      addTestResult('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`)
    }
  }

  const runQuickTest = async () => {
    setTestResults([])
    addTestResult('‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')

    try {
      const isReady = await readiness.quickCheck()
      addTestResult(`${isReady ? '‚úÖ' : '‚ùå'} –°–∏—Å—Ç–µ–º–∞ ${isReady ? '–≥–æ—Ç–æ–≤–∞' : '–Ω–µ –≥–æ—Ç–æ–≤–∞'}`)
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`)
    }
  }

  const generateReport = async () => {
    try {
      const report = await readiness.generateReport()
      const blob = new Blob([report], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `language-readiness-report-${new Date().toISOString().slice(0, 19)}.json`
      a.click()
      URL.revokeObjectURL(url)
      addTestResult('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error}`)
    }
  }

  return (
    <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 max-w-2xl w-full mx-4">
      <Card className="bg-white border shadow-xl">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-sm">
            <Globe className="h-4 w-4" />
            <span>Language Initialization Test</span>
            <div className="ml-auto flex gap-1">
              {initialization.isInitialized && <Badge variant="outline" className="text-green-600">Initialized</Badge>}
              {readiness.isReady && <Badge variant="outline" className="text-blue-600">Ready</Badge>}
            </div>
          </CardTitle>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* –°—Ç–∞—Ç—É—Å */}
          <div className="grid grid-cols-3 gap-2 text-xs">
            <div className="flex items-center gap-1">
              {initialization.isInitializing ? (
                <Loader2 className="h-3 w-3 animate-spin text-blue-600" />
              ) : initialization.isInitialized ? (
                <CheckCircle className="h-3 w-3 text-green-600" />
              ) : (
                <XCircle className="h-3 w-3 text-gray-400" />
              )}
              <span>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</span>
            </div>
            
            <div className="flex items-center gap-1">
              {detection.isDetecting ? (
                <Loader2 className="h-3 w-3 animate-spin text-blue-600" />
              ) : detection.detectionResult ? (
                <CheckCircle className="h-3 w-3 text-green-600" />
              ) : (
                <XCircle className="h-3 w-3 text-gray-400" />
              )}
              <span>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</span>
            </div>
            
            <div className="flex items-center gap-1">
              {readiness.isChecking ? (
                <Loader2 className="h-3 w-3 animate-spin text-blue-600" />
              ) : readiness.isReady ? (
                <CheckCircle className="h-3 w-3 text-green-600" />
              ) : (
                <XCircle className="h-3 w-3 text-gray-400" />
              )}
              <span>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={runQuickTest}
              disabled={readiness.isChecking}
              className="flex-1"
            >
              <Play className="h-3 w-3 mr-1" />
              –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={runFullTest}
              disabled={initialization.isInitializing || readiness.isChecking}
              className="flex-1"
            >
              <RefreshCw className="h-3 w-3 mr-1" />
              –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={generateReport}
              className="px-3"
            >
              <FileText className="h-3 w-3" />
            </Button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
          {testResults.length > 0 && (
            <div className="bg-gray-50 rounded p-3 max-h-40 overflow-y-auto">
              <div className="text-xs font-medium mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</div>
              <div className="space-y-1">
                {testResults.map((result, index) => (
                  <div key={index} className="text-xs font-mono text-gray-700">
                    {result}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
          {(initialization.initializationResult || detection.detectionResult) && (
            <div className="text-xs space-y-1 bg-blue-50 p-2 rounded">
              {detection.detectionResult && (
                <div>
                  <strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> {detection.detectionResult.language} 
                  ({detection.detectionResult.source}, {(detection.detectionResult.confidence * 100).toFixed(0)}%)
                </div>
              )}
              {initialization.initializationResult && (
                <div>
                  <strong>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> {initialization.initializationResult.initializationTime}ms
                  {initialization.initializationResult.errors.length > 0 && (
                    <span className="text-red-600"> ({initialization.initializationResult.errors.length} –æ—à–∏–±–æ–∫)</span>
                  )}
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}