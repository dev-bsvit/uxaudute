'use client'

import React, { useState } from 'react'
import { StructuredAnalysisResponse } from '@/lib/analysis-types'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { SurveyDisplay } from '@/components/ui/survey-display'
import { CanvasAnnotations } from '@/components/ui/canvas-annotations'
import { Monitor, Link2 } from 'lucide-react'

interface AnalysisResultDisplayProps {
  analysis?: StructuredAnalysisResponse
  showDetails?: boolean
  screenshot?: string | null
  url?: string | null
  onAnnotationUpdate?: (annotationData: string) => void
  auditId?: string // ID –∞—É–¥–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
  analysisLanguage?: string // –Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
}

export function AnalysisResultDisplay({ 
  analysis, 
  showDetails = true,
  screenshot,
  url,
  onAnnotationUpdate,
  auditId,
  analysisLanguage
}: AnalysisResultDisplayProps) {
  // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const formatDateTime = (timestamp: string) => new Date(timestamp).toLocaleString('ru-RU')
  const t = (key: string) => {
    const translations: Record<string, string> = {
      'common.noDataToDisplay': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      'common.unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      'common.notLoaded': '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
      'common.loadingError': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
      'common.confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      'common.high': '–í—ã—Å–æ–∫–∏–π',
      'common.medium': '–°—Ä–µ–¥–Ω–∏–π',
      'common.low': '–ù–∏–∑–∫–∏–π',
      'common.problems': '–ø—Ä–æ–±–ª–µ–º',
      'common.priority': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      'common.analysis': '–ê–Ω–∞–ª–∏–∑',
      'common.version': '–í–µ—Ä—Å–∏—è',
      'common.model': '–ú–æ–¥–µ–ª—å',
      'common.time': '–í—Ä–µ–º—è',
      'analysis-results.title': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã UX –∞–Ω–∞–ª–∏–∑–∞',
      'analysis-results.screenDescription.title': '–û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞',
      'analysis-results.screenDescription.screenType': '–¢–∏–ø —ç–∫—Ä–∞–Ω–∞',
      'analysis-results.screenDescription.userGoal': '–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'analysis-results.screenDescription.keyElements': '–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
      'analysis-results.screenDescription.confidenceReason': '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
      'analysis-results.audience.title': '–ê—É–¥–∏—Ç–æ—Ä–∏—è',
      'analysis-results.audience.targetAudience': '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
      'analysis-results.audience.mainPain': '–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å',
      'analysis-results.audience.fears': '–°—Ç—Ä–∞—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'analysis-results.behavior.title': '–ü–æ–≤–µ–¥–µ–Ω–∏–µ',
      'analysis-results.behavior.userScenarios': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
      'analysis-results.behavior.idealPath': '–ò–¥–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å:',
      'analysis-results.behavior.typicalError': '–¢–∏–ø–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞:',
      'analysis-results.behavior.alternativeWorkaround': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥:',
      'analysis-results.behavior.behavioralPatterns': '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
      'analysis-results.behavior.frictionPoints': '–¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è',
      'analysis-results.behavior.actionMotivation': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é',
      'analysis-results.behavior.majorImpact': '–°–µ—Ä—å–µ–∑–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ',
      'analysis-results.behavior.minorImpact': '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ',
      'analysis-results.problemsAndSolutions.title': '–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è',
      'analysis-results.problemsAndSolutions.problem': '–ü—Ä–æ–±–ª–µ–º–∞:',
      'analysis-results.problemsAndSolutions.principle': '–ü—Ä–∏–Ω—Ü–∏–ø:',
      'analysis-results.problemsAndSolutions.consequence': '–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ:',
      'analysis-results.problemsAndSolutions.recommendation': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:',
      'analysis-results.problemsAndSolutions.expectedEffect': '–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:',
      'analysis-results.problemsAndSolutions.noProblemsFound': '–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      'analysis-results.selfCheck.title': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞',
      'analysis-results.selfCheck.checklist': '–ß–µ–∫-–ª–∏—Å—Ç',
      'analysis-results.selfCheck.confidenceByBlocks': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –±–ª–æ–∫–∞–º',
      'analysis-results.selfCheck.coversAllElements': '–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
      'analysis-results.selfCheck.noContradictions': '–ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π',
      'analysis-results.selfCheck.principlesJustified': '–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã',
      'analysis-results.selfCheck.actionClarity': '–ß–µ—Ç–∫–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π',
      'analysis-results.selfCheck.survey': '–û–ø—Ä–æ—Å',
      'analysis-results.selfCheck.recommendations': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      'analysis-results.metadata.title': '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ',
      'analysis-results.interface.analyzedInterface': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
      'analysis-results.interface.analyzedUrl': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π URL',
      'analysis-results.interface.annotationEditor': '–†–µ–¥–∞–∫—Ç–æ—Ä –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π - –∫–ª–∏–∫–Ω–∏—Ç–µ –∏ —Ä–∏—Å—É–π—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏'
    }
    return translations[key] || key
  }
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  if (!analysis) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
      </div>
    )
  }

  console.log('üîç AnalysisResultDisplay –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', analysis)
  console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', Object.keys(analysis))

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  const safeAnalysis: StructuredAnalysisResponse = {
    screenDescription: analysis.screenDescription || { 
      screenType: (analysis as any).screenType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 
      confidence: (analysis as any).confidence || 0,
      userGoal: (analysis as any).userGoal || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      keyElements: (analysis as any).keyElements || [],
      confidenceReason: (analysis as any).confidenceReason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    },
    uxSurvey: analysis.uxSurvey || { 
      questions: (analysis as any).questions || [], 
      overallConfidence: (analysis as any).overallConfidence || 0,
      summary: (analysis as any).summary || {
        totalQuestions: 0,
        averageConfidence: 0,
        criticalIssues: 0,
        recommendations: []
      }
    },
    audience: analysis.audience || { 
      targetAudience: (analysis as any).targetAudience || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞', 
      mainPain: (analysis as any).mainPain || '–ù–µ –≤—ã—è–≤–ª–µ–Ω–∞',
      fears: (analysis as any).fears || []
    },
    behavior: analysis.behavior || { 
      userScenarios: (analysis as any).userScenarios || {
        idealPath: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        typicalError: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞', 
        alternativeWorkaround: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
      }, 
      behavioralPatterns: (analysis as any).behavioralPatterns || '–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã',
      frictionPoints: (analysis as any).frictionPoints || [],
      actionMotivation: (analysis as any).actionMotivation || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
    },
    problemsAndSolutions: analysis.problemsAndSolutions || [],
    selfCheck: analysis.selfCheck || { 
      checklist: (analysis as any).checklist || {}, 
      varietyCheck: (analysis as any).varietyCheck || {}, 
      confidence: (analysis as any).confidence || { analysis: 0 } 
    },
    annotations: analysis.annotations || '',
    metadata: analysis.metadata || { 
      version: '1.0', 
      model: 'GPT-4', 
      timestamp: new Date().toISOString() 
    }
  }

  console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞:', safeAnalysis)
  console.log('üîç safeAnalysis.screenDescription:', safeAnalysis.screenDescription)
  console.log('üîç safeAnalysis.uxSurvey:', safeAnalysis.uxSurvey)
  console.log('üîç safeAnalysis.audience:', safeAnalysis.audience)
  console.log('üîç safeAnalysis.behavior:', safeAnalysis.behavior)
  console.log('üîç safeAnalysis.problemsAndSolutions:', safeAnalysis.problemsAndSolutions)

  const [annotationData, setAnnotationData] = useState<string>(safeAnalysis?.annotations || '')

  const handleAnnotationSave = (data: string) => {
    setAnnotationData(data)
    onAnnotationUpdate?.(data)
    console.log('Annotation data saved:', data)
  }

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-green-600'
    if (confidence >= 60) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'low': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getPriorityText = (priority: string) => {
    switch (priority) {
      case 'high': return t('common.high')
      case 'medium': return t('common.medium')
      case 'low': return t('common.low')
      default: return priority
    }
  }

  return (
    <div className="w-full max-w-none grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-screen">
      {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
      <div className="space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center">
          <div className="flex items-center justify-center gap-3 mb-2">
            <h2 className="text-3xl font-bold text-gray-900">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã UX –∞–Ω–∞–ª–∏–∑–∞
            </h2>
          </div>
        </div>


      {/* –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üì± {t('analysis-results.screenDescription.title')}
            <Badge variant="outline" className={getConfidenceColor(safeAnalysis.screenDescription.confidence)}>
              {t('common.confidence')}: {safeAnalysis.screenDescription.confidence}%
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">{t('analysis-results.screenDescription.screenType')}</h4>
              <p className="text-gray-600">{safeAnalysis.screenDescription.screenType}</p>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">{t('analysis-results.screenDescription.userGoal')}</h4>
              <p className="text-gray-600">{safeAnalysis.screenDescription.userGoal}</p>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-900 mb-2">{t('analysis-results.screenDescription.keyElements')}</h4>
            <div className="flex flex-wrap gap-2">
              {(safeAnalysis.screenDescription.keyElements || []).map((element: string, index: number) => (
                <Badge key={index} variant="secondary">
                  {element}
                </Badge>
              ))}
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-900 mb-2">{t('analysis-results.screenDescription.confidenceReason')}</h4>
            <p className="text-gray-600">{safeAnalysis.screenDescription.confidenceReason}</p>
          </div>
        </CardContent>
      </Card>

      {/* UX-–æ–ø—Ä–æ—Å */}
      <SurveyDisplay survey={safeAnalysis.uxSurvey} />

      {/* –ê—É–¥–∏—Ç–æ—Ä–∏—è */}
      {safeAnalysis.audience && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üë• {t('analysis-results.audience.title')}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.audience.targetAudience')}</h4>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {typeof safeAnalysis.audience.targetAudience === 'string' 
                    ? safeAnalysis.audience.targetAudience
                    : typeof safeAnalysis.audience.targetAudience === 'object' && safeAnalysis.audience.targetAudience !== null
                    ? JSON.stringify(safeAnalysis.audience.targetAudience, null, 2)
                    : t('common.loadingError')
                  }
                </div>
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.audience.mainPain')}</h4>
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {typeof safeAnalysis.audience.mainPain === 'string' 
                    ? safeAnalysis.audience.mainPain
                    : typeof safeAnalysis.audience.mainPain === 'object' && safeAnalysis.audience.mainPain !== null
                    ? JSON.stringify(safeAnalysis.audience.mainPain, null, 2)
                    : t('common.loadingError')
                  }
                </div>
              </div>
            </div>

            {/* –°—Ç—Ä–∞—Ö–∏ */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.audience.fears')}</h4>
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <ol className="space-y-2">
                  {(safeAnalysis.audience?.fears || []).map((fear: string, index: number) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="flex-shrink-0 w-6 h-6 bg-yellow-200 text-yellow-800 rounded-full flex items-center justify-center text-sm font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-700">{fear}</span>
                    </li>
                  ))}
                </ol>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ü–æ–≤–µ–¥–µ–Ω–∏–µ */}
      {safeAnalysis.behavior && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üéØ {t('analysis-results.behavior.title')}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.behavior.userScenarios')}</h4>
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 space-y-3">
                <div>
                  <span className="font-medium text-green-800">{t('analysis-results.behavior.idealPath')}</span>
                  <p className="text-gray-700 mt-1">{safeAnalysis.behavior.userScenarios.idealPath}</p>
                </div>
                <div>
                  <span className="font-medium text-orange-800">{t('analysis-results.behavior.typicalError')}</span>
                  <p className="text-gray-700 mt-1">{safeAnalysis.behavior.userScenarios.typicalError}</p>
                </div>
                <div>
                  <span className="font-medium text-blue-800">{t('analysis-results.behavior.alternativeWorkaround')}</span>
                  <p className="text-gray-700 mt-1">{safeAnalysis.behavior.userScenarios.alternativeWorkaround}</p>
                </div>
              </div>
            </div>

            {/* –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.behavior.behavioralPatterns')}</h4>
              <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {safeAnalysis.behavior.behavioralPatterns}
                </p>
              </div>
            </div>

            {/* –¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.behavior.frictionPoints')}</h4>
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <ol className="space-y-2">
                  {(safeAnalysis.behavior?.frictionPoints || []).map((frictionPoint: any, index: number) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="flex-shrink-0 w-6 h-6 bg-orange-200 text-orange-800 rounded-full flex items-center justify-center text-sm font-medium">
                        {index + 1}
                      </span>
                      <div className="flex-1">
                        <span className="text-gray-700">
                          {typeof frictionPoint === 'string' ? frictionPoint : frictionPoint.point}
                        </span>
                        {typeof frictionPoint === 'object' && frictionPoint.impact && (
                          <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${
                            frictionPoint.impact === 'major' 
                              ? 'bg-red-100 text-red-800' 
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {frictionPoint.impact === 'major' ? t('analysis-results.behavior.majorImpact') : t('analysis-results.behavior.minorImpact')}
                          </span>
                        )}
                      </div>
                    </li>
                  ))}
                </ol>
              </div>
            </div>

            {/* –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.behavior.actionMotivation')}</h4>
              <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {safeAnalysis.behavior.actionMotivation}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üîß {t('analysis-results.problemsAndSolutions.title')}
            <Badge variant="outline">
              {(safeAnalysis.problemsAndSolutions || []).length} {t('common.problems')}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {(safeAnalysis.problemsAndSolutions || []).length > 0 ? (safeAnalysis.problemsAndSolutions || []).map((problem: any, index: number) => {
              // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ –∫–ª—é—á–µ–π
              const cleanProblem = {
                element: (problem.element || problem["'element'"] || '').replace(/^'|'$/g, ''),
                problem: (problem.problem || problem["'problem'"] || '').replace(/^'|'$/g, ''),
                principle: (problem.principle || problem["'principle'"] || '').replace(/^'|'$/g, ''),
                consequence: (problem.consequence || problem["'consequence'"] || '').replace(/^'|'$/g, ''),
                recommendation: (problem.recommendation || problem["'recommendation'"] || '').replace(/^'|'$/g, ''),
                expectedEffect: (problem.expectedEffect || problem["'expectedEffect'"] || '').replace(/^'|'$/g, ''),
                priority: (problem.priority || problem["'priority'"] || 'medium').replace(/^'|'$/g, '')
              }
              
              return (
                <div key={index} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-start justify-between">
                  <h4 className="font-medium text-gray-900">{cleanProblem.element}</h4>
                  <Badge className={getPriorityColor(cleanProblem.priority)}>
                    {getPriorityText(cleanProblem.priority)} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                  </Badge>
                </div>
                
                <div className="space-y-2">
                  <div>
                    <span className="font-medium text-red-600">–ü—Ä–æ–±–ª–µ–º–∞:</span>{' '}
                    <span className="text-gray-700">{cleanProblem.problem}</span>
                  </div>
                  <div>
                    <span className="font-medium text-blue-600">–ü—Ä–∏–Ω—Ü–∏–ø:</span>{' '}
                    <span className="text-gray-700">{cleanProblem.principle}</span>
                  </div>
                  <div>
                    <span className="font-medium text-orange-600">–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ:</span>{' '}
                    <span className="text-gray-700">{cleanProblem.consequence}</span>
                  </div>
                  <div>
                    <span className="font-medium text-green-600">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</span>{' '}
                    <span className="text-gray-700">{cleanProblem.recommendation}</span>
                  </div>
                  <div>
                    <span className="font-medium text-purple-600">–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</span>{' '}
                    <span className="text-gray-700">{cleanProblem.expectedEffect}</span>
                  </div>
                </div>
                </div>
              )
            }
            )) : (
              <div className="text-center text-gray-500 py-8">
                <p>{t('analysis-results.problemsAndSolutions.noProblemsFound')}</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Self-Check */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            ‚úÖ {t('analysis-results.selfCheck.title')}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.selfCheck.checklist')}</h4>
              <div className="space-y-2">
                {Object.entries(safeAnalysis.selfCheck?.checklist || {}).map(([key, value]: [string, any]) => (
                  <div key={key} className="flex items-center gap-2">
                    <span className={value ? 'text-green-500' : 'text-red-500'}>
                      {value ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="text-sm text-gray-700">
                      {key === 'coversAllElements' && t('analysis-results.selfCheck.coversAllElements')}
                      {key === 'noContradictions' && t('analysis-results.selfCheck.noContradictions')}
                      {key === 'principlesJustified' && t('analysis-results.selfCheck.principlesJustified')}
                      {key === 'actionClarity' && t('analysis-results.selfCheck.actionClarity')}
                    </span>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-3">{t('analysis-results.selfCheck.confidenceByBlocks')}</h4>
              <div className="space-y-2">
                {Object.entries(safeAnalysis.selfCheck?.confidence || {}).map(([key, value]: [string, any]) => (
                  <div key={key} className="flex items-center justify-between">
                    <span className="text-sm text-gray-700">
                      {key === 'analysis' && t('common.analysis')}
                      {key === 'survey' && t('analysis-results.selfCheck.survey')}
                      {key === 'recommendations' && t('analysis-results.selfCheck.recommendations')}
                    </span>
                    <span className={`font-medium ${getConfidenceColor(Number(value))}`}>
                      {value}%
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
      {showDetails && (
        <Card className="bg-gray-50">
          <CardContent className="pt-6">
            <h4 className="font-medium text-gray-900 mb-2">{t('analysis-results.metadata.title')}</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
              <div>
                <span className="font-medium">{t('common.version')}:</span> {safeAnalysis.metadata?.version || '1.0'}
              </div>
              <div>
                <span className="font-medium">{t('common.model')}:</span> {safeAnalysis.metadata?.model || t('common.unknown')}
              </div>
              <div>
                <span className="font-medium">{t('common.time')}:</span> {safeAnalysis.metadata?.timestamp ? formatDateTime(safeAnalysis.metadata.timestamp) : t('common.unknown')}
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      </div>

      {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º */}
      <div className="sticky top-4 h-fit">
        {(screenshot || url) && (
          <Card className="h-full">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {screenshot ? <Monitor className="w-5 h-5" /> : <Link2 className="w-5 h-5" />}
                {screenshot ? t('analysis-results.interface.analyzedInterface') : t('analysis-results.interface.analyzedUrl')}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {screenshot ? (
                <div className="space-y-4">
                  <CanvasAnnotations
                    src={screenshot}
                    alt="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                    className="w-full h-auto max-h-[70vh] object-contain"
                    onAnnotationSave={handleAnnotationSave}
                    initialAnnotationData={annotationData}
                    auditId={auditId}
                  />
                  <div className="text-sm text-gray-500 text-center">
                    üí° {t('analysis-results.interface.annotationEditor')}
                  </div>
                  <div className="text-xs text-gray-400 text-center mt-2">
                    {t('common.analysis')} {safeAnalysis.metadata?.timestamp ? formatDateTime(safeAnalysis.metadata.timestamp) : t('common.unknown')}
                  </div>
                </div>
              ) : url ? (
                <div className="p-4 bg-slate-50 rounded-xl border-2 border-dashed border-slate-200">
                  <a 
                    href={url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:text-blue-800 font-medium break-all flex items-center gap-2"
                  >
                    <Link2 className="w-4 h-4" />
                    {url}
                  </a>
                </div>
              ) : null}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
