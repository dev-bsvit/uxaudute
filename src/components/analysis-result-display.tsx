'use client'

import React, { useState } from 'react'
import { StructuredAnalysisResponse } from '@/lib/analysis-types'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { SurveyDisplay } from '@/components/ui/survey-display'
import { CanvasAnnotations } from '@/components/ui/canvas-annotations'
import { Monitor, Link2 } from 'lucide-react'

interface AnalysisResultDisplayProps {
  analysis?: StructuredAnalysisResponse
  showDetails?: boolean
  screenshot?: string | null
  url?: string | null
  onAnnotationUpdate?: (annotationData: string) => void
  auditId?: string // ID –∞—É–¥–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
}

export function AnalysisResultDisplay({ 
  analysis, 
  showDetails = true,
  screenshot,
  url,
  onAnnotationUpdate,
  auditId
}: AnalysisResultDisplayProps) {
  const [annotationData, setAnnotationData] = useState<string>(analysis?.annotations || '')

  if (!analysis) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
      </div>
    )
  }

  const handleAnnotationSave = (data: string) => {
    setAnnotationData(data)
    onAnnotationUpdate?.(data)
    console.log('Annotation data saved:', data)
  }

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-green-600'
    if (confidence >= 60) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'low': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  return (
    <div className="w-full max-w-none grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-screen">
      {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
      <div className="space-y-8">
        {/* –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ */}
        <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üì± –û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            <Badge variant="outline" className={getConfidenceColor(analysis.screenDescription.confidence)}>
              –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.screenDescription.confidence}%
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">–¢–∏–ø —ç–∫—Ä–∞–Ω–∞</h4>
              <p className="text-gray-600">{analysis.screenDescription.screenType}</p>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
              <p className="text-gray-600">{analysis.screenDescription.userGoal}</p>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-900 mb-2">–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</h4>
            <div className="flex flex-wrap gap-2">
              {analysis.screenDescription.keyElements.map((element, index) => (
                <Badge key={index} variant="secondary">
                  {element}
                </Badge>
              ))}
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-gray-900 mb-2">–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</h4>
            <p className="text-gray-600">{analysis.screenDescription.confidenceReason}</p>
          </div>
        </CardContent>
      </Card>

      {/* UX-–æ–ø—Ä–æ—Å */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üìä UX-–æ–ø—Ä–æ—Å
          </CardTitle>
        </CardHeader>
        <CardContent>
          <SurveyDisplay survey={analysis.uxSurvey} />
        </CardContent>
      </Card>

      {/* –ê—É–¥–∏—Ç–æ—Ä–∏—è */}
      {analysis.audience && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</h4>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {analysis.audience.targetAudience}
                </p>
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å</h4>
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {analysis.audience.mainPain}
                </p>
              </div>
            </div>

            {/* –°—Ç—Ä–∞—Ö–∏ */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–°—Ç—Ä–∞—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4>
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <ol className="space-y-2">
                  {analysis.audience.fears.map((fear, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="flex-shrink-0 w-6 h-6 bg-yellow-200 text-yellow-800 rounded-full flex items-center justify-center text-sm font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-700">{fear}</span>
                    </li>
                  ))}
                </ol>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ü–æ–≤–µ–¥–µ–Ω–∏–µ */}
      {analysis.behavior && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üéØ –ü–æ–≤–µ–¥–µ–Ω–∏–µ
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</h4>
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {analysis.behavior.userScenarios}
                </p>
              </div>
            </div>

            {/* –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</h4>
              <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {analysis.behavior.behavioralPatterns}
                </p>
              </div>
            </div>

            {/* –¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–¢–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—è</h4>
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <ol className="space-y-2">
                  {analysis.behavior.frictionPoints.map((point, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="flex-shrink-0 w-6 h-6 bg-orange-200 text-orange-800 rounded-full flex items-center justify-center text-sm font-medium">
                        {index + 1}
                      </span>
                      <span className="text-gray-700">{point}</span>
                    </li>
                  ))}
                </ol>
              </div>
            </div>

            {/* –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é</h4>
              <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                  {analysis.behavior.actionMotivation}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üîß –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
            <Badge variant="outline">
              {analysis.problemsAndSolutions.length} –ø—Ä–æ–±–ª–µ–º
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {analysis.problemsAndSolutions.map((problem, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-start justify-between">
                  <h4 className="font-medium text-gray-900">{problem.element}</h4>
                  <Badge className={getPriorityColor(problem.priority)}>
                    {problem.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : 
                     problem.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                  </Badge>
                </div>
                
                <div className="space-y-2">
                  <div>
                    <span className="font-medium text-red-600">–ü—Ä–æ–±–ª–µ–º–∞:</span>{' '}
                    <span className="text-gray-700">{problem.problem}</span>
                  </div>
                  <div>
                    <span className="font-medium text-blue-600">–ü—Ä–∏–Ω—Ü–∏–ø:</span>{' '}
                    <span className="text-gray-700">{problem.principle}</span>
                  </div>
                  <div>
                    <span className="font-medium text-orange-600">–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ:</span>{' '}
                    <span className="text-gray-700">{problem.consequence}</span>
                  </div>
                  <div>
                    <span className="font-medium text-green-600">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</span>{' '}
                    <span className="text-gray-700">{problem.recommendation}</span>
                  </div>
                  <div>
                    <span className="font-medium text-purple-600">–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</span>{' '}
                    <span className="text-gray-700">{problem.expectedEffect}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Self-Check */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–ß–µ–∫-–ª–∏—Å—Ç</h4>
              <div className="space-y-2">
                {Object.entries(analysis.selfCheck.checklist).map(([key, value]) => (
                  <div key={key} className="flex items-center gap-2">
                    <span className={value ? 'text-green-500' : 'text-red-500'}>
                      {value ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="text-sm text-gray-700">
                      {key === 'coversAllElements' && '–ü–æ–∫—Ä—ã—Ç—ã –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'}
                      {key === 'noContradictions' && '–ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'}
                      {key === 'principlesJustified' && '–ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º'}
                      {key === 'actionClarity' && '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'}
                    </span>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-3">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –±–ª–æ–∫–∞–º</h4>
              <div className="space-y-2">
                {Object.entries(analysis.selfCheck.confidence).map(([key, value]) => (
                  <div key={key} className="flex items-center justify-between">
                    <span className="text-sm text-gray-700">
                      {key === 'analysis' && '–ê–Ω–∞–ª–∏–∑'}
                      {key === 'survey' && '–û–ø—Ä–æ—Å'}
                      {key === 'recommendations' && '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
                    </span>
                    <span className={`font-medium ${getConfidenceColor(value)}`}>
                      {value}%
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
      {showDetails && (
        <div className="bg-gray-50 rounded-lg p-6">
          <h4 className="font-medium text-gray-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
            <div>
              <span className="font-medium">–í–µ—Ä—Å–∏—è:</span> {analysis.metadata.version}
            </div>
            <div>
              <span className="font-medium">–ú–æ–¥–µ–ª—å:</span> {analysis.metadata.model}
            </div>
            <div>
              <span className="font-medium">–í—Ä–µ–º—è:</span> {new Date(analysis.metadata.timestamp).toLocaleString('ru-RU')}
            </div>
          </div>
        </div>
      )}
      </div>

      {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º */}
      <div className="sticky top-4 h-fit">
        {(screenshot || url) && (
          <Card className="h-full">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {screenshot ? <Monitor className="w-5 h-5" /> : <Link2 className="w-5 h-5" />}
                {screenshot ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' : '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π URL'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {screenshot ? (
                <div className="space-y-4">
                  <CanvasAnnotations
                    src={screenshot}
                    alt="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                    className="w-full h-auto max-h-[70vh] object-contain"
                    onAnnotationSave={handleAnnotationSave}
                    initialAnnotationData={annotationData}
                    auditId={auditId}
                  />
                  <div className="text-sm text-gray-500 text-center">
                    üí° –†–µ–¥–∞–∫—Ç–æ—Ä –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
                  </div>
                  <div className="text-xs text-gray-400 text-center mt-2">
                    –ê–Ω–∞–ª–∏–∑ {new Date(analysis.metadata.timestamp).toLocaleDateString('ru-RU')}
                  </div>
                </div>
              ) : url ? (
                <div className="p-4 bg-slate-50 rounded-xl border-2 border-dashed border-slate-200">
                  <a 
                    href={url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:text-blue-800 font-medium break-all flex items-center gap-2"
                  >
                    <Link2 className="w-4 h-4" />
                    {url}
                  </a>
                </div>
              ) : null}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
